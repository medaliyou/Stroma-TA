
Mountain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007154  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007268  08007268  00017268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076bc  080076bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080076bc  080076bc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076bc  080076bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080076c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001e0  080078a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080078a4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccfe  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002206  00000000  00000000  0002cf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003018  00000000  00000000  000305e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d559  00000000  00000000  000335f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e16  00000000  00000000  00040b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  000c79bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800724c 	.word	0x0800724c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800724c 	.word	0x0800724c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <BSP_I2C_Notify>:
	v_I2C_Wait = 0;
	return v_I2C_Status;
}

void BSP_I2C_Notify (HAL_StatusTypeDef tStatus)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	v_I2C_Status = tStatus;
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <BSP_I2C_Notify+0x24>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	7013      	strb	r3, [r2, #0]
	v_I2C_Wait++;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <BSP_I2C_Notify+0x28>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <BSP_I2C_Notify+0x28>)
 8000aa0:	6013      	str	r3, [r2, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	200001fc 	.word	0x200001fc

08000ab4 <HAL_I2C_MasterTxCpltCallback>:

	return tStatus;
}

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	BSP_I2C_Notify (HAL_OK);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff ffe3 	bl	8000a88 <BSP_I2C_Notify>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	BSP_I2C_Notify (HAL_OK);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff ffd8 	bl	8000a88 <BSP_I2C_Notify>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef *hi2c)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	BSP_I2C_Notify (HAL_ERROR);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff ffcd 	bl	8000a88 <BSP_I2C_Notify>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b2a:	f043 0320 	orr.w	r3, r3, #32
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0320 	and.w	r3, r3, #32
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_GPIO_Init+0xa8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0xac>)
 8000b74:	f000 fec3 	bl	80018fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_GPIO_Init+0xac>)
 8000b92:	f000 fd19 	bl	80015c8 <HAL_GPIO_Init>

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40011000 	.word	0x40011000

08000ba8 <LOG_INFO>:

uint16_t size;
uint8_t Data[256];

int LOG_INFO (const char *format, ...)
{
 8000ba8:	b40f      	push	{r0, r1, r2, r3}
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b0c2      	sub	sp, #264	; 0x108
 8000bae:	af00      	add	r7, sp, #0
	va_list ap;
	va_start(ap, format);
 8000bb0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000bb4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	char buf[256];
	size_t len = vsnprintf (buf, sizeof buf, format, ap);
 8000bb8:	4638      	mov	r0, r7
 8000bba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000bbe:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc6:	f004 f91b 	bl	8004e00 <vsniprintf>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	va_end(ap);
	if (len > sizeof(buf) - 1)
 8000bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bd4:	2bff      	cmp	r3, #255	; 0xff
 8000bd6:	d902      	bls.n	8000bde <LOG_INFO+0x36>
		len = sizeof(buf) - 1;
 8000bd8:	23ff      	movs	r3, #255	; 0xff
 8000bda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if (HAL_OK == HAL_UART_Transmit (&huart1, buf, len, 1000))
 8000bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4639      	mov	r1, r7
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	4809      	ldr	r0, [pc, #36]	; (8000c10 <LOG_INFO+0x68>)
 8000bec:	f002 ffbf 	bl	8003b6e <HAL_UART_Transmit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <LOG_INFO+0x54>
	{
		return len;
 8000bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bfa:	e001      	b.n	8000c00 <LOG_INFO+0x58>
	}
	return -1;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000c06:	46bd      	mov	sp, r7
 8000c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr
 8000c10:	200002b4 	.word	0x200002b4

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1a:	f000 faa9 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1e:	f000 f885 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <main+0x108>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a3d      	ldr	r2, [pc, #244]	; (8000d1c <main+0x108>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <main+0x108>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <main+0x108>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a37      	ldr	r2, [pc, #220]	; (8000d1c <main+0x108>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <main+0x108>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <main+0x108>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <main+0x108>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <main+0x108>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <main+0x108>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <main+0x108>)
 8000c70:	f043 0320 	orr.w	r3, r3, #32
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <main+0x108>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0320 	and.w	r3, r3, #32
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <main+0x108>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <main+0x108>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <main+0x108>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_I2C2_CLK_ENABLE();
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <main+0x108>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <main+0x108>)
 8000ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <main+0x108>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]

  MX_GPIO_Init();
 8000cb2:	f7ff ff21 	bl	8000af8 <MX_GPIO_Init>
//  MX_I2C1_Init();
//  MX_I2C2_Init();
  MX_USART1_UART_Init();
 8000cb6:	f000 f9b1 	bl	800101c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <main+0x108>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <main+0x108>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <main+0x108>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	4619      	mov	r1, r3
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <main+0x10c>)
 8000cf0:	f000 fc6a 	bl	80015c8 <HAL_GPIO_Init>
	LOG_INFO("[I2C1] Reading PIN I2C1 SCL %d \r\n", HAL_GPIO_ReadPin(GPIOB, I2C_SCL_Pin));
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	480a      	ldr	r0, [pc, #40]	; (8000d20 <main+0x10c>)
 8000cf8:	f000 fdea 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <main+0x110>)
 8000d02:	f7ff ff51 	bl	8000ba8 <LOG_INFO>
	LOG_INFO("[I2C1] Reading PIN I2C1 SDA %d \r\n", HAL_GPIO_ReadPin(GPIOB, I2C_SDA_Pin));
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <main+0x10c>)
 8000d0a:	f000 fde1 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <main+0x114>)
 8000d14:	f7ff ff48 	bl	8000ba8 <LOG_INFO>
//	LOG_INFO("Init Done");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000d18:	e7fe      	b.n	8000d18 <main+0x104>
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	08007268 	.word	0x08007268
 8000d28:	0800728c 	.word	0x0800728c

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	2228      	movs	r2, #40	; 0x28
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fbcc 	bl	80044d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 fa9d 	bl	80032a0 <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000d6c:	f000 f818 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 fd09 	bl	80037a0 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d94:	f000 f804 	bl	8000da0 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3740      	adds	r7, #64	; 0x40
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_MspInit+0x60>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_MspInit+0x60>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 f9d1 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <I2C1_EV_IRQHandler+0x10>)
 8000e66:	f000 fd62 	bl	800192e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000020c 	.word	0x2000020c

08000e74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <I2C1_ER_IRQHandler+0x10>)
 8000e7a:	f000 fec9 	bl	8001c10 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000020c 	.word	0x2000020c

08000e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <USART1_IRQHandler+0x10>)
 8000e8e:	f002 ff01 	bl	8003c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002b4 	.word	0x200002b4

08000e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
	return 1;
 8000ea0:	2301      	movs	r3, #1
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <_kill>:

int _kill(int pid, int sig)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eb4:	f003 fae6 	bl	8004484 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2216      	movs	r2, #22
 8000ebc:	601a      	str	r2, [r3, #0]
	return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_exit>:

void _exit (int status)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffe7 	bl	8000eaa <_kill>
	while (1) {}		/* Make sure we hang here */
 8000edc:	e7fe      	b.n	8000edc <_exit+0x12>

08000ede <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e00a      	b.n	8000f06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef0:	f3af 8000 	nop.w
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	60ba      	str	r2, [r7, #8]
 8000efc:	b2ca      	uxtb	r2, r1
 8000efe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dbf0      	blt.n	8000ef0 <_read+0x12>
	}

return len;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e009      	b.n	8000f3e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	60ba      	str	r2, [r7, #8]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbf1      	blt.n	8000f2a <_write+0x12>
	}
	return len;
 8000f46:	687b      	ldr	r3, [r7, #4]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_close>:

int _close(int file)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	return -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f76:	605a      	str	r2, [r3, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <_isatty>:

int _isatty(int file)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return 1;
 8000f8c:	2301      	movs	r3, #1
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f003 fa50 	bl	8004484 <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20005000 	.word	0x20005000
 8001010:	00000400 	.word	0x00000400
 8001014:	20000200 	.word	0x20000200
 8001018:	20000310 	.word	0x20000310

0800101c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_USART1_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001028:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800102c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001054:	f002 fd3e 	bl	8003ad4 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f7ff fe9f 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200002b4 	.word	0x200002b4
 800106c:	40013800 	.word	0x40013800

08001070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <HAL_UART_MspInit+0x9c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d139      	bne.n	8001104 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_UART_MspInit+0xa0>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_UART_MspInit+0xa0>)
 8001096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_UART_MspInit+0xa0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_UART_MspInit+0xa0>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <HAL_UART_MspInit+0xa0>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_UART_MspInit+0xa0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 80010c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <HAL_UART_MspInit+0xa4>)
 80010d6:	f000 fa77 	bl	80015c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <HAL_UART_MspInit+0xa4>)
 80010f0:	f000 fa6a 	bl	80015c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2025      	movs	r0, #37	; 0x25
 80010fa:	f000 f972 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010fe:	2025      	movs	r0, #37	; 0x25
 8001100:	f000 f98b 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40013800 	.word	0x40013800
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800

08001118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800113e:	f000 f810 	bl	8001162 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f003 f9a5 	bl	8004490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001146:	f7ff fd65 	bl	8000c14 <main>
  bx lr
 800114a:	4770      	bx	lr
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001154:	080076c4 	.word	0x080076c4
  ldr r2, =_sbss
 8001158:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800115c:	2000030c 	.word	0x2000030c

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>

08001162 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x28>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f923 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fe0e 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f93b 	bl	8001436 <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d8:	f000 f903 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000004 	.word	0x20000004
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x20>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	2000000c 	.word	0x2000000c
 800121c:	200002f8 	.word	0x200002f8

08001220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	200002f8 	.word	0x200002f8

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4906      	ldr	r1, [pc, #24]	; (80012cc <__NVIC_EnableIRQ+0x34>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ac:	f7ff ff90 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff2d 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff42 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff35 	bl	8001298 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001460:	2b02      	cmp	r3, #2
 8001462:	d008      	beq.n	8001476 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2204      	movs	r2, #4
 8001468:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e020      	b.n	80014b8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 020e 	bic.w	r2, r2, #14
 8001484:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d005      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2204      	movs	r2, #4
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e051      	b.n	800158a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 020e 	bic.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <HAL_DMA_Abort_IT+0xd0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d029      	beq.n	8001564 <HAL_DMA_Abort_IT+0xa0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_DMA_Abort_IT+0xd4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d022      	beq.n	8001560 <HAL_DMA_Abort_IT+0x9c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_DMA_Abort_IT+0xd8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d01a      	beq.n	800155a <HAL_DMA_Abort_IT+0x96>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_DMA_Abort_IT+0xdc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d012      	beq.n	8001554 <HAL_DMA_Abort_IT+0x90>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_DMA_Abort_IT+0xe0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00a      	beq.n	800154e <HAL_DMA_Abort_IT+0x8a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <HAL_DMA_Abort_IT+0xe4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d102      	bne.n	8001548 <HAL_DMA_Abort_IT+0x84>
 8001542:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001546:	e00e      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800154c:	e00b      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 800154e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001552:	e008      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	e005      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	e002      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001560:	2310      	movs	r3, #16
 8001562:	e000      	b.n	8001566 <HAL_DMA_Abort_IT+0xa2>
 8001564:	2301      	movs	r3, #1
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_DMA_Abort_IT+0xe8>)
 8001568:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
    } 
  }
  return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40020008 	.word	0x40020008
 8001598:	4002001c 	.word	0x4002001c
 800159c:	40020030 	.word	0x40020030
 80015a0:	40020044 	.word	0x40020044
 80015a4:	40020058 	.word	0x40020058
 80015a8:	4002006c 	.word	0x4002006c
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b08b      	sub	sp, #44	; 0x2c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	e169      	b.n	80018b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015dc:	2201      	movs	r2, #1
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8158 	bne.w	80018aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a9a      	ldr	r2, [pc, #616]	; (8001868 <HAL_GPIO_Init+0x2a0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d05e      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001604:	4a98      	ldr	r2, [pc, #608]	; (8001868 <HAL_GPIO_Init+0x2a0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d875      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800160a:	4a98      	ldr	r2, [pc, #608]	; (800186c <HAL_GPIO_Init+0x2a4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d058      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001610:	4a96      	ldr	r2, [pc, #600]	; (800186c <HAL_GPIO_Init+0x2a4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d86f      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001616:	4a96      	ldr	r2, [pc, #600]	; (8001870 <HAL_GPIO_Init+0x2a8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d052      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 800161c:	4a94      	ldr	r2, [pc, #592]	; (8001870 <HAL_GPIO_Init+0x2a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d869      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001622:	4a94      	ldr	r2, [pc, #592]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d04c      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001628:	4a92      	ldr	r2, [pc, #584]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d863      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800162e:	4a92      	ldr	r2, [pc, #584]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d046      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001634:	4a90      	ldr	r2, [pc, #576]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d85d      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d82a      	bhi.n	8001694 <HAL_GPIO_Init+0xcc>
 800163e:	2b12      	cmp	r3, #18
 8001640:	d859      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <HAL_GPIO_Init+0x80>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	080016c3 	.word	0x080016c3
 800164c:	0800169d 	.word	0x0800169d
 8001650:	080016af 	.word	0x080016af
 8001654:	080016f1 	.word	0x080016f1
 8001658:	080016f7 	.word	0x080016f7
 800165c:	080016f7 	.word	0x080016f7
 8001660:	080016f7 	.word	0x080016f7
 8001664:	080016f7 	.word	0x080016f7
 8001668:	080016f7 	.word	0x080016f7
 800166c:	080016f7 	.word	0x080016f7
 8001670:	080016f7 	.word	0x080016f7
 8001674:	080016f7 	.word	0x080016f7
 8001678:	080016f7 	.word	0x080016f7
 800167c:	080016f7 	.word	0x080016f7
 8001680:	080016f7 	.word	0x080016f7
 8001684:	080016f7 	.word	0x080016f7
 8001688:	080016f7 	.word	0x080016f7
 800168c:	080016a5 	.word	0x080016a5
 8001690:	080016b9 	.word	0x080016b9
 8001694:	4a79      	ldr	r2, [pc, #484]	; (800187c <HAL_GPIO_Init+0x2b4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800169a:	e02c      	b.n	80016f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e029      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	3304      	adds	r3, #4
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e024      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e01f      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	330c      	adds	r3, #12
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e01a      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ca:	2304      	movs	r3, #4
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e013      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	611a      	str	r2, [r3, #16]
          break;
 80016e2:	e009      	b.n	80016f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e4:	2308      	movs	r3, #8
 80016e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	615a      	str	r2, [r3, #20]
          break;
 80016ee:	e003      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          break;
 80016f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d801      	bhi.n	8001702 <HAL_GPIO_Init+0x13a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d802      	bhi.n	8001714 <HAL_GPIO_Init+0x14c>
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	e002      	b.n	800171a <HAL_GPIO_Init+0x152>
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	3b08      	subs	r3, #8
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	210f      	movs	r1, #15
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80b1 	beq.w	80018aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_GPIO_Init+0x2b8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_GPIO_Init+0x2b8>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_GPIO_Init+0x2b8>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001760:	4a48      	ldr	r2, [pc, #288]	; (8001884 <HAL_GPIO_Init+0x2bc>)
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a40      	ldr	r2, [pc, #256]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d013      	beq.n	80017b4 <HAL_GPIO_Init+0x1ec>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3f      	ldr	r2, [pc, #252]	; (800188c <HAL_GPIO_Init+0x2c4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x1e8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <HAL_GPIO_Init+0x2c8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x1e4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <HAL_GPIO_Init+0x2cc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x1e0>
 80017a4:	2303      	movs	r3, #3
 80017a6:	e006      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017a8:	2304      	movs	r3, #4
 80017aa:	e004      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b4:	2300      	movs	r3, #0
 80017b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b8:	f002 0203 	and.w	r2, r2, #3
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	4093      	lsls	r3, r2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c6:	492f      	ldr	r1, [pc, #188]	; (8001884 <HAL_GPIO_Init+0x2bc>)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	492c      	ldr	r1, [pc, #176]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4928      	ldr	r1, [pc, #160]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4922      	ldr	r1, [pc, #136]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	491e      	ldr	r1, [pc, #120]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001820:	4013      	ands	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4918      	ldr	r1, [pc, #96]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	4914      	ldr	r1, [pc, #80]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001848:	4013      	ands	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d021      	beq.n	800189c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	490e      	ldr	r1, [pc, #56]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
 8001864:	e021      	b.n	80018aa <HAL_GPIO_Init+0x2e2>
 8001866:	bf00      	nop
 8001868:	10320000 	.word	0x10320000
 800186c:	10310000 	.word	0x10310000
 8001870:	10220000 	.word	0x10220000
 8001874:	10210000 	.word	0x10210000
 8001878:	10120000 	.word	0x10120000
 800187c:	10110000 	.word	0x10110000
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40011000 	.word	0x40011000
 8001894:	40011400 	.word	0x40011400
 8001898:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_GPIO_Init+0x304>)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	4909      	ldr	r1, [pc, #36]	; (80018cc <HAL_GPIO_Init+0x304>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f47f ae8e 	bne.w	80015dc <HAL_GPIO_Init+0x14>
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	372c      	adds	r7, #44	; 0x2c
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	807b      	strh	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800190e:	787b      	ldrb	r3, [r7, #1]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001914:	887a      	ldrh	r2, [r7, #2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800191a:	e003      	b.n	8001924 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	041a      	lsls	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800194e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001956:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d003      	beq.n	8001966 <HAL_I2C_EV_IRQHandler+0x38>
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b40      	cmp	r3, #64	; 0x40
 8001962:	f040 80c1 	bne.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <HAL_I2C_EV_IRQHandler+0x6e>
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001986:	d003      	beq.n	8001990 <HAL_I2C_EV_IRQHandler+0x62>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800198e:	d101      	bne.n	8001994 <HAL_I2C_EV_IRQHandler+0x66>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_I2C_EV_IRQHandler+0x68>
 8001994:	2300      	movs	r3, #0
 8001996:	2b01      	cmp	r3, #1
 8001998:	f000 8132 	beq.w	8001c00 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00c      	beq.n	80019c0 <HAL_I2C_EV_IRQHandler+0x92>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	0a5b      	lsrs	r3, r3, #9
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f001 fc5a 	bl	800326c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fd5c 	bl	8002476 <I2C_Master_SB>
 80019be:	e092      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d009      	beq.n	80019e0 <HAL_I2C_EV_IRQHandler+0xb2>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	0a5b      	lsrs	r3, r3, #9
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fdd1 	bl	8002580 <I2C_Master_ADD10>
 80019de:	e082      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d009      	beq.n	8001a00 <HAL_I2C_EV_IRQHandler+0xd2>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fdea 	bl	80025d2 <I2C_Master_ADDR>
 80019fe:	e072      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03b      	beq.n	8001a84 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a1a:	f000 80f3 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	09db      	lsrs	r3, r3, #7
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00f      	beq.n	8001a4a <HAL_I2C_EV_IRQHandler+0x11c>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	0a9b      	lsrs	r3, r3, #10
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_I2C_EV_IRQHandler+0x11c>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f9d6 	bl	8001df4 <I2C_MasterTransmit_TXE>
 8001a48:	e04d      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80d6 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	0a5b      	lsrs	r3, r3, #9
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80cf 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	2b21      	cmp	r3, #33	; 0x21
 8001a6a:	d103      	bne.n	8001a74 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fa5d 	bl	8001f2c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a72:	e0c7      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b40      	cmp	r3, #64	; 0x40
 8001a78:	f040 80c4 	bne.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 facb 	bl	8002018 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a82:	e0bf      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a92:	f000 80b7 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00f      	beq.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x194>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	0a9b      	lsrs	r3, r3, #10
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x194>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fb40 	bl	8002140 <I2C_MasterReceive_RXNE>
 8001ac0:	e011      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 809a 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0a5b      	lsrs	r3, r3, #9
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8093 	beq.w	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fbdf 	bl	80022a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae4:	e08e      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ae6:	e08d      	b.n	8001c04 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	e007      	b.n	8001b0a <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d012      	beq.n	8001b3c <HAL_I2C_EV_IRQHandler+0x20e>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	0a5b      	lsrs	r3, r3, #9
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 ffa3 	bl	8002a80 <I2C_Slave_ADDR>
 8001b3a:	e066      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_I2C_EV_IRQHandler+0x22e>
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	0a5b      	lsrs	r3, r3, #9
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 ffdd 	bl	8002b14 <I2C_Slave_STOPF>
 8001b5a:	e056      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	2b21      	cmp	r3, #33	; 0x21
 8001b60:	d002      	beq.n	8001b68 <HAL_I2C_EV_IRQHandler+0x23a>
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	2b29      	cmp	r3, #41	; 0x29
 8001b66:	d125      	bne.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	09db      	lsrs	r3, r3, #7
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00f      	beq.n	8001b94 <HAL_I2C_EV_IRQHandler+0x266>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <HAL_I2C_EV_IRQHandler+0x266>
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 febb 	bl	8002908 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b92:	e039      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d033      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2da>
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02d      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fee8 	bl	8002982 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bb2:	e029      	b.n	8001c08 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00f      	beq.n	8001be0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	0a9b      	lsrs	r3, r3, #10
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fef2 	bl	80029c2 <I2C_SlaveReceive_RXNE>
 8001bde:	e014      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 ff20 	bl	8002a3e <I2C_SlaveReceive_BTF>
 8001bfe:	e004      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001c00:	bf00      	nop
 8001c02:	e002      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c04:	bf00      	nop
 8001c06:	e000      	b.n	8001c0a <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c08:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c32:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d016      	beq.n	8001c6e <HAL_I2C_ER_IRQHandler+0x5e>
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c5c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	0a5b      	lsrs	r3, r3, #9
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00e      	beq.n	8001c98 <HAL_I2C_ER_IRQHandler+0x88>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001c96:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	0a9b      	lsrs	r3, r3, #10
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d03f      	beq.n	8001d24 <HAL_I2C_ER_IRQHandler+0x114>
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d039      	beq.n	8001d24 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8001cb0:	7efb      	ldrb	r3, [r7, #27]
 8001cb2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001cca:	7ebb      	ldrb	r3, [r7, #26]
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d112      	bne.n	8001cf6 <HAL_I2C_ER_IRQHandler+0xe6>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10f      	bne.n	8001cf6 <HAL_I2C_ER_IRQHandler+0xe6>
 8001cd6:	7cfb      	ldrb	r3, [r7, #19]
 8001cd8:	2b21      	cmp	r3, #33	; 0x21
 8001cda:	d008      	beq.n	8001cee <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001cdc:	7cfb      	ldrb	r3, [r7, #19]
 8001cde:	2b29      	cmp	r3, #41	; 0x29
 8001ce0:	d005      	beq.n	8001cee <HAL_I2C_ER_IRQHandler+0xde>
 8001ce2:	7cfb      	ldrb	r3, [r7, #19]
 8001ce4:	2b28      	cmp	r3, #40	; 0x28
 8001ce6:	d106      	bne.n	8001cf6 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b21      	cmp	r3, #33	; 0x21
 8001cec:	d103      	bne.n	8001cf6 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f001 f840 	bl	8002d74 <I2C_Slave_AF>
 8001cf4:	e016      	b.n	8001d24 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cfe:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d08:	7efb      	ldrb	r3, [r7, #27]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d002      	beq.n	8001d14 <HAL_I2C_ER_IRQHandler+0x104>
 8001d0e:	7efb      	ldrb	r3, [r7, #27]
 8001d10:	2b40      	cmp	r3, #64	; 0x40
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d22:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00e      	beq.n	8001d4e <HAL_I2C_ER_IRQHandler+0x13e>
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001d4c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f001 f877 	bl	8002e54 <I2C_ITError>
  }
}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d150      	bne.n	8001ebc <I2C_MasterTransmit_TXE+0xc8>
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b21      	cmp	r3, #33	; 0x21
 8001e1e:	d14d      	bne.n	8001ebc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d01d      	beq.n	8001e62 <I2C_MasterTransmit_TXE+0x6e>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d01a      	beq.n	8001e62 <I2C_MasterTransmit_TXE+0x6e>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e32:	d016      	beq.n	8001e62 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e42:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2211      	movs	r2, #17
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fe2a 	bl	8000ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e60:	e060      	b.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e70:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e80:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b40      	cmp	r3, #64	; 0x40
 8001e9a:	d107      	bne.n	8001eac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff8a 	bl	8001dbe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001eaa:	e03b      	b.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe fdfd 	bl	8000ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001eba:	e033      	b.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b21      	cmp	r3, #33	; 0x21
 8001ec0:	d005      	beq.n	8001ece <I2C_MasterTransmit_TXE+0xda>
 8001ec2:	7bbb      	ldrb	r3, [r7, #14]
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d12d      	bne.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b22      	cmp	r3, #34	; 0x22
 8001ecc:	d12a      	bne.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ee8:	e01c      	b.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b40      	cmp	r3, #64	; 0x40
 8001ef4:	d103      	bne.n	8001efe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f88e 	bl	8002018 <I2C_MemoryTransmit_TXE_BTF>
}
 8001efc:	e012      	b.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f22:	e7ff      	b.n	8001f24 <I2C_MasterTransmit_TXE+0x130>
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b21      	cmp	r3, #33	; 0x21
 8001f44:	d164      	bne.n	8002010 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d012      	beq.n	8001f76 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001f74:	e04c      	b.n	8002010 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d01d      	beq.n	8001fb8 <I2C_MasterTransmit_BTF+0x8c>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d01a      	beq.n	8001fb8 <I2C_MasterTransmit_BTF+0x8c>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f88:	d016      	beq.n	8001fb8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f98:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2211      	movs	r2, #17
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7fe fd7f 	bl	8000ab4 <HAL_I2C_MasterTxCpltCallback>
}
 8001fb6:	e02b      	b.n	8002010 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fc6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d107      	bne.n	8002002 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fedf 	bl	8001dbe <HAL_I2C_MemTxCpltCallback>
}
 8002000:	e006      	b.n	8002010 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fd52 	bl	8000ab4 <HAL_I2C_MasterTxCpltCallback>
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002026:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11d      	bne.n	800206c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10b      	bne.n	8002050 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002048:	1c9a      	adds	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800204e:	e073      	b.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002054:	b29b      	uxth	r3, r3
 8002056:	121b      	asrs	r3, r3, #8
 8002058:	b2da      	uxtb	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	651a      	str	r2, [r3, #80]	; 0x50
}
 800206a:	e065      	b.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10b      	bne.n	800208c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	b2da      	uxtb	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	651a      	str	r2, [r3, #80]	; 0x50
}
 800208a:	e055      	b.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	2b02      	cmp	r3, #2
 8002092:	d151      	bne.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b22      	cmp	r3, #34	; 0x22
 8002098:	d10d      	bne.n	80020b6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020b4:	e040      	b.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b21      	cmp	r3, #33	; 0x21
 80020c4:	d112      	bne.n	80020ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020ea:	e025      	b.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d120      	bne.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b21      	cmp	r3, #33	; 0x21
 80020fa:	d11d      	bne.n	8002138 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800210a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fe43 	bl	8001dbe <HAL_I2C_MemTxCpltCallback>
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b22      	cmp	r3, #34	; 0x22
 8002152:	f040 80a2 	bne.w	800229a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d921      	bls.n	80021a8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b03      	cmp	r3, #3
 8002192:	f040 8082 	bne.w	800229a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80021a6:	e078      	b.n	800229a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d074      	beq.n	800229a <I2C_MasterReceive_RXNE+0x15a>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <I2C_MasterReceive_RXNE+0x7c>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d16e      	bne.n	800229a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f001 f823 	bl	8003208 <I2C_WaitOnSTOPRequestThroughIT>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d142      	bne.n	800224e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d10a      	bne.n	8002238 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fdcd 	bl	8001dd0 <HAL_I2C_MemRxCpltCallback>
}
 8002236:	e030      	b.n	800229a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2212      	movs	r2, #18
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fc3f 	bl	8000aca <HAL_I2C_MasterRxCpltCallback>
}
 800224c:	e025      	b.n	800229a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800225c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe fc23 	bl	8000ae0 <HAL_I2C_ErrorCallback>
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d11b      	bne.n	80022f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80022f0:	e0bd      	b.n	800246e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d129      	bne.n	8002350 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00a      	beq.n	8002328 <I2C_MasterReceive_BTF+0x86>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d007      	beq.n	8002328 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002326:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800234e:	e08e      	b.n	800246e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d176      	bne.n	8002448 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d002      	beq.n	8002366 <I2C_MasterReceive_BTF+0xc4>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b10      	cmp	r3, #16
 8002364:	d108      	bne.n	8002378 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e019      	b.n	80023ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d002      	beq.n	8002384 <I2C_MasterReceive_BTF+0xe2>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d108      	bne.n	8002396 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e00a      	b.n	80023ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b10      	cmp	r3, #16
 800239a:	d007      	beq.n	80023ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002406:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d10a      	bne.n	8002432 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fcd0 	bl	8001dd0 <HAL_I2C_MemRxCpltCallback>
}
 8002430:	e01d      	b.n	800246e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2212      	movs	r2, #18
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe fb42 	bl	8000aca <HAL_I2C_MasterRxCpltCallback>
}
 8002446:	e012      	b.n	800246e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d117      	bne.n	80024ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80024a4:	e067      	b.n	8002576 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]
}
 80024b8:	e05d      	b.n	8002576 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024c2:	d133      	bne.n	800252c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b21      	cmp	r3, #33	; 0x21
 80024ce:	d109      	bne.n	80024e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024e0:	611a      	str	r2, [r3, #16]
 80024e2:	e008      	b.n	80024f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <I2C_Master_SB+0x92>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d108      	bne.n	800251a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	2b00      	cmp	r3, #0
 800250e:	d032      	beq.n	8002576 <I2C_Master_SB+0x100>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02d      	beq.n	8002576 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002528:	605a      	str	r2, [r3, #4]
}
 800252a:	e024      	b.n	8002576 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10e      	bne.n	8002552 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	b29b      	uxth	r3, r3
 800253a:	11db      	asrs	r3, r3, #7
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 0306 	and.w	r3, r3, #6
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f063 030f 	orn	r3, r3, #15
 8002548:	b2da      	uxtb	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]
}
 8002550:	e011      	b.n	8002576 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10d      	bne.n	8002576 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	b29b      	uxth	r3, r3
 8002560:	11db      	asrs	r3, r3, #7
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f003 0306 	and.w	r3, r3, #6
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f063 030e 	orn	r3, r3, #14
 800256e:	b2da      	uxtb	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	b2da      	uxtb	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <I2C_Master_ADD10+0x26>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <I2C_Master_ADD10+0x48>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c6:	605a      	str	r2, [r3, #4]
  }
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b091      	sub	sp, #68	; 0x44
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b22      	cmp	r3, #34	; 0x22
 80025fa:	f040 8174 	bne.w	80028e6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <I2C_Master_ADDR+0x54>
 8002606:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d10b      	bne.n	8002626 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	2300      	movs	r3, #0
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	e16b      	b.n	80028fe <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11d      	bne.n	800266a <I2C_Master_ADDR+0x98>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002636:	d118      	bne.n	800266a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	651a      	str	r2, [r3, #80]	; 0x50
 8002668:	e149      	b.n	80028fe <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d113      	bne.n	800269c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002674:	2300      	movs	r3, #0
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e120      	b.n	80028de <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	f040 808a 	bne.w	80027bc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80026a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026ae:	d137      	bne.n	8002720 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026be:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ce:	d113      	bne.n	80026f8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026de:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	e0f2      	b.n	80028de <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e0de      	b.n	80028de <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002722:	2b08      	cmp	r3, #8
 8002724:	d02e      	beq.n	8002784 <I2C_Master_ADDR+0x1b2>
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	2b20      	cmp	r3, #32
 800272a:	d02b      	beq.n	8002784 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272e:	2b12      	cmp	r3, #18
 8002730:	d102      	bne.n	8002738 <I2C_Master_ADDR+0x166>
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	2b01      	cmp	r3, #1
 8002736:	d125      	bne.n	8002784 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00e      	beq.n	800275c <I2C_Master_ADDR+0x18a>
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	2b02      	cmp	r3, #2
 8002742:	d00b      	beq.n	800275c <I2C_Master_ADDR+0x18a>
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	2b10      	cmp	r3, #16
 8002748:	d008      	beq.n	800275c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e007      	b.n	800276c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800276a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	e0ac      	b.n	80028de <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002792:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e090      	b.n	80028de <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d158      	bne.n	8002878 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d021      	beq.n	8002810 <I2C_Master_ADDR+0x23e>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d01e      	beq.n	8002810 <I2C_Master_ADDR+0x23e>
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d01b      	beq.n	8002810 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e012      	b.n	8002836 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800281e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	d14b      	bne.n	80028de <I2C_Master_ADDR+0x30c>
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800284c:	d00b      	beq.n	8002866 <I2C_Master_ADDR+0x294>
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	2b01      	cmp	r3, #1
 8002852:	d008      	beq.n	8002866 <I2C_Master_ADDR+0x294>
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	2b08      	cmp	r3, #8
 8002858:	d005      	beq.n	8002866 <I2C_Master_ADDR+0x294>
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	2b10      	cmp	r3, #16
 800285e:	d002      	beq.n	8002866 <I2C_Master_ADDR+0x294>
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	2b20      	cmp	r3, #32
 8002864:	d13b      	bne.n	80028de <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e032      	b.n	80028de <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002886:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002896:	d117      	bne.n	80028c8 <I2C_Master_ADDR+0x2f6>
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800289e:	d00b      	beq.n	80028b8 <I2C_Master_ADDR+0x2e6>
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d008      	beq.n	80028b8 <I2C_Master_ADDR+0x2e6>
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d005      	beq.n	80028b8 <I2C_Master_ADDR+0x2e6>
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d002      	beq.n	80028b8 <I2C_Master_ADDR+0x2e6>
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d107      	bne.n	80028c8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80028e4:	e00b      	b.n	80028fe <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
}
 80028fc:	e7ff      	b.n	80028fe <I2C_Master_ADDR+0x32c>
 80028fe:	bf00      	nop
 8002900:	3744      	adds	r7, #68	; 0x44
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002916:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02b      	beq.n	800297a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d114      	bne.n	800297a <I2C_SlaveTransmit_TXE+0x72>
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b29      	cmp	r3, #41	; 0x29
 8002954:	d111      	bne.n	800297a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002964:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2221      	movs	r2, #33	; 0x21
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2228      	movs	r2, #40	; 0x28
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff f9fa 	bl	8001d6e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d011      	beq.n	80029b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d02c      	beq.n	8002a36 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d114      	bne.n	8002a36 <I2C_SlaveReceive_RXNE+0x74>
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a10:	d111      	bne.n	8002a36 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a20:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2222      	movs	r2, #34	; 0x22
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2228      	movs	r2, #40	; 0x28
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff f9a5 	bl	8001d80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d012      	beq.n	8002a76 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a9a:	2b28      	cmp	r3, #40	; 0x28
 8002a9c:	d127      	bne.n	8002aee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	09db      	lsrs	r3, r3, #7
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	81bb      	strh	r3, [r7, #12]
 8002ad0:	e002      	b.n	8002ad8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ae0:	89ba      	ldrh	r2, [r7, #12]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff f953 	bl	8001d92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002aec:	e00e      	b.n	8002b0c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b70:	d172      	bne.n	8002c58 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b22      	cmp	r3, #34	; 0x22
 8002b76:	d002      	beq.n	8002b7e <I2C_Slave_STOPF+0x6a>
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7c:	d135      	bne.n	8002bea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 0204 	orr.w	r2, r3, #4
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fcfa 	bl	80015b0 <HAL_DMA_GetState>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d049      	beq.n	8002c56 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	4a69      	ldr	r2, [pc, #420]	; (8002d6c <I2C_Slave_STOPF+0x258>)
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fc78 	bl	80014c4 <HAL_DMA_Abort_IT>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d03d      	beq.n	8002c56 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be4:	4610      	mov	r0, r2
 8002be6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002be8:	e035      	b.n	8002c56 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0204 	orr.w	r2, r3, #4
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fcc4 	bl	80015b0 <HAL_DMA_GetState>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d014      	beq.n	8002c58 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	4a4e      	ldr	r2, [pc, #312]	; (8002d6c <I2C_Slave_STOPF+0x258>)
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fc42 	bl	80014c4 <HAL_DMA_Abort_IT>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c50:	4610      	mov	r0, r2
 8002c52:	4798      	blx	r3
 8002c54:	e000      	b.n	8002c58 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c56:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03e      	beq.n	8002ce0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d112      	bne.n	8002c96 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d112      	bne.n	8002cca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0204 	orr.w	r2, r3, #4
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8b3 	bl	8002e54 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002cee:	e039      	b.n	8002d64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf4:	d109      	bne.n	8002d0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2228      	movs	r2, #40	; 0x28
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff f83b 	bl	8001d80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b28      	cmp	r3, #40	; 0x28
 8002d14:	d111      	bne.n	8002d3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <I2C_Slave_STOPF+0x25c>)
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff f83a 	bl	8001dac <HAL_I2C_ListenCpltCallback>
}
 8002d38:	e014      	b.n	8002d64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	2b22      	cmp	r3, #34	; 0x22
 8002d40:	d002      	beq.n	8002d48 <I2C_Slave_STOPF+0x234>
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b22      	cmp	r3, #34	; 0x22
 8002d46:	d10d      	bne.n	8002d64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff f80e 	bl	8001d80 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	080030b9 	.word	0x080030b9
 8002d70:	ffff0000 	.word	0xffff0000

08002d74 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d002      	beq.n	8002d96 <I2C_Slave_AF+0x22>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d129      	bne.n	8002dea <I2C_Slave_AF+0x76>
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	2b28      	cmp	r3, #40	; 0x28
 8002d9a:	d126      	bne.n	8002dea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <I2C_Slave_AF+0xdc>)
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe ffe2 	bl	8001dac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002de8:	e02e      	b.n	8002e48 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b21      	cmp	r3, #33	; 0x21
 8002dee:	d126      	bne.n	8002e3e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <I2C_Slave_AF+0xdc>)
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2221      	movs	r2, #33	; 0x21
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e24:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe ff99 	bl	8001d6e <HAL_I2C_SlaveTxCpltCallback>
}
 8002e3c:	e004      	b.n	8002e48 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e46:	615a      	str	r2, [r3, #20]
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	ffff0000 	.word	0xffff0000

08002e54 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d002      	beq.n	8002e78 <I2C_ITError+0x24>
 8002e72:	7bbb      	ldrb	r3, [r7, #14]
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d10a      	bne.n	8002e8e <I2C_ITError+0x3a>
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b22      	cmp	r3, #34	; 0x22
 8002e7c:	d107      	bne.n	8002e8e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e94:	2b28      	cmp	r3, #40	; 0x28
 8002e96:	d107      	bne.n	8002ea8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2228      	movs	r2, #40	; 0x28
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ea6:	e015      	b.n	8002ed4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb6:	d00a      	beq.n	8002ece <I2C_ITError+0x7a>
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b60      	cmp	r3, #96	; 0x60
 8002ebc:	d007      	beq.n	8002ece <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee2:	d161      	bne.n	8002fa8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d020      	beq.n	8002f42 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f04:	4a6a      	ldr	r2, [pc, #424]	; (80030b0 <I2C_ITError+0x25c>)
 8002f06:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fad9 	bl	80014c4 <HAL_DMA_Abort_IT>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8089 	beq.w	800302c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
 8002f40:	e074      	b.n	800302c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	4a5a      	ldr	r2, [pc, #360]	; (80030b0 <I2C_ITError+0x25c>)
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fab8 	bl	80014c4 <HAL_DMA_Abort_IT>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d068      	beq.n	800302c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d10b      	bne.n	8002f80 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4798      	blx	r3
 8002fa6:	e041      	b.n	800302c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b60      	cmp	r3, #96	; 0x60
 8002fb2:	d125      	bne.n	8003000 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d10b      	bne.n	8002fe8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fe fef2 	bl	8001de2 <HAL_I2C_AbortCpltCallback>
 8002ffe:	e015      	b.n	800302c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d10b      	bne.n	8003026 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fd5a 	bl	8000ae0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10e      	bne.n	800305a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003068:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d113      	bne.n	80030a6 <I2C_ITError+0x252>
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b28      	cmp	r3, #40	; 0x28
 8003082:	d110      	bne.n	80030a6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <I2C_ITError+0x260>)
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fe fe83 	bl	8001dac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	080030b9 	.word	0x080030b9
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030d2:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <I2C_DMAAbort+0x148>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <I2C_DMAAbort+0x14c>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0a1a      	lsrs	r2, r3, #8
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00da      	lsls	r2, r3, #3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80030fe:	e00a      	b.n	8003116 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003114:	d0ea      	beq.n	80030ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	2200      	movs	r2, #0
 800315a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	2200      	movs	r2, #0
 800316a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b60      	cmp	r3, #96	; 0x60
 8003186:	d10e      	bne.n	80031a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f7fe fe1f 	bl	8001de2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031a4:	e027      	b.n	80031f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ac:	2b28      	cmp	r3, #40	; 0x28
 80031ae:	d117      	bne.n	80031e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2228      	movs	r2, #40	; 0x28
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031de:	e007      	b.n	80031f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80031f0:	6978      	ldr	r0, [r7, #20]
 80031f2:	f7fd fc75 	bl	8000ae0 <HAL_I2C_ErrorCallback>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000004 	.word	0x20000004
 8003204:	14f8b589 	.word	0x14f8b589

08003208 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	4a13      	ldr	r2, [pc, #76]	; (8003268 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	0a1a      	lsrs	r2, r3, #8
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3b01      	subs	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d107      	bne.n	8003246 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e008      	b.n	8003258 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d0e9      	beq.n	800322a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000004 	.word	0x20000004
 8003268:	14f8b589 	.word	0x14f8b589

0800326c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800327c:	d103      	bne.n	8003286 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003284:	e007      	b.n	8003296 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800328e:	d102      	bne.n	8003296 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2208      	movs	r2, #8
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e26c      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8087 	beq.w	80033ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c0:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d00c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032cc:	4b8f      	ldr	r3, [pc, #572]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_OscConfig+0x5e>
 80032d8:	4b8c      	ldr	r3, [pc, #560]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d10b      	bne.n	80032fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	4b89      	ldr	r3, [pc, #548]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06c      	beq.n	80033cc <HAL_RCC_OscConfig+0x12c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d168      	bne.n	80033cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e246      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x76>
 8003308:	4b80      	ldr	r3, [pc, #512]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a7f      	ldr	r2, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e02e      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b7b      	ldr	r3, [pc, #492]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7a      	ldr	r2, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b78      	ldr	r3, [pc, #480]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a77      	ldr	r2, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0xbc>
 8003342:	4b72      	ldr	r3, [pc, #456]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a71      	ldr	r2, [pc, #452]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 800335c:	4b6b      	ldr	r3, [pc, #428]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6a      	ldr	r2, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a67      	ldr	r2, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd ff50 	bl	8001220 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fd ff4c 	bl	8001220 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1fa      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xe4>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd ff3c 	bl	8001220 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fd ff38 	bl	8001220 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1e6      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x10c>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033da:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x18c>
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b43      	ldr	r3, [pc, #268]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x176>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1ba      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3d      	ldr	r3, [pc, #244]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4939      	ldr	r1, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fd fef1 	bl	8001220 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd feed 	bl	8001220 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e19b      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2d      	ldr	r3, [pc, #180]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b2a      	ldr	r3, [pc, #168]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4927      	ldr	r1, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fed0 	bl	8001220 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003484:	f7fd fecc 	bl	8001220 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e17a      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03a      	beq.n	8003524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d019      	beq.n	80034ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fd feb0 	bl	8001220 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fd feac 	bl	8001220 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e15a      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f000 fad8 	bl	8003a98 <RCC_Delay>
 80034e8:	e01c      	b.n	8003524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fd fe96 	bl	8001220 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f6:	e00f      	b.n	8003518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fd fe92 	bl	8001220 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d908      	bls.n	8003518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e140      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	42420000 	.word	0x42420000
 8003514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	4b9e      	ldr	r3, [pc, #632]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e9      	bne.n	80034f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a6 	beq.w	800367e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003536:	4b97      	ldr	r3, [pc, #604]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	4b94      	ldr	r3, [pc, #592]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4a93      	ldr	r2, [pc, #588]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	61d3      	str	r3, [r2, #28]
 800354e:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d118      	bne.n	800359c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a8a      	ldr	r2, [pc, #552]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003576:	f7fd fe53 	bl	8001220 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7fd fe4f 	bl	8001220 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0fd      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x312>
 80035a4:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	e02d      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x334>
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6213      	str	r3, [r2, #32]
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	e01c      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x356>
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6213      	str	r3, [r2, #32]
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a69      	ldr	r2, [pc, #420]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	e00b      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a63      	ldr	r2, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d015      	beq.n	8003642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fd fe03 	bl	8001220 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fd fdff 	bl	8001220 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0ab      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ee      	beq.n	800361e <HAL_RCC_OscConfig+0x37e>
 8003640:	e014      	b.n	800366c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fd fded 	bl	8001220 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd fde9 	bl	8001220 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e095      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ee      	bne.n	800364a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a47      	ldr	r2, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8081 	beq.w	800378a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d061      	beq.n	8003758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d146      	bne.n	800372a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fd fdbd 	bl	8001220 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fd fdb9 	bl	8001220 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e067      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	492d      	ldr	r1, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a19      	ldr	r1, [r3, #32]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	430b      	orrs	r3, r1
 80036f6:	4927      	ldr	r1, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fd fd8d 	bl	8001220 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd fd89 	bl	8001220 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e037      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x46a>
 8003728:	e02f      	b.n	800378a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fd fd76 	bl	8001220 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fd fd72 	bl	8001220 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e020      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x498>
 8003756:	e018      	b.n	800378a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e013      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	429a      	cmp	r2, r3
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060

080037a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0d0      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b67      	ldr	r3, [pc, #412]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4965      	ldr	r1, [pc, #404]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800381e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d040      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d115      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e073      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06b      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4936      	ldr	r1, [pc, #216]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003890:	f7fd fcc6 	bl	8001220 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fd fcc2 	bl	8001220 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e053      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d210      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4922      	ldr	r1, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392e:	f000 f821 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003932:	4602      	mov	r2, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	490a      	ldr	r1, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	5ccb      	ldrb	r3, [r1, r3]
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1cc>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1d0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fc24 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40022000 	.word	0x40022000
 8003964:	40021000 	.word	0x40021000
 8003968:	080072c0 	.word	0x080072c0
 800396c:	20000004 	.word	0x20000004
 8003970:	20000008 	.word	0x20000008

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800397c:	1d3c      	adds	r4, r7, #4
 800397e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003984:	f240 2301 	movw	r3, #513	; 0x201
 8003988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x46>
 80039b2:	e02d      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b6:	623b      	str	r3, [r7, #32]
      break;
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039c6:	4413      	add	r3, r2
 80039c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c5b      	lsrs	r3, r3, #17
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039e6:	4413      	add	r3, r2
 80039e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f2:	fb02 f203 	mul.w	r2, r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	e004      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	623b      	str	r3, [r7, #32]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a12:	623b      	str	r3, [r7, #32]
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc90      	pop	{r4, r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	080072b0 	.word	0x080072b0
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	003d0900 	.word	0x003d0900

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a4c:	f7ff fff2 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	080072d0 	.word	0x080072d0

08003a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a74:	f7ff ffde 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4903      	ldr	r1, [pc, #12]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	080072d0 	.word	0x080072d0

08003a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <RCC_Delay+0x34>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <RCC_Delay+0x38>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0a5b      	lsrs	r3, r3, #9
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab4:	bf00      	nop
  }
  while (Delay --);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e5a      	subs	r2, r3, #1
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f9      	bne.n	8003ab4 <RCC_Delay+0x1c>
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	20000004 	.word	0x20000004
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e03f      	b.n	8003b66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd fab8 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fc25 	bl	8004368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08a      	sub	sp, #40	; 0x28
 8003b72:	af02      	add	r7, sp, #8
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d17c      	bne.n	8003c88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_UART_Transmit+0x2c>
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e075      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UART_Transmit+0x3e>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e06e      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2221      	movs	r2, #33	; 0x21
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fb2d 	bl	8001220 <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d108      	bne.n	8003bf0 <HAL_UART_Transmit+0x82>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e003      	b.n	8003bf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c00:	e02a      	b.n	8003c58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fa11 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e036      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3302      	adds	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e007      	b.n	8003c4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1cf      	bne.n	8003c02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f9e1 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e006      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x52>
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa99 	bl	8004216 <UART_Receive_IT>
      return;
 8003ce4:	e17b      	b.n	8003fde <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80b1 	beq.w	8003e50 <HAL_UART_IRQHandler+0x1bc>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <HAL_UART_IRQHandler+0x70>
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a6 	beq.w	8003e50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_UART_IRQHandler+0x90>
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_UART_IRQHandler+0xb0>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0202 	orr.w	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_UART_IRQHandler+0xd0>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f043 0204 	orr.w	r2, r3, #4
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00f      	beq.n	8003d8e <HAL_UART_IRQHandler+0xfa>
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_UART_IRQHandler+0xee>
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f043 0208 	orr.w	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 811e 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <HAL_UART_IRQHandler+0x11e>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa32 	bl	8004216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <HAL_UART_IRQHandler+0x146>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d031      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f974 	bl	80040c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d023      	beq.n	8003e36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d013      	beq.n	8003e2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	4a76      	ldr	r2, [pc, #472]	; (8003fe4 <HAL_UART_IRQHandler+0x350>)
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd fb56 	bl	80014c4 <HAL_DMA_Abort_IT>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	e00e      	b.n	8003e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8ec 	bl	800400c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	e00a      	b.n	8003e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8e8 	bl	800400c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	e006      	b.n	8003e4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8e4 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e4a:	e0c3      	b.n	8003fd4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	bf00      	nop
    return;
 8003e4e:	e0c1      	b.n	8003fd4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	f040 80a1 	bne.w	8003f9c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 809b 	beq.w	8003f9c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8095 	beq.w	8003f9c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04e      	beq.n	8003f34 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ea0:	8a3b      	ldrh	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 8098 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eac:	8a3a      	ldrh	r2, [r7, #16]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	f080 8092 	bcs.w	8003fd8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8a3a      	ldrh	r2, [r7, #16]
 8003eb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d02b      	beq.n	8003f1c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0210 	bic.w	r2, r2, #16
 8003f10:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd fa99 	bl	800144e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f876 	bl	800401e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f32:	e051      	b.n	8003fd8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d047      	beq.n	8003fdc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f4c:	8a7b      	ldrh	r3, [r7, #18]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f60:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0210 	bic.w	r2, r2, #16
 8003f8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f90:	8a7b      	ldrh	r3, [r7, #18]
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f842 	bl	800401e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f9a:	e01f      	b.n	8003fdc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x324>
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8c9 	bl	8004148 <UART_Transmit_IT>
    return;
 8003fb6:	e012      	b.n	8003fde <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <HAL_UART_IRQHandler+0x34a>
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f90a 	bl	80041e6 <UART_EndTransmit_IT>
    return;
 8003fd2:	e004      	b.n	8003fde <HAL_UART_IRQHandler+0x34a>
    return;
 8003fd4:	bf00      	nop
 8003fd6:	e002      	b.n	8003fde <HAL_UART_IRQHandler+0x34a>
      return;
 8003fd8:	bf00      	nop
 8003fda:	e000      	b.n	8003fde <HAL_UART_IRQHandler+0x34a>
      return;
 8003fdc:	bf00      	nop
  }
}
 8003fde:	3728      	adds	r7, #40	; 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	08004121 	.word	0x08004121

08003fe8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	e02c      	b.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800404c:	d028      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <UART_WaitOnFlagUntilTimeout+0x30>
 8004054:	f7fd f8e4 	bl	8001220 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	429a      	cmp	r2, r3
 8004062:	d21d      	bcs.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004072:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e00f      	b.n	80040c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d0c3      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0210 	bic.w	r2, r2, #16
 8004106:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ff66 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b21      	cmp	r3, #33	; 0x21
 800415a:	d13e      	bne.n	80041da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d114      	bne.n	8004190 <UART_Transmit_IT+0x48>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d110      	bne.n	8004190 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004182:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]
 800418e:	e008      	b.n	80041a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	1c59      	adds	r1, r3, #1
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6211      	str	r1, [r2, #32]
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4619      	mov	r1, r3
 80041b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff feee 	bl	8003fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b22      	cmp	r3, #34	; 0x22
 8004228:	f040 8099 	bne.w	800435e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d117      	bne.n	8004266 <UART_Receive_IT+0x50>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004254:	b29a      	uxth	r2, r3
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e026      	b.n	80042b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004278:	d007      	beq.n	800428a <UART_Receive_IT+0x74>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <UART_Receive_IT+0x82>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e008      	b.n	80042aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d148      	bne.n	800435a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0220 	bic.w	r2, r2, #32
 80042d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	2b01      	cmp	r3, #1
 8004306:	d123      	bne.n	8004350 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0210 	bic.w	r2, r2, #16
 800431c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b10      	cmp	r3, #16
 800432a:	d10a      	bne.n	8004342 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fe68 	bl	800401e <HAL_UARTEx_RxEventCallback>
 800434e:	e002      	b.n	8004356 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fe52 	bl	8003ffa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e002      	b.n	8004360 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043a2:	f023 030c 	bic.w	r3, r3, #12
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2c      	ldr	r2, [pc, #176]	; (800447c <UART_SetConfig+0x114>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d103      	bne.n	80043d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043d0:	f7ff fb4e 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	e002      	b.n	80043de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7ff fb36 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 80043dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	4a22      	ldr	r2, [pc, #136]	; (8004480 <UART_SetConfig+0x118>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	0119      	lsls	r1, r3, #4
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009a      	lsls	r2, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fbb2 f2f3 	udiv	r2, r2, r3
 8004414:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <UART_SetConfig+0x118>)
 8004416:	fba3 0302 	umull	r0, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2064      	movs	r0, #100	; 0x64
 800441e:	fb00 f303 	mul.w	r3, r0, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	; 0x32
 8004428:	4a15      	ldr	r2, [pc, #84]	; (8004480 <UART_SetConfig+0x118>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004434:	4419      	add	r1, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009a      	lsls	r2, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	fbb2 f2f3 	udiv	r2, r2, r3
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <UART_SetConfig+0x118>)
 800444e:	fba3 0302 	umull	r0, r3, r3, r2
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2064      	movs	r0, #100	; 0x64
 8004456:	fb00 f303 	mul.w	r3, r0, r3
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	3332      	adds	r3, #50	; 0x32
 8004460:	4a07      	ldr	r2, [pc, #28]	; (8004480 <UART_SetConfig+0x118>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	f003 020f 	and.w	r2, r3, #15
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	440a      	add	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40013800 	.word	0x40013800
 8004480:	51eb851f 	.word	0x51eb851f

08004484 <__errno>:
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <__errno+0x8>)
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000010 	.word	0x20000010

08004490 <__libc_init_array>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	2600      	movs	r6, #0
 8004494:	4d0c      	ldr	r5, [pc, #48]	; (80044c8 <__libc_init_array+0x38>)
 8004496:	4c0d      	ldr	r4, [pc, #52]	; (80044cc <__libc_init_array+0x3c>)
 8004498:	1b64      	subs	r4, r4, r5
 800449a:	10a4      	asrs	r4, r4, #2
 800449c:	42a6      	cmp	r6, r4
 800449e:	d109      	bne.n	80044b4 <__libc_init_array+0x24>
 80044a0:	f002 fed4 	bl	800724c <_init>
 80044a4:	2600      	movs	r6, #0
 80044a6:	4d0a      	ldr	r5, [pc, #40]	; (80044d0 <__libc_init_array+0x40>)
 80044a8:	4c0a      	ldr	r4, [pc, #40]	; (80044d4 <__libc_init_array+0x44>)
 80044aa:	1b64      	subs	r4, r4, r5
 80044ac:	10a4      	asrs	r4, r4, #2
 80044ae:	42a6      	cmp	r6, r4
 80044b0:	d105      	bne.n	80044be <__libc_init_array+0x2e>
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b8:	4798      	blx	r3
 80044ba:	3601      	adds	r6, #1
 80044bc:	e7ee      	b.n	800449c <__libc_init_array+0xc>
 80044be:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c2:	4798      	blx	r3
 80044c4:	3601      	adds	r6, #1
 80044c6:	e7f2      	b.n	80044ae <__libc_init_array+0x1e>
 80044c8:	080076bc 	.word	0x080076bc
 80044cc:	080076bc 	.word	0x080076bc
 80044d0:	080076bc 	.word	0x080076bc
 80044d4:	080076c0 	.word	0x080076c0

080044d8 <memset>:
 80044d8:	4603      	mov	r3, r0
 80044da:	4402      	add	r2, r0
 80044dc:	4293      	cmp	r3, r2
 80044de:	d100      	bne.n	80044e2 <memset+0xa>
 80044e0:	4770      	bx	lr
 80044e2:	f803 1b01 	strb.w	r1, [r3], #1
 80044e6:	e7f9      	b.n	80044dc <memset+0x4>

080044e8 <__cvt>:
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ee:	461f      	mov	r7, r3
 80044f0:	bfbb      	ittet	lt
 80044f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80044f6:	461f      	movlt	r7, r3
 80044f8:	2300      	movge	r3, #0
 80044fa:	232d      	movlt	r3, #45	; 0x2d
 80044fc:	b088      	sub	sp, #32
 80044fe:	4614      	mov	r4, r2
 8004500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004502:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004504:	7013      	strb	r3, [r2, #0]
 8004506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004508:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800450c:	f023 0820 	bic.w	r8, r3, #32
 8004510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004514:	d005      	beq.n	8004522 <__cvt+0x3a>
 8004516:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800451a:	d100      	bne.n	800451e <__cvt+0x36>
 800451c:	3501      	adds	r5, #1
 800451e:	2302      	movs	r3, #2
 8004520:	e000      	b.n	8004524 <__cvt+0x3c>
 8004522:	2303      	movs	r3, #3
 8004524:	aa07      	add	r2, sp, #28
 8004526:	9204      	str	r2, [sp, #16]
 8004528:	aa06      	add	r2, sp, #24
 800452a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800452e:	e9cd 3500 	strd	r3, r5, [sp]
 8004532:	4622      	mov	r2, r4
 8004534:	463b      	mov	r3, r7
 8004536:	f000 fcff 	bl	8004f38 <_dtoa_r>
 800453a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800453e:	4606      	mov	r6, r0
 8004540:	d102      	bne.n	8004548 <__cvt+0x60>
 8004542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004544:	07db      	lsls	r3, r3, #31
 8004546:	d522      	bpl.n	800458e <__cvt+0xa6>
 8004548:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800454c:	eb06 0905 	add.w	r9, r6, r5
 8004550:	d110      	bne.n	8004574 <__cvt+0x8c>
 8004552:	7833      	ldrb	r3, [r6, #0]
 8004554:	2b30      	cmp	r3, #48	; 0x30
 8004556:	d10a      	bne.n	800456e <__cvt+0x86>
 8004558:	2200      	movs	r2, #0
 800455a:	2300      	movs	r3, #0
 800455c:	4620      	mov	r0, r4
 800455e:	4639      	mov	r1, r7
 8004560:	f7fc fa22 	bl	80009a8 <__aeabi_dcmpeq>
 8004564:	b918      	cbnz	r0, 800456e <__cvt+0x86>
 8004566:	f1c5 0501 	rsb	r5, r5, #1
 800456a:	f8ca 5000 	str.w	r5, [sl]
 800456e:	f8da 3000 	ldr.w	r3, [sl]
 8004572:	4499      	add	r9, r3
 8004574:	2200      	movs	r2, #0
 8004576:	2300      	movs	r3, #0
 8004578:	4620      	mov	r0, r4
 800457a:	4639      	mov	r1, r7
 800457c:	f7fc fa14 	bl	80009a8 <__aeabi_dcmpeq>
 8004580:	b108      	cbz	r0, 8004586 <__cvt+0x9e>
 8004582:	f8cd 901c 	str.w	r9, [sp, #28]
 8004586:	2230      	movs	r2, #48	; 0x30
 8004588:	9b07      	ldr	r3, [sp, #28]
 800458a:	454b      	cmp	r3, r9
 800458c:	d307      	bcc.n	800459e <__cvt+0xb6>
 800458e:	4630      	mov	r0, r6
 8004590:	9b07      	ldr	r3, [sp, #28]
 8004592:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004594:	1b9b      	subs	r3, r3, r6
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	b008      	add	sp, #32
 800459a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	9107      	str	r1, [sp, #28]
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e7f0      	b.n	8004588 <__cvt+0xa0>

080045a6 <__exponent>:
 80045a6:	4603      	mov	r3, r0
 80045a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045aa:	2900      	cmp	r1, #0
 80045ac:	f803 2b02 	strb.w	r2, [r3], #2
 80045b0:	bfb6      	itet	lt
 80045b2:	222d      	movlt	r2, #45	; 0x2d
 80045b4:	222b      	movge	r2, #43	; 0x2b
 80045b6:	4249      	neglt	r1, r1
 80045b8:	2909      	cmp	r1, #9
 80045ba:	7042      	strb	r2, [r0, #1]
 80045bc:	dd2b      	ble.n	8004616 <__exponent+0x70>
 80045be:	f10d 0407 	add.w	r4, sp, #7
 80045c2:	46a4      	mov	ip, r4
 80045c4:	270a      	movs	r7, #10
 80045c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80045ca:	460a      	mov	r2, r1
 80045cc:	46a6      	mov	lr, r4
 80045ce:	fb07 1516 	mls	r5, r7, r6, r1
 80045d2:	2a63      	cmp	r2, #99	; 0x63
 80045d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80045d8:	4631      	mov	r1, r6
 80045da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80045de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045e2:	dcf0      	bgt.n	80045c6 <__exponent+0x20>
 80045e4:	3130      	adds	r1, #48	; 0x30
 80045e6:	f1ae 0502 	sub.w	r5, lr, #2
 80045ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045ee:	4629      	mov	r1, r5
 80045f0:	1c44      	adds	r4, r0, #1
 80045f2:	4561      	cmp	r1, ip
 80045f4:	d30a      	bcc.n	800460c <__exponent+0x66>
 80045f6:	f10d 0209 	add.w	r2, sp, #9
 80045fa:	eba2 020e 	sub.w	r2, r2, lr
 80045fe:	4565      	cmp	r5, ip
 8004600:	bf88      	it	hi
 8004602:	2200      	movhi	r2, #0
 8004604:	4413      	add	r3, r2
 8004606:	1a18      	subs	r0, r3, r0
 8004608:	b003      	add	sp, #12
 800460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800460c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004610:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004614:	e7ed      	b.n	80045f2 <__exponent+0x4c>
 8004616:	2330      	movs	r3, #48	; 0x30
 8004618:	3130      	adds	r1, #48	; 0x30
 800461a:	7083      	strb	r3, [r0, #2]
 800461c:	70c1      	strb	r1, [r0, #3]
 800461e:	1d03      	adds	r3, r0, #4
 8004620:	e7f1      	b.n	8004606 <__exponent+0x60>
	...

08004624 <_printf_float>:
 8004624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004628:	b091      	sub	sp, #68	; 0x44
 800462a:	460c      	mov	r4, r1
 800462c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004630:	4616      	mov	r6, r2
 8004632:	461f      	mov	r7, r3
 8004634:	4605      	mov	r5, r0
 8004636:	f001 fa6d 	bl	8005b14 <_localeconv_r>
 800463a:	6803      	ldr	r3, [r0, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	9309      	str	r3, [sp, #36]	; 0x24
 8004640:	f7fb fd86 	bl	8000150 <strlen>
 8004644:	2300      	movs	r3, #0
 8004646:	930e      	str	r3, [sp, #56]	; 0x38
 8004648:	f8d8 3000 	ldr.w	r3, [r8]
 800464c:	900a      	str	r0, [sp, #40]	; 0x28
 800464e:	3307      	adds	r3, #7
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	f103 0208 	add.w	r2, r3, #8
 8004658:	f894 9018 	ldrb.w	r9, [r4, #24]
 800465c:	f8d4 b000 	ldr.w	fp, [r4]
 8004660:	f8c8 2000 	str.w	r2, [r8]
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800466c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004670:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004674:	930b      	str	r3, [sp, #44]	; 0x2c
 8004676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800467a:	4640      	mov	r0, r8
 800467c:	4b9c      	ldr	r3, [pc, #624]	; (80048f0 <_printf_float+0x2cc>)
 800467e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004680:	f7fc f9c4 	bl	8000a0c <__aeabi_dcmpun>
 8004684:	bb70      	cbnz	r0, 80046e4 <_printf_float+0xc0>
 8004686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800468a:	4640      	mov	r0, r8
 800468c:	4b98      	ldr	r3, [pc, #608]	; (80048f0 <_printf_float+0x2cc>)
 800468e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004690:	f7fc f99e 	bl	80009d0 <__aeabi_dcmple>
 8004694:	bb30      	cbnz	r0, 80046e4 <_printf_float+0xc0>
 8004696:	2200      	movs	r2, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4640      	mov	r0, r8
 800469c:	4651      	mov	r1, sl
 800469e:	f7fc f98d 	bl	80009bc <__aeabi_dcmplt>
 80046a2:	b110      	cbz	r0, 80046aa <_printf_float+0x86>
 80046a4:	232d      	movs	r3, #45	; 0x2d
 80046a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046aa:	4b92      	ldr	r3, [pc, #584]	; (80048f4 <_printf_float+0x2d0>)
 80046ac:	4892      	ldr	r0, [pc, #584]	; (80048f8 <_printf_float+0x2d4>)
 80046ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046b2:	bf94      	ite	ls
 80046b4:	4698      	movls	r8, r3
 80046b6:	4680      	movhi	r8, r0
 80046b8:	2303      	movs	r3, #3
 80046ba:	f04f 0a00 	mov.w	sl, #0
 80046be:	6123      	str	r3, [r4, #16]
 80046c0:	f02b 0304 	bic.w	r3, fp, #4
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	4633      	mov	r3, r6
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	9700      	str	r7, [sp, #0]
 80046ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80046d0:	f000 f9d4 	bl	8004a7c <_printf_common>
 80046d4:	3001      	adds	r0, #1
 80046d6:	f040 8090 	bne.w	80047fa <_printf_float+0x1d6>
 80046da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046de:	b011      	add	sp, #68	; 0x44
 80046e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	4642      	mov	r2, r8
 80046e6:	4653      	mov	r3, sl
 80046e8:	4640      	mov	r0, r8
 80046ea:	4651      	mov	r1, sl
 80046ec:	f7fc f98e 	bl	8000a0c <__aeabi_dcmpun>
 80046f0:	b148      	cbz	r0, 8004706 <_printf_float+0xe2>
 80046f2:	f1ba 0f00 	cmp.w	sl, #0
 80046f6:	bfb8      	it	lt
 80046f8:	232d      	movlt	r3, #45	; 0x2d
 80046fa:	4880      	ldr	r0, [pc, #512]	; (80048fc <_printf_float+0x2d8>)
 80046fc:	bfb8      	it	lt
 80046fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004702:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <_printf_float+0x2dc>)
 8004704:	e7d3      	b.n	80046ae <_printf_float+0x8a>
 8004706:	6863      	ldr	r3, [r4, #4]
 8004708:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	d142      	bne.n	8004796 <_printf_float+0x172>
 8004710:	2306      	movs	r3, #6
 8004712:	6063      	str	r3, [r4, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	9206      	str	r2, [sp, #24]
 8004718:	aa0e      	add	r2, sp, #56	; 0x38
 800471a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800471e:	aa0d      	add	r2, sp, #52	; 0x34
 8004720:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004724:	9203      	str	r2, [sp, #12]
 8004726:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800472a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	4642      	mov	r2, r8
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4628      	mov	r0, r5
 8004738:	4653      	mov	r3, sl
 800473a:	910b      	str	r1, [sp, #44]	; 0x2c
 800473c:	f7ff fed4 	bl	80044e8 <__cvt>
 8004740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004742:	4680      	mov	r8, r0
 8004744:	2947      	cmp	r1, #71	; 0x47
 8004746:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004748:	d108      	bne.n	800475c <_printf_float+0x138>
 800474a:	1cc8      	adds	r0, r1, #3
 800474c:	db02      	blt.n	8004754 <_printf_float+0x130>
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	4299      	cmp	r1, r3
 8004752:	dd40      	ble.n	80047d6 <_printf_float+0x1b2>
 8004754:	f1a9 0902 	sub.w	r9, r9, #2
 8004758:	fa5f f989 	uxtb.w	r9, r9
 800475c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004760:	d81f      	bhi.n	80047a2 <_printf_float+0x17e>
 8004762:	464a      	mov	r2, r9
 8004764:	3901      	subs	r1, #1
 8004766:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800476a:	910d      	str	r1, [sp, #52]	; 0x34
 800476c:	f7ff ff1b 	bl	80045a6 <__exponent>
 8004770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004772:	4682      	mov	sl, r0
 8004774:	1813      	adds	r3, r2, r0
 8004776:	2a01      	cmp	r2, #1
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	dc02      	bgt.n	8004782 <_printf_float+0x15e>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	07d2      	lsls	r2, r2, #31
 8004780:	d501      	bpl.n	8004786 <_printf_float+0x162>
 8004782:	3301      	adds	r3, #1
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800478a:	2b00      	cmp	r3, #0
 800478c:	d09b      	beq.n	80046c6 <_printf_float+0xa2>
 800478e:	232d      	movs	r3, #45	; 0x2d
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004794:	e797      	b.n	80046c6 <_printf_float+0xa2>
 8004796:	2947      	cmp	r1, #71	; 0x47
 8004798:	d1bc      	bne.n	8004714 <_printf_float+0xf0>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ba      	bne.n	8004714 <_printf_float+0xf0>
 800479e:	2301      	movs	r3, #1
 80047a0:	e7b7      	b.n	8004712 <_printf_float+0xee>
 80047a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80047a6:	d118      	bne.n	80047da <_printf_float+0x1b6>
 80047a8:	2900      	cmp	r1, #0
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	dd0b      	ble.n	80047c6 <_printf_float+0x1a2>
 80047ae:	6121      	str	r1, [r4, #16]
 80047b0:	b913      	cbnz	r3, 80047b8 <_printf_float+0x194>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	07d0      	lsls	r0, r2, #31
 80047b6:	d502      	bpl.n	80047be <_printf_float+0x19a>
 80047b8:	3301      	adds	r3, #1
 80047ba:	440b      	add	r3, r1
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	f04f 0a00 	mov.w	sl, #0
 80047c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80047c4:	e7df      	b.n	8004786 <_printf_float+0x162>
 80047c6:	b913      	cbnz	r3, 80047ce <_printf_float+0x1aa>
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	07d2      	lsls	r2, r2, #31
 80047cc:	d501      	bpl.n	80047d2 <_printf_float+0x1ae>
 80047ce:	3302      	adds	r3, #2
 80047d0:	e7f4      	b.n	80047bc <_printf_float+0x198>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e7f2      	b.n	80047bc <_printf_float+0x198>
 80047d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80047da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047dc:	4299      	cmp	r1, r3
 80047de:	db05      	blt.n	80047ec <_printf_float+0x1c8>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	6121      	str	r1, [r4, #16]
 80047e4:	07d8      	lsls	r0, r3, #31
 80047e6:	d5ea      	bpl.n	80047be <_printf_float+0x19a>
 80047e8:	1c4b      	adds	r3, r1, #1
 80047ea:	e7e7      	b.n	80047bc <_printf_float+0x198>
 80047ec:	2900      	cmp	r1, #0
 80047ee:	bfcc      	ite	gt
 80047f0:	2201      	movgt	r2, #1
 80047f2:	f1c1 0202 	rsble	r2, r1, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	e7e0      	b.n	80047bc <_printf_float+0x198>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	055a      	lsls	r2, r3, #21
 80047fe:	d407      	bmi.n	8004810 <_printf_float+0x1ec>
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	4642      	mov	r2, r8
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	d12b      	bne.n	8004866 <_printf_float+0x242>
 800480e:	e764      	b.n	80046da <_printf_float+0xb6>
 8004810:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004814:	f240 80dd 	bls.w	80049d2 <_printf_float+0x3ae>
 8004818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800481c:	2200      	movs	r2, #0
 800481e:	2300      	movs	r3, #0
 8004820:	f7fc f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8004824:	2800      	cmp	r0, #0
 8004826:	d033      	beq.n	8004890 <_printf_float+0x26c>
 8004828:	2301      	movs	r3, #1
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	4a35      	ldr	r2, [pc, #212]	; (8004904 <_printf_float+0x2e0>)
 8004830:	47b8      	blx	r7
 8004832:	3001      	adds	r0, #1
 8004834:	f43f af51 	beq.w	80046da <_printf_float+0xb6>
 8004838:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800483c:	429a      	cmp	r2, r3
 800483e:	db02      	blt.n	8004846 <_printf_float+0x222>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07d8      	lsls	r0, r3, #31
 8004844:	d50f      	bpl.n	8004866 <_printf_float+0x242>
 8004846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	f43f af42 	beq.w	80046da <_printf_float+0xb6>
 8004856:	f04f 0800 	mov.w	r8, #0
 800485a:	f104 091a 	add.w	r9, r4, #26
 800485e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004860:	3b01      	subs	r3, #1
 8004862:	4543      	cmp	r3, r8
 8004864:	dc09      	bgt.n	800487a <_printf_float+0x256>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	079b      	lsls	r3, r3, #30
 800486a:	f100 8102 	bmi.w	8004a72 <_printf_float+0x44e>
 800486e:	68e0      	ldr	r0, [r4, #12]
 8004870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004872:	4298      	cmp	r0, r3
 8004874:	bfb8      	it	lt
 8004876:	4618      	movlt	r0, r3
 8004878:	e731      	b.n	80046de <_printf_float+0xba>
 800487a:	2301      	movs	r3, #1
 800487c:	464a      	mov	r2, r9
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	f43f af28 	beq.w	80046da <_printf_float+0xb6>
 800488a:	f108 0801 	add.w	r8, r8, #1
 800488e:	e7e6      	b.n	800485e <_printf_float+0x23a>
 8004890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004892:	2b00      	cmp	r3, #0
 8004894:	dc38      	bgt.n	8004908 <_printf_float+0x2e4>
 8004896:	2301      	movs	r3, #1
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	4a19      	ldr	r2, [pc, #100]	; (8004904 <_printf_float+0x2e0>)
 800489e:	47b8      	blx	r7
 80048a0:	3001      	adds	r0, #1
 80048a2:	f43f af1a 	beq.w	80046da <_printf_float+0xb6>
 80048a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d102      	bne.n	80048b4 <_printf_float+0x290>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	07d9      	lsls	r1, r3, #31
 80048b2:	d5d8      	bpl.n	8004866 <_printf_float+0x242>
 80048b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f af0b 	beq.w	80046da <_printf_float+0xb6>
 80048c4:	f04f 0900 	mov.w	r9, #0
 80048c8:	f104 0a1a 	add.w	sl, r4, #26
 80048cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ce:	425b      	negs	r3, r3
 80048d0:	454b      	cmp	r3, r9
 80048d2:	dc01      	bgt.n	80048d8 <_printf_float+0x2b4>
 80048d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048d6:	e794      	b.n	8004802 <_printf_float+0x1de>
 80048d8:	2301      	movs	r3, #1
 80048da:	4652      	mov	r2, sl
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f aef9 	beq.w	80046da <_printf_float+0xb6>
 80048e8:	f109 0901 	add.w	r9, r9, #1
 80048ec:	e7ee      	b.n	80048cc <_printf_float+0x2a8>
 80048ee:	bf00      	nop
 80048f0:	7fefffff 	.word	0x7fefffff
 80048f4:	080072dc 	.word	0x080072dc
 80048f8:	080072e0 	.word	0x080072e0
 80048fc:	080072e8 	.word	0x080072e8
 8004900:	080072e4 	.word	0x080072e4
 8004904:	080072ec 	.word	0x080072ec
 8004908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800490a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800490c:	429a      	cmp	r2, r3
 800490e:	bfa8      	it	ge
 8004910:	461a      	movge	r2, r3
 8004912:	2a00      	cmp	r2, #0
 8004914:	4691      	mov	r9, r2
 8004916:	dc37      	bgt.n	8004988 <_printf_float+0x364>
 8004918:	f04f 0b00 	mov.w	fp, #0
 800491c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004920:	f104 021a 	add.w	r2, r4, #26
 8004924:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004928:	ebaa 0309 	sub.w	r3, sl, r9
 800492c:	455b      	cmp	r3, fp
 800492e:	dc33      	bgt.n	8004998 <_printf_float+0x374>
 8004930:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004934:	429a      	cmp	r2, r3
 8004936:	db3b      	blt.n	80049b0 <_printf_float+0x38c>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	07da      	lsls	r2, r3, #31
 800493c:	d438      	bmi.n	80049b0 <_printf_float+0x38c>
 800493e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004940:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004942:	eba2 030a 	sub.w	r3, r2, sl
 8004946:	eba2 0901 	sub.w	r9, r2, r1
 800494a:	4599      	cmp	r9, r3
 800494c:	bfa8      	it	ge
 800494e:	4699      	movge	r9, r3
 8004950:	f1b9 0f00 	cmp.w	r9, #0
 8004954:	dc34      	bgt.n	80049c0 <_printf_float+0x39c>
 8004956:	f04f 0800 	mov.w	r8, #0
 800495a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800495e:	f104 0a1a 	add.w	sl, r4, #26
 8004962:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	eba3 0309 	sub.w	r3, r3, r9
 800496c:	4543      	cmp	r3, r8
 800496e:	f77f af7a 	ble.w	8004866 <_printf_float+0x242>
 8004972:	2301      	movs	r3, #1
 8004974:	4652      	mov	r2, sl
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	f43f aeac 	beq.w	80046da <_printf_float+0xb6>
 8004982:	f108 0801 	add.w	r8, r8, #1
 8004986:	e7ec      	b.n	8004962 <_printf_float+0x33e>
 8004988:	4613      	mov	r3, r2
 800498a:	4631      	mov	r1, r6
 800498c:	4642      	mov	r2, r8
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	d1c0      	bne.n	8004918 <_printf_float+0x2f4>
 8004996:	e6a0      	b.n	80046da <_printf_float+0xb6>
 8004998:	2301      	movs	r3, #1
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	920b      	str	r2, [sp, #44]	; 0x2c
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f ae99 	beq.w	80046da <_printf_float+0xb6>
 80049a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049aa:	f10b 0b01 	add.w	fp, fp, #1
 80049ae:	e7b9      	b.n	8004924 <_printf_float+0x300>
 80049b0:	4631      	mov	r1, r6
 80049b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	d1bf      	bne.n	800493e <_printf_float+0x31a>
 80049be:	e68c      	b.n	80046da <_printf_float+0xb6>
 80049c0:	464b      	mov	r3, r9
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	eb08 020a 	add.w	r2, r8, sl
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	d1c2      	bne.n	8004956 <_printf_float+0x332>
 80049d0:	e683      	b.n	80046da <_printf_float+0xb6>
 80049d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049d4:	2a01      	cmp	r2, #1
 80049d6:	dc01      	bgt.n	80049dc <_printf_float+0x3b8>
 80049d8:	07db      	lsls	r3, r3, #31
 80049da:	d537      	bpl.n	8004a4c <_printf_float+0x428>
 80049dc:	2301      	movs	r3, #1
 80049de:	4642      	mov	r2, r8
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae77 	beq.w	80046da <_printf_float+0xb6>
 80049ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f ae6f 	beq.w	80046da <_printf_float+0xb6>
 80049fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	f7fb ffd0 	bl	80009a8 <__aeabi_dcmpeq>
 8004a08:	b9d8      	cbnz	r0, 8004a42 <_printf_float+0x41e>
 8004a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a0c:	f108 0201 	add.w	r2, r8, #1
 8004a10:	3b01      	subs	r3, #1
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d10e      	bne.n	8004a3a <_printf_float+0x416>
 8004a1c:	e65d      	b.n	80046da <_printf_float+0xb6>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	464a      	mov	r2, r9
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f ae56 	beq.w	80046da <_printf_float+0xb6>
 8004a2e:	f108 0801 	add.w	r8, r8, #1
 8004a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a34:	3b01      	subs	r3, #1
 8004a36:	4543      	cmp	r3, r8
 8004a38:	dcf1      	bgt.n	8004a1e <_printf_float+0x3fa>
 8004a3a:	4653      	mov	r3, sl
 8004a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a40:	e6e0      	b.n	8004804 <_printf_float+0x1e0>
 8004a42:	f04f 0800 	mov.w	r8, #0
 8004a46:	f104 091a 	add.w	r9, r4, #26
 8004a4a:	e7f2      	b.n	8004a32 <_printf_float+0x40e>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4642      	mov	r2, r8
 8004a50:	e7df      	b.n	8004a12 <_printf_float+0x3ee>
 8004a52:	2301      	movs	r3, #1
 8004a54:	464a      	mov	r2, r9
 8004a56:	4631      	mov	r1, r6
 8004a58:	4628      	mov	r0, r5
 8004a5a:	47b8      	blx	r7
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	f43f ae3c 	beq.w	80046da <_printf_float+0xb6>
 8004a62:	f108 0801 	add.w	r8, r8, #1
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	4543      	cmp	r3, r8
 8004a6e:	dcf0      	bgt.n	8004a52 <_printf_float+0x42e>
 8004a70:	e6fd      	b.n	800486e <_printf_float+0x24a>
 8004a72:	f04f 0800 	mov.w	r8, #0
 8004a76:	f104 0919 	add.w	r9, r4, #25
 8004a7a:	e7f4      	b.n	8004a66 <_printf_float+0x442>

08004a7c <_printf_common>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	4616      	mov	r6, r2
 8004a82:	4699      	mov	r9, r3
 8004a84:	688a      	ldr	r2, [r1, #8]
 8004a86:	690b      	ldr	r3, [r1, #16]
 8004a88:	4607      	mov	r7, r0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	bfb8      	it	lt
 8004a8e:	4613      	movlt	r3, r2
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a96:	460c      	mov	r4, r1
 8004a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a9c:	b10a      	cbz	r2, 8004aa2 <_printf_common+0x26>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	bf42      	ittt	mi
 8004aa8:	6833      	ldrmi	r3, [r6, #0]
 8004aaa:	3302      	addmi	r3, #2
 8004aac:	6033      	strmi	r3, [r6, #0]
 8004aae:	6825      	ldr	r5, [r4, #0]
 8004ab0:	f015 0506 	ands.w	r5, r5, #6
 8004ab4:	d106      	bne.n	8004ac4 <_printf_common+0x48>
 8004ab6:	f104 0a19 	add.w	sl, r4, #25
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	6832      	ldr	r2, [r6, #0]
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dc28      	bgt.n	8004b16 <_printf_common+0x9a>
 8004ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ac8:	1e13      	subs	r3, r2, #0
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	bf18      	it	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	0692      	lsls	r2, r2, #26
 8004ad2:	d42d      	bmi.n	8004b30 <_printf_common+0xb4>
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d020      	beq.n	8004b24 <_printf_common+0xa8>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	68e5      	ldr	r5, [r4, #12]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf18      	it	ne
 8004aee:	2500      	movne	r5, #0
 8004af0:	6832      	ldr	r2, [r6, #0]
 8004af2:	f04f 0600 	mov.w	r6, #0
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	bf08      	it	eq
 8004afa:	1aad      	subeq	r5, r5, r2
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	bf08      	it	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfc4      	itt	gt
 8004b08:	1a9b      	subgt	r3, r3, r2
 8004b0a:	18ed      	addgt	r5, r5, r3
 8004b0c:	341a      	adds	r4, #26
 8004b0e:	42b5      	cmp	r5, r6
 8004b10:	d11a      	bne.n	8004b48 <_printf_common+0xcc>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e008      	b.n	8004b28 <_printf_common+0xac>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d103      	bne.n	8004b2c <_printf_common+0xb0>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7c4      	b.n	8004aba <_printf_common+0x3e>
 8004b30:	2030      	movs	r0, #48	; 0x30
 8004b32:	18e1      	adds	r1, r4, r3
 8004b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b3e:	4422      	add	r2, r4
 8004b40:	3302      	adds	r3, #2
 8004b42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b46:	e7c5      	b.n	8004ad4 <_printf_common+0x58>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0e6      	beq.n	8004b24 <_printf_common+0xa8>
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7d9      	b.n	8004b0e <_printf_common+0x92>
	...

08004b5c <_printf_i>:
 8004b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	460c      	mov	r4, r1
 8004b62:	7e27      	ldrb	r7, [r4, #24]
 8004b64:	4691      	mov	r9, r2
 8004b66:	2f78      	cmp	r7, #120	; 0x78
 8004b68:	4680      	mov	r8, r0
 8004b6a:	469a      	mov	sl, r3
 8004b6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b72:	d807      	bhi.n	8004b84 <_printf_i+0x28>
 8004b74:	2f62      	cmp	r7, #98	; 0x62
 8004b76:	d80a      	bhi.n	8004b8e <_printf_i+0x32>
 8004b78:	2f00      	cmp	r7, #0
 8004b7a:	f000 80d9 	beq.w	8004d30 <_printf_i+0x1d4>
 8004b7e:	2f58      	cmp	r7, #88	; 0x58
 8004b80:	f000 80a4 	beq.w	8004ccc <_printf_i+0x170>
 8004b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b8c:	e03a      	b.n	8004c04 <_printf_i+0xa8>
 8004b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b92:	2b15      	cmp	r3, #21
 8004b94:	d8f6      	bhi.n	8004b84 <_printf_i+0x28>
 8004b96:	a001      	add	r0, pc, #4	; (adr r0, 8004b9c <_printf_i+0x40>)
 8004b98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b9c:	08004bf5 	.word	0x08004bf5
 8004ba0:	08004c09 	.word	0x08004c09
 8004ba4:	08004b85 	.word	0x08004b85
 8004ba8:	08004b85 	.word	0x08004b85
 8004bac:	08004b85 	.word	0x08004b85
 8004bb0:	08004b85 	.word	0x08004b85
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b85 	.word	0x08004b85
 8004bbc:	08004b85 	.word	0x08004b85
 8004bc0:	08004b85 	.word	0x08004b85
 8004bc4:	08004b85 	.word	0x08004b85
 8004bc8:	08004d17 	.word	0x08004d17
 8004bcc:	08004c39 	.word	0x08004c39
 8004bd0:	08004cf9 	.word	0x08004cf9
 8004bd4:	08004b85 	.word	0x08004b85
 8004bd8:	08004b85 	.word	0x08004b85
 8004bdc:	08004d39 	.word	0x08004d39
 8004be0:	08004b85 	.word	0x08004b85
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004b85 	.word	0x08004b85
 8004bec:	08004b85 	.word	0x08004b85
 8004bf0:	08004d01 	.word	0x08004d01
 8004bf4:	680b      	ldr	r3, [r1, #0]
 8004bf6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	600a      	str	r2, [r1, #0]
 8004c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0a4      	b.n	8004d52 <_printf_i+0x1f6>
 8004c08:	6825      	ldr	r5, [r4, #0]
 8004c0a:	6808      	ldr	r0, [r1, #0]
 8004c0c:	062e      	lsls	r6, r5, #24
 8004c0e:	f100 0304 	add.w	r3, r0, #4
 8004c12:	d50a      	bpl.n	8004c2a <_printf_i+0xce>
 8004c14:	6805      	ldr	r5, [r0, #0]
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	2d00      	cmp	r5, #0
 8004c1a:	da03      	bge.n	8004c24 <_printf_i+0xc8>
 8004c1c:	232d      	movs	r3, #45	; 0x2d
 8004c1e:	426d      	negs	r5, r5
 8004c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c24:	230a      	movs	r3, #10
 8004c26:	485e      	ldr	r0, [pc, #376]	; (8004da0 <_printf_i+0x244>)
 8004c28:	e019      	b.n	8004c5e <_printf_i+0x102>
 8004c2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c2e:	6805      	ldr	r5, [r0, #0]
 8004c30:	600b      	str	r3, [r1, #0]
 8004c32:	bf18      	it	ne
 8004c34:	b22d      	sxthne	r5, r5
 8004c36:	e7ef      	b.n	8004c18 <_printf_i+0xbc>
 8004c38:	680b      	ldr	r3, [r1, #0]
 8004c3a:	6825      	ldr	r5, [r4, #0]
 8004c3c:	1d18      	adds	r0, r3, #4
 8004c3e:	6008      	str	r0, [r1, #0]
 8004c40:	0628      	lsls	r0, r5, #24
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0xec>
 8004c44:	681d      	ldr	r5, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <_printf_i+0xf2>
 8004c48:	0669      	lsls	r1, r5, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0xe8>
 8004c4c:	881d      	ldrh	r5, [r3, #0]
 8004c4e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c50:	bf0c      	ite	eq
 8004c52:	2308      	moveq	r3, #8
 8004c54:	230a      	movne	r3, #10
 8004c56:	4852      	ldr	r0, [pc, #328]	; (8004da0 <_printf_i+0x244>)
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c5e:	6866      	ldr	r6, [r4, #4]
 8004c60:	2e00      	cmp	r6, #0
 8004c62:	bfa8      	it	ge
 8004c64:	6821      	ldrge	r1, [r4, #0]
 8004c66:	60a6      	str	r6, [r4, #8]
 8004c68:	bfa4      	itt	ge
 8004c6a:	f021 0104 	bicge.w	r1, r1, #4
 8004c6e:	6021      	strge	r1, [r4, #0]
 8004c70:	b90d      	cbnz	r5, 8004c76 <_printf_i+0x11a>
 8004c72:	2e00      	cmp	r6, #0
 8004c74:	d04d      	beq.n	8004d12 <_printf_i+0x1b6>
 8004c76:	4616      	mov	r6, r2
 8004c78:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c7c:	fb03 5711 	mls	r7, r3, r1, r5
 8004c80:	5dc7      	ldrb	r7, [r0, r7]
 8004c82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c86:	462f      	mov	r7, r5
 8004c88:	42bb      	cmp	r3, r7
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	d9f4      	bls.n	8004c78 <_printf_i+0x11c>
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d10b      	bne.n	8004caa <_printf_i+0x14e>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	07df      	lsls	r7, r3, #31
 8004c96:	d508      	bpl.n	8004caa <_printf_i+0x14e>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	6861      	ldr	r1, [r4, #4]
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	bfde      	ittt	le
 8004ca0:	2330      	movle	r3, #48	; 0x30
 8004ca2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ca6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004caa:	1b92      	subs	r2, r2, r6
 8004cac:	6122      	str	r2, [r4, #16]
 8004cae:	464b      	mov	r3, r9
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f8cd a000 	str.w	sl, [sp]
 8004cb8:	aa03      	add	r2, sp, #12
 8004cba:	f7ff fedf 	bl	8004a7c <_printf_common>
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d14c      	bne.n	8004d5c <_printf_i+0x200>
 8004cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cc6:	b004      	add	sp, #16
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	4834      	ldr	r0, [pc, #208]	; (8004da0 <_printf_i+0x244>)
 8004cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cd2:	680e      	ldr	r6, [r1, #0]
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cda:	061f      	lsls	r7, r3, #24
 8004cdc:	600e      	str	r6, [r1, #0]
 8004cde:	d514      	bpl.n	8004d0a <_printf_i+0x1ae>
 8004ce0:	07d9      	lsls	r1, r3, #31
 8004ce2:	bf44      	itt	mi
 8004ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ce8:	6023      	strmi	r3, [r4, #0]
 8004cea:	b91d      	cbnz	r5, 8004cf4 <_printf_i+0x198>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	e7af      	b.n	8004c58 <_printf_i+0xfc>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f043 0320 	orr.w	r3, r3, #32
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	2378      	movs	r3, #120	; 0x78
 8004d02:	4828      	ldr	r0, [pc, #160]	; (8004da4 <_printf_i+0x248>)
 8004d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d08:	e7e3      	b.n	8004cd2 <_printf_i+0x176>
 8004d0a:	065e      	lsls	r6, r3, #25
 8004d0c:	bf48      	it	mi
 8004d0e:	b2ad      	uxthmi	r5, r5
 8004d10:	e7e6      	b.n	8004ce0 <_printf_i+0x184>
 8004d12:	4616      	mov	r6, r2
 8004d14:	e7bb      	b.n	8004c8e <_printf_i+0x132>
 8004d16:	680b      	ldr	r3, [r1, #0]
 8004d18:	6826      	ldr	r6, [r4, #0]
 8004d1a:	1d1d      	adds	r5, r3, #4
 8004d1c:	6960      	ldr	r0, [r4, #20]
 8004d1e:	600d      	str	r5, [r1, #0]
 8004d20:	0635      	lsls	r5, r6, #24
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	d501      	bpl.n	8004d2a <_printf_i+0x1ce>
 8004d26:	6018      	str	r0, [r3, #0]
 8004d28:	e002      	b.n	8004d30 <_printf_i+0x1d4>
 8004d2a:	0671      	lsls	r1, r6, #25
 8004d2c:	d5fb      	bpl.n	8004d26 <_printf_i+0x1ca>
 8004d2e:	8018      	strh	r0, [r3, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	4616      	mov	r6, r2
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	e7ba      	b.n	8004cae <_printf_i+0x152>
 8004d38:	680b      	ldr	r3, [r1, #0]
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	600a      	str	r2, [r1, #0]
 8004d3e:	681e      	ldr	r6, [r3, #0]
 8004d40:	2100      	movs	r1, #0
 8004d42:	4630      	mov	r0, r6
 8004d44:	6862      	ldr	r2, [r4, #4]
 8004d46:	f000 fef1 	bl	8005b2c <memchr>
 8004d4a:	b108      	cbz	r0, 8004d50 <_printf_i+0x1f4>
 8004d4c:	1b80      	subs	r0, r0, r6
 8004d4e:	6060      	str	r0, [r4, #4]
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	6123      	str	r3, [r4, #16]
 8004d54:	2300      	movs	r3, #0
 8004d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5a:	e7a8      	b.n	8004cae <_printf_i+0x152>
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	47d0      	blx	sl
 8004d66:	3001      	adds	r0, #1
 8004d68:	d0ab      	beq.n	8004cc2 <_printf_i+0x166>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	079b      	lsls	r3, r3, #30
 8004d6e:	d413      	bmi.n	8004d98 <_printf_i+0x23c>
 8004d70:	68e0      	ldr	r0, [r4, #12]
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	4298      	cmp	r0, r3
 8004d76:	bfb8      	it	lt
 8004d78:	4618      	movlt	r0, r3
 8004d7a:	e7a4      	b.n	8004cc6 <_printf_i+0x16a>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4632      	mov	r2, r6
 8004d80:	4649      	mov	r1, r9
 8004d82:	4640      	mov	r0, r8
 8004d84:	47d0      	blx	sl
 8004d86:	3001      	adds	r0, #1
 8004d88:	d09b      	beq.n	8004cc2 <_printf_i+0x166>
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	68e3      	ldr	r3, [r4, #12]
 8004d8e:	9903      	ldr	r1, [sp, #12]
 8004d90:	1a5b      	subs	r3, r3, r1
 8004d92:	42ab      	cmp	r3, r5
 8004d94:	dcf2      	bgt.n	8004d7c <_printf_i+0x220>
 8004d96:	e7eb      	b.n	8004d70 <_printf_i+0x214>
 8004d98:	2500      	movs	r5, #0
 8004d9a:	f104 0619 	add.w	r6, r4, #25
 8004d9e:	e7f5      	b.n	8004d8c <_printf_i+0x230>
 8004da0:	080072ee 	.word	0x080072ee
 8004da4:	080072ff 	.word	0x080072ff

08004da8 <_vsniprintf_r>:
 8004da8:	b530      	push	{r4, r5, lr}
 8004daa:	1e14      	subs	r4, r2, #0
 8004dac:	4605      	mov	r5, r0
 8004dae:	b09b      	sub	sp, #108	; 0x6c
 8004db0:	4618      	mov	r0, r3
 8004db2:	da05      	bge.n	8004dc0 <_vsniprintf_r+0x18>
 8004db4:	238b      	movs	r3, #139	; 0x8b
 8004db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	b01b      	add	sp, #108	; 0x6c
 8004dbe:	bd30      	pop	{r4, r5, pc}
 8004dc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004dc4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004dc8:	bf0c      	ite	eq
 8004dca:	4623      	moveq	r3, r4
 8004dcc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004dd0:	9302      	str	r3, [sp, #8]
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dd8:	4602      	mov	r2, r0
 8004dda:	9100      	str	r1, [sp, #0]
 8004ddc:	9104      	str	r1, [sp, #16]
 8004dde:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004de2:	4669      	mov	r1, sp
 8004de4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004de6:	4628      	mov	r0, r5
 8004de8:	f001 fb4e 	bl	8006488 <_svfiprintf_r>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	bfbc      	itt	lt
 8004df0:	238b      	movlt	r3, #139	; 0x8b
 8004df2:	602b      	strlt	r3, [r5, #0]
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	d0e1      	beq.n	8004dbc <_vsniprintf_r+0x14>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	9b00      	ldr	r3, [sp, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e7dd      	b.n	8004dbc <_vsniprintf_r+0x14>

08004e00 <vsniprintf>:
 8004e00:	b507      	push	{r0, r1, r2, lr}
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	460a      	mov	r2, r1
 8004e08:	4601      	mov	r1, r0
 8004e0a:	4803      	ldr	r0, [pc, #12]	; (8004e18 <vsniprintf+0x18>)
 8004e0c:	6800      	ldr	r0, [r0, #0]
 8004e0e:	f7ff ffcb 	bl	8004da8 <_vsniprintf_r>
 8004e12:	b003      	add	sp, #12
 8004e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e18:	20000010 	.word	0x20000010

08004e1c <quorem>:
 8004e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	6903      	ldr	r3, [r0, #16]
 8004e22:	690c      	ldr	r4, [r1, #16]
 8004e24:	4607      	mov	r7, r0
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	f2c0 8083 	blt.w	8004f32 <quorem+0x116>
 8004e2c:	3c01      	subs	r4, #1
 8004e2e:	f100 0514 	add.w	r5, r0, #20
 8004e32:	f101 0814 	add.w	r8, r1, #20
 8004e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e44:	3301      	adds	r3, #1
 8004e46:	429a      	cmp	r2, r3
 8004e48:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e54:	d332      	bcc.n	8004ebc <quorem+0xa0>
 8004e56:	f04f 0e00 	mov.w	lr, #0
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	46ac      	mov	ip, r5
 8004e5e:	46f2      	mov	sl, lr
 8004e60:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e64:	b293      	uxth	r3, r2
 8004e66:	fb06 e303 	mla	r3, r6, r3, lr
 8004e6a:	0c12      	lsrs	r2, r2, #16
 8004e6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e70:	fb06 e202 	mla	r2, r6, r2, lr
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	ebaa 0303 	sub.w	r3, sl, r3
 8004e7a:	f8dc a000 	ldr.w	sl, [ip]
 8004e7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e82:	fa1f fa8a 	uxth.w	sl, sl
 8004e86:	4453      	add	r3, sl
 8004e88:	fa1f fa82 	uxth.w	sl, r2
 8004e8c:	f8dc 2000 	ldr.w	r2, [ip]
 8004e90:	4581      	cmp	r9, r0
 8004e92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004e96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ea0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ea4:	f84c 3b04 	str.w	r3, [ip], #4
 8004ea8:	d2da      	bcs.n	8004e60 <quorem+0x44>
 8004eaa:	f855 300b 	ldr.w	r3, [r5, fp]
 8004eae:	b92b      	cbnz	r3, 8004ebc <quorem+0xa0>
 8004eb0:	9b01      	ldr	r3, [sp, #4]
 8004eb2:	3b04      	subs	r3, #4
 8004eb4:	429d      	cmp	r5, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	d32f      	bcc.n	8004f1a <quorem+0xfe>
 8004eba:	613c      	str	r4, [r7, #16]
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f001 f8cb 	bl	8006058 <__mcmp>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	db25      	blt.n	8004f12 <quorem+0xf6>
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f04f 0c00 	mov.w	ip, #0
 8004ecc:	3601      	adds	r6, #1
 8004ece:	f858 1b04 	ldr.w	r1, [r8], #4
 8004ed2:	f8d0 e000 	ldr.w	lr, [r0]
 8004ed6:	b28b      	uxth	r3, r1
 8004ed8:	ebac 0303 	sub.w	r3, ip, r3
 8004edc:	fa1f f28e 	uxth.w	r2, lr
 8004ee0:	4413      	add	r3, r2
 8004ee2:	0c0a      	lsrs	r2, r1, #16
 8004ee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ef2:	45c1      	cmp	r9, r8
 8004ef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ef8:	f840 3b04 	str.w	r3, [r0], #4
 8004efc:	d2e7      	bcs.n	8004ece <quorem+0xb2>
 8004efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f06:	b922      	cbnz	r2, 8004f12 <quorem+0xf6>
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	429d      	cmp	r5, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	d30a      	bcc.n	8004f26 <quorem+0x10a>
 8004f10:	613c      	str	r4, [r7, #16]
 8004f12:	4630      	mov	r0, r6
 8004f14:	b003      	add	sp, #12
 8004f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	3b04      	subs	r3, #4
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	d1cb      	bne.n	8004eba <quorem+0x9e>
 8004f22:	3c01      	subs	r4, #1
 8004f24:	e7c6      	b.n	8004eb4 <quorem+0x98>
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	d1f0      	bne.n	8004f10 <quorem+0xf4>
 8004f2e:	3c01      	subs	r4, #1
 8004f30:	e7eb      	b.n	8004f0a <quorem+0xee>
 8004f32:	2000      	movs	r0, #0
 8004f34:	e7ee      	b.n	8004f14 <quorem+0xf8>
	...

08004f38 <_dtoa_r>:
 8004f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	461f      	mov	r7, r3
 8004f40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004f42:	b099      	sub	sp, #100	; 0x64
 8004f44:	4605      	mov	r5, r0
 8004f46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004f4e:	b974      	cbnz	r4, 8004f6e <_dtoa_r+0x36>
 8004f50:	2010      	movs	r0, #16
 8004f52:	f000 fde3 	bl	8005b1c <malloc>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6268      	str	r0, [r5, #36]	; 0x24
 8004f5a:	b920      	cbnz	r0, 8004f66 <_dtoa_r+0x2e>
 8004f5c:	21ea      	movs	r1, #234	; 0xea
 8004f5e:	4bae      	ldr	r3, [pc, #696]	; (8005218 <_dtoa_r+0x2e0>)
 8004f60:	48ae      	ldr	r0, [pc, #696]	; (800521c <_dtoa_r+0x2e4>)
 8004f62:	f001 fba1 	bl	80066a8 <__assert_func>
 8004f66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f6a:	6004      	str	r4, [r0, #0]
 8004f6c:	60c4      	str	r4, [r0, #12]
 8004f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	b151      	cbz	r1, 8004f8a <_dtoa_r+0x52>
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	2301      	movs	r3, #1
 8004f78:	4093      	lsls	r3, r2
 8004f7a:	604a      	str	r2, [r1, #4]
 8004f7c:	608b      	str	r3, [r1, #8]
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 fe30 	bl	8005be4 <_Bfree>
 8004f84:	2200      	movs	r2, #0
 8004f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	1e3b      	subs	r3, r7, #0
 8004f8c:	bfaf      	iteee	ge
 8004f8e:	2300      	movge	r3, #0
 8004f90:	2201      	movlt	r2, #1
 8004f92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f96:	9305      	strlt	r3, [sp, #20]
 8004f98:	bfa8      	it	ge
 8004f9a:	f8c8 3000 	strge.w	r3, [r8]
 8004f9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004fa2:	4b9f      	ldr	r3, [pc, #636]	; (8005220 <_dtoa_r+0x2e8>)
 8004fa4:	bfb8      	it	lt
 8004fa6:	f8c8 2000 	strlt.w	r2, [r8]
 8004faa:	ea33 0309 	bics.w	r3, r3, r9
 8004fae:	d119      	bne.n	8004fe4 <_dtoa_r+0xac>
 8004fb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fbc:	4333      	orrs	r3, r6
 8004fbe:	f000 8580 	beq.w	8005ac2 <_dtoa_r+0xb8a>
 8004fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fc4:	b953      	cbnz	r3, 8004fdc <_dtoa_r+0xa4>
 8004fc6:	4b97      	ldr	r3, [pc, #604]	; (8005224 <_dtoa_r+0x2ec>)
 8004fc8:	e022      	b.n	8005010 <_dtoa_r+0xd8>
 8004fca:	4b97      	ldr	r3, [pc, #604]	; (8005228 <_dtoa_r+0x2f0>)
 8004fcc:	9308      	str	r3, [sp, #32]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	9808      	ldr	r0, [sp, #32]
 8004fd6:	b019      	add	sp, #100	; 0x64
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	4b91      	ldr	r3, [pc, #580]	; (8005224 <_dtoa_r+0x2ec>)
 8004fde:	9308      	str	r3, [sp, #32]
 8004fe0:	3303      	adds	r3, #3
 8004fe2:	e7f5      	b.n	8004fd0 <_dtoa_r+0x98>
 8004fe4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004fe8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f7fb fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	b158      	cbz	r0, 8005014 <_dtoa_r+0xdc>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8559 	beq.w	8005abc <_dtoa_r+0xb84>
 800500a:	4888      	ldr	r0, [pc, #544]	; (800522c <_dtoa_r+0x2f4>)
 800500c:	6018      	str	r0, [r3, #0]
 800500e:	1e43      	subs	r3, r0, #1
 8005010:	9308      	str	r3, [sp, #32]
 8005012:	e7df      	b.n	8004fd4 <_dtoa_r+0x9c>
 8005014:	ab16      	add	r3, sp, #88	; 0x58
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	ab17      	add	r3, sp, #92	; 0x5c
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	4628      	mov	r0, r5
 800501e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005022:	f001 f8c5 	bl	80061b0 <__d2b>
 8005026:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800502a:	4682      	mov	sl, r0
 800502c:	2c00      	cmp	r4, #0
 800502e:	d07e      	beq.n	800512e <_dtoa_r+0x1f6>
 8005030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005036:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800503a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800503e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005042:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005046:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800504a:	2200      	movs	r2, #0
 800504c:	4b78      	ldr	r3, [pc, #480]	; (8005230 <_dtoa_r+0x2f8>)
 800504e:	f7fb f88b 	bl	8000168 <__aeabi_dsub>
 8005052:	a36b      	add	r3, pc, #428	; (adr r3, 8005200 <_dtoa_r+0x2c8>)
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f7fb fa3e 	bl	80004d8 <__aeabi_dmul>
 800505c:	a36a      	add	r3, pc, #424	; (adr r3, 8005208 <_dtoa_r+0x2d0>)
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb f883 	bl	800016c <__adddf3>
 8005066:	4606      	mov	r6, r0
 8005068:	4620      	mov	r0, r4
 800506a:	460f      	mov	r7, r1
 800506c:	f7fb f9ca 	bl	8000404 <__aeabi_i2d>
 8005070:	a367      	add	r3, pc, #412	; (adr r3, 8005210 <_dtoa_r+0x2d8>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb fa2f 	bl	80004d8 <__aeabi_dmul>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4630      	mov	r0, r6
 8005080:	4639      	mov	r1, r7
 8005082:	f7fb f873 	bl	800016c <__adddf3>
 8005086:	4606      	mov	r6, r0
 8005088:	460f      	mov	r7, r1
 800508a:	f7fb fcd5 	bl	8000a38 <__aeabi_d2iz>
 800508e:	2200      	movs	r2, #0
 8005090:	4681      	mov	r9, r0
 8005092:	2300      	movs	r3, #0
 8005094:	4630      	mov	r0, r6
 8005096:	4639      	mov	r1, r7
 8005098:	f7fb fc90 	bl	80009bc <__aeabi_dcmplt>
 800509c:	b148      	cbz	r0, 80050b2 <_dtoa_r+0x17a>
 800509e:	4648      	mov	r0, r9
 80050a0:	f7fb f9b0 	bl	8000404 <__aeabi_i2d>
 80050a4:	4632      	mov	r2, r6
 80050a6:	463b      	mov	r3, r7
 80050a8:	f7fb fc7e 	bl	80009a8 <__aeabi_dcmpeq>
 80050ac:	b908      	cbnz	r0, 80050b2 <_dtoa_r+0x17a>
 80050ae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80050b2:	f1b9 0f16 	cmp.w	r9, #22
 80050b6:	d857      	bhi.n	8005168 <_dtoa_r+0x230>
 80050b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050bc:	4b5d      	ldr	r3, [pc, #372]	; (8005234 <_dtoa_r+0x2fc>)
 80050be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	f7fb fc79 	bl	80009bc <__aeabi_dcmplt>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d04e      	beq.n	800516c <_dtoa_r+0x234>
 80050ce:	2300      	movs	r3, #0
 80050d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80050d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80050d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050d8:	1b1c      	subs	r4, r3, r4
 80050da:	1e63      	subs	r3, r4, #1
 80050dc:	9309      	str	r3, [sp, #36]	; 0x24
 80050de:	bf49      	itett	mi
 80050e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80050e4:	2300      	movpl	r3, #0
 80050e6:	9306      	strmi	r3, [sp, #24]
 80050e8:	2300      	movmi	r3, #0
 80050ea:	bf54      	ite	pl
 80050ec:	9306      	strpl	r3, [sp, #24]
 80050ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80050f0:	f1b9 0f00 	cmp.w	r9, #0
 80050f4:	db3c      	blt.n	8005170 <_dtoa_r+0x238>
 80050f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80050fc:	444b      	add	r3, r9
 80050fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005100:	2300      	movs	r3, #0
 8005102:	930a      	str	r3, [sp, #40]	; 0x28
 8005104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005106:	2b09      	cmp	r3, #9
 8005108:	d86c      	bhi.n	80051e4 <_dtoa_r+0x2ac>
 800510a:	2b05      	cmp	r3, #5
 800510c:	bfc4      	itt	gt
 800510e:	3b04      	subgt	r3, #4
 8005110:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005114:	bfc8      	it	gt
 8005116:	2400      	movgt	r4, #0
 8005118:	f1a3 0302 	sub.w	r3, r3, #2
 800511c:	bfd8      	it	le
 800511e:	2401      	movle	r4, #1
 8005120:	2b03      	cmp	r3, #3
 8005122:	f200 808b 	bhi.w	800523c <_dtoa_r+0x304>
 8005126:	e8df f003 	tbb	[pc, r3]
 800512a:	4f2d      	.short	0x4f2d
 800512c:	5b4d      	.short	0x5b4d
 800512e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005132:	441c      	add	r4, r3
 8005134:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005138:	2b20      	cmp	r3, #32
 800513a:	bfc3      	ittte	gt
 800513c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005140:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005144:	fa09 f303 	lslgt.w	r3, r9, r3
 8005148:	f1c3 0320 	rsble	r3, r3, #32
 800514c:	bfc6      	itte	gt
 800514e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005152:	4318      	orrgt	r0, r3
 8005154:	fa06 f003 	lslle.w	r0, r6, r3
 8005158:	f7fb f944 	bl	80003e4 <__aeabi_ui2d>
 800515c:	2301      	movs	r3, #1
 800515e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005162:	3c01      	subs	r4, #1
 8005164:	9313      	str	r3, [sp, #76]	; 0x4c
 8005166:	e770      	b.n	800504a <_dtoa_r+0x112>
 8005168:	2301      	movs	r3, #1
 800516a:	e7b3      	b.n	80050d4 <_dtoa_r+0x19c>
 800516c:	900f      	str	r0, [sp, #60]	; 0x3c
 800516e:	e7b2      	b.n	80050d6 <_dtoa_r+0x19e>
 8005170:	9b06      	ldr	r3, [sp, #24]
 8005172:	eba3 0309 	sub.w	r3, r3, r9
 8005176:	9306      	str	r3, [sp, #24]
 8005178:	f1c9 0300 	rsb	r3, r9, #0
 800517c:	930a      	str	r3, [sp, #40]	; 0x28
 800517e:	2300      	movs	r3, #0
 8005180:	930e      	str	r3, [sp, #56]	; 0x38
 8005182:	e7bf      	b.n	8005104 <_dtoa_r+0x1cc>
 8005184:	2300      	movs	r3, #0
 8005186:	930b      	str	r3, [sp, #44]	; 0x2c
 8005188:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800518a:	2b00      	cmp	r3, #0
 800518c:	dc59      	bgt.n	8005242 <_dtoa_r+0x30a>
 800518e:	f04f 0b01 	mov.w	fp, #1
 8005192:	465b      	mov	r3, fp
 8005194:	f8cd b008 	str.w	fp, [sp, #8]
 8005198:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800519c:	2200      	movs	r2, #0
 800519e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80051a0:	6042      	str	r2, [r0, #4]
 80051a2:	2204      	movs	r2, #4
 80051a4:	f102 0614 	add.w	r6, r2, #20
 80051a8:	429e      	cmp	r6, r3
 80051aa:	6841      	ldr	r1, [r0, #4]
 80051ac:	d94f      	bls.n	800524e <_dtoa_r+0x316>
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 fcd8 	bl	8005b64 <_Balloc>
 80051b4:	9008      	str	r0, [sp, #32]
 80051b6:	2800      	cmp	r0, #0
 80051b8:	d14d      	bne.n	8005256 <_dtoa_r+0x31e>
 80051ba:	4602      	mov	r2, r0
 80051bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <_dtoa_r+0x300>)
 80051c2:	e6cd      	b.n	8004f60 <_dtoa_r+0x28>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e7de      	b.n	8005186 <_dtoa_r+0x24e>
 80051c8:	2300      	movs	r3, #0
 80051ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80051cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051ce:	eb09 0b03 	add.w	fp, r9, r3
 80051d2:	f10b 0301 	add.w	r3, fp, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	bfb8      	it	lt
 80051dc:	2301      	movlt	r3, #1
 80051de:	e7dd      	b.n	800519c <_dtoa_r+0x264>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e7f2      	b.n	80051ca <_dtoa_r+0x292>
 80051e4:	2401      	movs	r4, #1
 80051e6:	2300      	movs	r3, #0
 80051e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80051ea:	9322      	str	r3, [sp, #136]	; 0x88
 80051ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80051f0:	2200      	movs	r2, #0
 80051f2:	2312      	movs	r3, #18
 80051f4:	f8cd b008 	str.w	fp, [sp, #8]
 80051f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80051fa:	e7cf      	b.n	800519c <_dtoa_r+0x264>
 80051fc:	f3af 8000 	nop.w
 8005200:	636f4361 	.word	0x636f4361
 8005204:	3fd287a7 	.word	0x3fd287a7
 8005208:	8b60c8b3 	.word	0x8b60c8b3
 800520c:	3fc68a28 	.word	0x3fc68a28
 8005210:	509f79fb 	.word	0x509f79fb
 8005214:	3fd34413 	.word	0x3fd34413
 8005218:	0800731d 	.word	0x0800731d
 800521c:	08007334 	.word	0x08007334
 8005220:	7ff00000 	.word	0x7ff00000
 8005224:	08007319 	.word	0x08007319
 8005228:	08007310 	.word	0x08007310
 800522c:	080072ed 	.word	0x080072ed
 8005230:	3ff80000 	.word	0x3ff80000
 8005234:	08007430 	.word	0x08007430
 8005238:	08007393 	.word	0x08007393
 800523c:	2301      	movs	r3, #1
 800523e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005240:	e7d4      	b.n	80051ec <_dtoa_r+0x2b4>
 8005242:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005246:	465b      	mov	r3, fp
 8005248:	f8cd b008 	str.w	fp, [sp, #8]
 800524c:	e7a6      	b.n	800519c <_dtoa_r+0x264>
 800524e:	3101      	adds	r1, #1
 8005250:	6041      	str	r1, [r0, #4]
 8005252:	0052      	lsls	r2, r2, #1
 8005254:	e7a6      	b.n	80051a4 <_dtoa_r+0x26c>
 8005256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005258:	9a08      	ldr	r2, [sp, #32]
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	9b02      	ldr	r3, [sp, #8]
 800525e:	2b0e      	cmp	r3, #14
 8005260:	f200 80a8 	bhi.w	80053b4 <_dtoa_r+0x47c>
 8005264:	2c00      	cmp	r4, #0
 8005266:	f000 80a5 	beq.w	80053b4 <_dtoa_r+0x47c>
 800526a:	f1b9 0f00 	cmp.w	r9, #0
 800526e:	dd34      	ble.n	80052da <_dtoa_r+0x3a2>
 8005270:	4a9a      	ldr	r2, [pc, #616]	; (80054dc <_dtoa_r+0x5a4>)
 8005272:	f009 030f 	and.w	r3, r9, #15
 8005276:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800527a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800527e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005282:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005286:	ea4f 1429 	mov.w	r4, r9, asr #4
 800528a:	d016      	beq.n	80052ba <_dtoa_r+0x382>
 800528c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005290:	4b93      	ldr	r3, [pc, #588]	; (80054e0 <_dtoa_r+0x5a8>)
 8005292:	2703      	movs	r7, #3
 8005294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005298:	f7fb fa48 	bl	800072c <__aeabi_ddiv>
 800529c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052a0:	f004 040f 	and.w	r4, r4, #15
 80052a4:	4e8e      	ldr	r6, [pc, #568]	; (80054e0 <_dtoa_r+0x5a8>)
 80052a6:	b954      	cbnz	r4, 80052be <_dtoa_r+0x386>
 80052a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b0:	f7fb fa3c 	bl	800072c <__aeabi_ddiv>
 80052b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052b8:	e029      	b.n	800530e <_dtoa_r+0x3d6>
 80052ba:	2702      	movs	r7, #2
 80052bc:	e7f2      	b.n	80052a4 <_dtoa_r+0x36c>
 80052be:	07e1      	lsls	r1, r4, #31
 80052c0:	d508      	bpl.n	80052d4 <_dtoa_r+0x39c>
 80052c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052ca:	f7fb f905 	bl	80004d8 <__aeabi_dmul>
 80052ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052d2:	3701      	adds	r7, #1
 80052d4:	1064      	asrs	r4, r4, #1
 80052d6:	3608      	adds	r6, #8
 80052d8:	e7e5      	b.n	80052a6 <_dtoa_r+0x36e>
 80052da:	f000 80a5 	beq.w	8005428 <_dtoa_r+0x4f0>
 80052de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052e2:	f1c9 0400 	rsb	r4, r9, #0
 80052e6:	4b7d      	ldr	r3, [pc, #500]	; (80054dc <_dtoa_r+0x5a4>)
 80052e8:	f004 020f 	and.w	r2, r4, #15
 80052ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f7fb f8f0 	bl	80004d8 <__aeabi_dmul>
 80052f8:	2702      	movs	r7, #2
 80052fa:	2300      	movs	r3, #0
 80052fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005300:	4e77      	ldr	r6, [pc, #476]	; (80054e0 <_dtoa_r+0x5a8>)
 8005302:	1124      	asrs	r4, r4, #4
 8005304:	2c00      	cmp	r4, #0
 8005306:	f040 8084 	bne.w	8005412 <_dtoa_r+0x4da>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1d2      	bne.n	80052b4 <_dtoa_r+0x37c>
 800530e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 808b 	beq.w	800542c <_dtoa_r+0x4f4>
 8005316:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800531a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800531e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005322:	2200      	movs	r2, #0
 8005324:	4b6f      	ldr	r3, [pc, #444]	; (80054e4 <_dtoa_r+0x5ac>)
 8005326:	f7fb fb49 	bl	80009bc <__aeabi_dcmplt>
 800532a:	2800      	cmp	r0, #0
 800532c:	d07e      	beq.n	800542c <_dtoa_r+0x4f4>
 800532e:	9b02      	ldr	r3, [sp, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d07b      	beq.n	800542c <_dtoa_r+0x4f4>
 8005334:	f1bb 0f00 	cmp.w	fp, #0
 8005338:	dd38      	ble.n	80053ac <_dtoa_r+0x474>
 800533a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800533e:	2200      	movs	r2, #0
 8005340:	4b69      	ldr	r3, [pc, #420]	; (80054e8 <_dtoa_r+0x5b0>)
 8005342:	f7fb f8c9 	bl	80004d8 <__aeabi_dmul>
 8005346:	465c      	mov	r4, fp
 8005348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800534c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8005350:	3701      	adds	r7, #1
 8005352:	4638      	mov	r0, r7
 8005354:	f7fb f856 	bl	8000404 <__aeabi_i2d>
 8005358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800535c:	f7fb f8bc 	bl	80004d8 <__aeabi_dmul>
 8005360:	2200      	movs	r2, #0
 8005362:	4b62      	ldr	r3, [pc, #392]	; (80054ec <_dtoa_r+0x5b4>)
 8005364:	f7fa ff02 	bl	800016c <__adddf3>
 8005368:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800536c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005370:	9611      	str	r6, [sp, #68]	; 0x44
 8005372:	2c00      	cmp	r4, #0
 8005374:	d15d      	bne.n	8005432 <_dtoa_r+0x4fa>
 8005376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800537a:	2200      	movs	r2, #0
 800537c:	4b5c      	ldr	r3, [pc, #368]	; (80054f0 <_dtoa_r+0x5b8>)
 800537e:	f7fa fef3 	bl	8000168 <__aeabi_dsub>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800538a:	4633      	mov	r3, r6
 800538c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800538e:	f7fb fb33 	bl	80009f8 <__aeabi_dcmpgt>
 8005392:	2800      	cmp	r0, #0
 8005394:	f040 829e 	bne.w	80058d4 <_dtoa_r+0x99c>
 8005398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800539c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800539e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80053a2:	f7fb fb0b 	bl	80009bc <__aeabi_dcmplt>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f040 8292 	bne.w	80058d0 <_dtoa_r+0x998>
 80053ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80053b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f2c0 8153 	blt.w	8005662 <_dtoa_r+0x72a>
 80053bc:	f1b9 0f0e 	cmp.w	r9, #14
 80053c0:	f300 814f 	bgt.w	8005662 <_dtoa_r+0x72a>
 80053c4:	4b45      	ldr	r3, [pc, #276]	; (80054dc <_dtoa_r+0x5a4>)
 80053c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80053ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80053d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f280 80db 	bge.w	8005590 <_dtoa_r+0x658>
 80053da:	9b02      	ldr	r3, [sp, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f300 80d7 	bgt.w	8005590 <_dtoa_r+0x658>
 80053e2:	f040 8274 	bne.w	80058ce <_dtoa_r+0x996>
 80053e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ea:	2200      	movs	r2, #0
 80053ec:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <_dtoa_r+0x5b8>)
 80053ee:	f7fb f873 	bl	80004d8 <__aeabi_dmul>
 80053f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053f6:	f7fb faf5 	bl	80009e4 <__aeabi_dcmpge>
 80053fa:	9c02      	ldr	r4, [sp, #8]
 80053fc:	4626      	mov	r6, r4
 80053fe:	2800      	cmp	r0, #0
 8005400:	f040 824a 	bne.w	8005898 <_dtoa_r+0x960>
 8005404:	2331      	movs	r3, #49	; 0x31
 8005406:	9f08      	ldr	r7, [sp, #32]
 8005408:	f109 0901 	add.w	r9, r9, #1
 800540c:	f807 3b01 	strb.w	r3, [r7], #1
 8005410:	e246      	b.n	80058a0 <_dtoa_r+0x968>
 8005412:	07e2      	lsls	r2, r4, #31
 8005414:	d505      	bpl.n	8005422 <_dtoa_r+0x4ea>
 8005416:	e9d6 2300 	ldrd	r2, r3, [r6]
 800541a:	f7fb f85d 	bl	80004d8 <__aeabi_dmul>
 800541e:	2301      	movs	r3, #1
 8005420:	3701      	adds	r7, #1
 8005422:	1064      	asrs	r4, r4, #1
 8005424:	3608      	adds	r6, #8
 8005426:	e76d      	b.n	8005304 <_dtoa_r+0x3cc>
 8005428:	2702      	movs	r7, #2
 800542a:	e770      	b.n	800530e <_dtoa_r+0x3d6>
 800542c:	46c8      	mov	r8, r9
 800542e:	9c02      	ldr	r4, [sp, #8]
 8005430:	e78f      	b.n	8005352 <_dtoa_r+0x41a>
 8005432:	9908      	ldr	r1, [sp, #32]
 8005434:	4b29      	ldr	r3, [pc, #164]	; (80054dc <_dtoa_r+0x5a4>)
 8005436:	4421      	add	r1, r4
 8005438:	9112      	str	r1, [sp, #72]	; 0x48
 800543a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800543c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005440:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005444:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005448:	2900      	cmp	r1, #0
 800544a:	d055      	beq.n	80054f8 <_dtoa_r+0x5c0>
 800544c:	2000      	movs	r0, #0
 800544e:	4929      	ldr	r1, [pc, #164]	; (80054f4 <_dtoa_r+0x5bc>)
 8005450:	f7fb f96c 	bl	800072c <__aeabi_ddiv>
 8005454:	463b      	mov	r3, r7
 8005456:	4632      	mov	r2, r6
 8005458:	f7fa fe86 	bl	8000168 <__aeabi_dsub>
 800545c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005460:	9f08      	ldr	r7, [sp, #32]
 8005462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005466:	f7fb fae7 	bl	8000a38 <__aeabi_d2iz>
 800546a:	4604      	mov	r4, r0
 800546c:	f7fa ffca 	bl	8000404 <__aeabi_i2d>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005478:	f7fa fe76 	bl	8000168 <__aeabi_dsub>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	3430      	adds	r4, #48	; 0x30
 8005482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800548a:	f807 4b01 	strb.w	r4, [r7], #1
 800548e:	f7fb fa95 	bl	80009bc <__aeabi_dcmplt>
 8005492:	2800      	cmp	r0, #0
 8005494:	d174      	bne.n	8005580 <_dtoa_r+0x648>
 8005496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549a:	2000      	movs	r0, #0
 800549c:	4911      	ldr	r1, [pc, #68]	; (80054e4 <_dtoa_r+0x5ac>)
 800549e:	f7fa fe63 	bl	8000168 <__aeabi_dsub>
 80054a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054a6:	f7fb fa89 	bl	80009bc <__aeabi_dcmplt>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	f040 80b6 	bne.w	800561c <_dtoa_r+0x6e4>
 80054b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054b2:	429f      	cmp	r7, r3
 80054b4:	f43f af7a 	beq.w	80053ac <_dtoa_r+0x474>
 80054b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054bc:	2200      	movs	r2, #0
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <_dtoa_r+0x5b0>)
 80054c0:	f7fb f80a 	bl	80004d8 <__aeabi_dmul>
 80054c4:	2200      	movs	r2, #0
 80054c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <_dtoa_r+0x5b0>)
 80054d0:	f7fb f802 	bl	80004d8 <__aeabi_dmul>
 80054d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054d8:	e7c3      	b.n	8005462 <_dtoa_r+0x52a>
 80054da:	bf00      	nop
 80054dc:	08007430 	.word	0x08007430
 80054e0:	08007408 	.word	0x08007408
 80054e4:	3ff00000 	.word	0x3ff00000
 80054e8:	40240000 	.word	0x40240000
 80054ec:	401c0000 	.word	0x401c0000
 80054f0:	40140000 	.word	0x40140000
 80054f4:	3fe00000 	.word	0x3fe00000
 80054f8:	4630      	mov	r0, r6
 80054fa:	4639      	mov	r1, r7
 80054fc:	f7fa ffec 	bl	80004d8 <__aeabi_dmul>
 8005500:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005502:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005506:	9c08      	ldr	r4, [sp, #32]
 8005508:	9314      	str	r3, [sp, #80]	; 0x50
 800550a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800550e:	f7fb fa93 	bl	8000a38 <__aeabi_d2iz>
 8005512:	9015      	str	r0, [sp, #84]	; 0x54
 8005514:	f7fa ff76 	bl	8000404 <__aeabi_i2d>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005520:	f7fa fe22 	bl	8000168 <__aeabi_dsub>
 8005524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005526:	4606      	mov	r6, r0
 8005528:	3330      	adds	r3, #48	; 0x30
 800552a:	f804 3b01 	strb.w	r3, [r4], #1
 800552e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005530:	460f      	mov	r7, r1
 8005532:	429c      	cmp	r4, r3
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	d124      	bne.n	8005584 <_dtoa_r+0x64c>
 800553a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800553e:	4bb3      	ldr	r3, [pc, #716]	; (800580c <_dtoa_r+0x8d4>)
 8005540:	f7fa fe14 	bl	800016c <__adddf3>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fb fa54 	bl	80009f8 <__aeabi_dcmpgt>
 8005550:	2800      	cmp	r0, #0
 8005552:	d162      	bne.n	800561a <_dtoa_r+0x6e2>
 8005554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005558:	2000      	movs	r0, #0
 800555a:	49ac      	ldr	r1, [pc, #688]	; (800580c <_dtoa_r+0x8d4>)
 800555c:	f7fa fe04 	bl	8000168 <__aeabi_dsub>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fb fa28 	bl	80009bc <__aeabi_dcmplt>
 800556c:	2800      	cmp	r0, #0
 800556e:	f43f af1d 	beq.w	80053ac <_dtoa_r+0x474>
 8005572:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005574:	1e7b      	subs	r3, r7, #1
 8005576:	9314      	str	r3, [sp, #80]	; 0x50
 8005578:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d0f8      	beq.n	8005572 <_dtoa_r+0x63a>
 8005580:	46c1      	mov	r9, r8
 8005582:	e03a      	b.n	80055fa <_dtoa_r+0x6c2>
 8005584:	4ba2      	ldr	r3, [pc, #648]	; (8005810 <_dtoa_r+0x8d8>)
 8005586:	f7fa ffa7 	bl	80004d8 <__aeabi_dmul>
 800558a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800558e:	e7bc      	b.n	800550a <_dtoa_r+0x5d2>
 8005590:	9f08      	ldr	r7, [sp, #32]
 8005592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800559a:	f7fb f8c7 	bl	800072c <__aeabi_ddiv>
 800559e:	f7fb fa4b 	bl	8000a38 <__aeabi_d2iz>
 80055a2:	4604      	mov	r4, r0
 80055a4:	f7fa ff2e 	bl	8000404 <__aeabi_i2d>
 80055a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055ac:	f7fa ff94 	bl	80004d8 <__aeabi_dmul>
 80055b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80055b4:	460b      	mov	r3, r1
 80055b6:	4602      	mov	r2, r0
 80055b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055bc:	f7fa fdd4 	bl	8000168 <__aeabi_dsub>
 80055c0:	f807 6b01 	strb.w	r6, [r7], #1
 80055c4:	9e08      	ldr	r6, [sp, #32]
 80055c6:	9b02      	ldr	r3, [sp, #8]
 80055c8:	1bbe      	subs	r6, r7, r6
 80055ca:	42b3      	cmp	r3, r6
 80055cc:	d13a      	bne.n	8005644 <_dtoa_r+0x70c>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	f7fa fdcb 	bl	800016c <__adddf3>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055e2:	f7fb fa09 	bl	80009f8 <__aeabi_dcmpgt>
 80055e6:	bb58      	cbnz	r0, 8005640 <_dtoa_r+0x708>
 80055e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055f0:	f7fb f9da 	bl	80009a8 <__aeabi_dcmpeq>
 80055f4:	b108      	cbz	r0, 80055fa <_dtoa_r+0x6c2>
 80055f6:	07e1      	lsls	r1, r4, #31
 80055f8:	d422      	bmi.n	8005640 <_dtoa_r+0x708>
 80055fa:	4628      	mov	r0, r5
 80055fc:	4651      	mov	r1, sl
 80055fe:	f000 faf1 	bl	8005be4 <_Bfree>
 8005602:	2300      	movs	r3, #0
 8005604:	703b      	strb	r3, [r7, #0]
 8005606:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005608:	f109 0001 	add.w	r0, r9, #1
 800560c:	6018      	str	r0, [r3, #0]
 800560e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005610:	2b00      	cmp	r3, #0
 8005612:	f43f acdf 	beq.w	8004fd4 <_dtoa_r+0x9c>
 8005616:	601f      	str	r7, [r3, #0]
 8005618:	e4dc      	b.n	8004fd4 <_dtoa_r+0x9c>
 800561a:	4627      	mov	r7, r4
 800561c:	463b      	mov	r3, r7
 800561e:	461f      	mov	r7, r3
 8005620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005624:	2a39      	cmp	r2, #57	; 0x39
 8005626:	d107      	bne.n	8005638 <_dtoa_r+0x700>
 8005628:	9a08      	ldr	r2, [sp, #32]
 800562a:	429a      	cmp	r2, r3
 800562c:	d1f7      	bne.n	800561e <_dtoa_r+0x6e6>
 800562e:	2230      	movs	r2, #48	; 0x30
 8005630:	9908      	ldr	r1, [sp, #32]
 8005632:	f108 0801 	add.w	r8, r8, #1
 8005636:	700a      	strb	r2, [r1, #0]
 8005638:	781a      	ldrb	r2, [r3, #0]
 800563a:	3201      	adds	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e79f      	b.n	8005580 <_dtoa_r+0x648>
 8005640:	46c8      	mov	r8, r9
 8005642:	e7eb      	b.n	800561c <_dtoa_r+0x6e4>
 8005644:	2200      	movs	r2, #0
 8005646:	4b72      	ldr	r3, [pc, #456]	; (8005810 <_dtoa_r+0x8d8>)
 8005648:	f7fa ff46 	bl	80004d8 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005654:	2200      	movs	r2, #0
 8005656:	2300      	movs	r3, #0
 8005658:	f7fb f9a6 	bl	80009a8 <__aeabi_dcmpeq>
 800565c:	2800      	cmp	r0, #0
 800565e:	d098      	beq.n	8005592 <_dtoa_r+0x65a>
 8005660:	e7cb      	b.n	80055fa <_dtoa_r+0x6c2>
 8005662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005664:	2a00      	cmp	r2, #0
 8005666:	f000 80cd 	beq.w	8005804 <_dtoa_r+0x8cc>
 800566a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800566c:	2a01      	cmp	r2, #1
 800566e:	f300 80af 	bgt.w	80057d0 <_dtoa_r+0x898>
 8005672:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005674:	2a00      	cmp	r2, #0
 8005676:	f000 80a7 	beq.w	80057c8 <_dtoa_r+0x890>
 800567a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800567e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005680:	9f06      	ldr	r7, [sp, #24]
 8005682:	9a06      	ldr	r2, [sp, #24]
 8005684:	2101      	movs	r1, #1
 8005686:	441a      	add	r2, r3
 8005688:	9206      	str	r2, [sp, #24]
 800568a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800568c:	4628      	mov	r0, r5
 800568e:	441a      	add	r2, r3
 8005690:	9209      	str	r2, [sp, #36]	; 0x24
 8005692:	f000 fb61 	bl	8005d58 <__i2b>
 8005696:	4606      	mov	r6, r0
 8005698:	2f00      	cmp	r7, #0
 800569a:	dd0c      	ble.n	80056b6 <_dtoa_r+0x77e>
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	dd09      	ble.n	80056b6 <_dtoa_r+0x77e>
 80056a2:	42bb      	cmp	r3, r7
 80056a4:	bfa8      	it	ge
 80056a6:	463b      	movge	r3, r7
 80056a8:	9a06      	ldr	r2, [sp, #24]
 80056aa:	1aff      	subs	r7, r7, r3
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	9206      	str	r2, [sp, #24]
 80056b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	9309      	str	r3, [sp, #36]	; 0x24
 80056b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b8:	b1f3      	cbz	r3, 80056f8 <_dtoa_r+0x7c0>
 80056ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80a9 	beq.w	8005814 <_dtoa_r+0x8dc>
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	dd10      	ble.n	80056e8 <_dtoa_r+0x7b0>
 80056c6:	4631      	mov	r1, r6
 80056c8:	4622      	mov	r2, r4
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 fbfe 	bl	8005ecc <__pow5mult>
 80056d0:	4652      	mov	r2, sl
 80056d2:	4601      	mov	r1, r0
 80056d4:	4606      	mov	r6, r0
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 fb54 	bl	8005d84 <__multiply>
 80056dc:	4680      	mov	r8, r0
 80056de:	4651      	mov	r1, sl
 80056e0:	4628      	mov	r0, r5
 80056e2:	f000 fa7f 	bl	8005be4 <_Bfree>
 80056e6:	46c2      	mov	sl, r8
 80056e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ea:	1b1a      	subs	r2, r3, r4
 80056ec:	d004      	beq.n	80056f8 <_dtoa_r+0x7c0>
 80056ee:	4651      	mov	r1, sl
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fbeb 	bl	8005ecc <__pow5mult>
 80056f6:	4682      	mov	sl, r0
 80056f8:	2101      	movs	r1, #1
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 fb2c 	bl	8005d58 <__i2b>
 8005700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005702:	4604      	mov	r4, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	f340 8087 	ble.w	8005818 <_dtoa_r+0x8e0>
 800570a:	461a      	mov	r2, r3
 800570c:	4601      	mov	r1, r0
 800570e:	4628      	mov	r0, r5
 8005710:	f000 fbdc 	bl	8005ecc <__pow5mult>
 8005714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005716:	4604      	mov	r4, r0
 8005718:	2b01      	cmp	r3, #1
 800571a:	f340 8080 	ble.w	800581e <_dtoa_r+0x8e6>
 800571e:	f04f 0800 	mov.w	r8, #0
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005728:	6918      	ldr	r0, [r3, #16]
 800572a:	f000 fac7 	bl	8005cbc <__hi0bits>
 800572e:	f1c0 0020 	rsb	r0, r0, #32
 8005732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005734:	4418      	add	r0, r3
 8005736:	f010 001f 	ands.w	r0, r0, #31
 800573a:	f000 8092 	beq.w	8005862 <_dtoa_r+0x92a>
 800573e:	f1c0 0320 	rsb	r3, r0, #32
 8005742:	2b04      	cmp	r3, #4
 8005744:	f340 808a 	ble.w	800585c <_dtoa_r+0x924>
 8005748:	f1c0 001c 	rsb	r0, r0, #28
 800574c:	9b06      	ldr	r3, [sp, #24]
 800574e:	4407      	add	r7, r0
 8005750:	4403      	add	r3, r0
 8005752:	9306      	str	r3, [sp, #24]
 8005754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005756:	4403      	add	r3, r0
 8005758:	9309      	str	r3, [sp, #36]	; 0x24
 800575a:	9b06      	ldr	r3, [sp, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	dd05      	ble.n	800576c <_dtoa_r+0x834>
 8005760:	4651      	mov	r1, sl
 8005762:	461a      	mov	r2, r3
 8005764:	4628      	mov	r0, r5
 8005766:	f000 fc0b 	bl	8005f80 <__lshift>
 800576a:	4682      	mov	sl, r0
 800576c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd05      	ble.n	800577e <_dtoa_r+0x846>
 8005772:	4621      	mov	r1, r4
 8005774:	461a      	mov	r2, r3
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fc02 	bl	8005f80 <__lshift>
 800577c:	4604      	mov	r4, r0
 800577e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d070      	beq.n	8005866 <_dtoa_r+0x92e>
 8005784:	4621      	mov	r1, r4
 8005786:	4650      	mov	r0, sl
 8005788:	f000 fc66 	bl	8006058 <__mcmp>
 800578c:	2800      	cmp	r0, #0
 800578e:	da6a      	bge.n	8005866 <_dtoa_r+0x92e>
 8005790:	2300      	movs	r3, #0
 8005792:	4651      	mov	r1, sl
 8005794:	220a      	movs	r2, #10
 8005796:	4628      	mov	r0, r5
 8005798:	f000 fa46 	bl	8005c28 <__multadd>
 800579c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800579e:	4682      	mov	sl, r0
 80057a0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8193 	beq.w	8005ad0 <_dtoa_r+0xb98>
 80057aa:	4631      	mov	r1, r6
 80057ac:	2300      	movs	r3, #0
 80057ae:	220a      	movs	r2, #10
 80057b0:	4628      	mov	r0, r5
 80057b2:	f000 fa39 	bl	8005c28 <__multadd>
 80057b6:	f1bb 0f00 	cmp.w	fp, #0
 80057ba:	4606      	mov	r6, r0
 80057bc:	f300 8093 	bgt.w	80058e6 <_dtoa_r+0x9ae>
 80057c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	dc57      	bgt.n	8005876 <_dtoa_r+0x93e>
 80057c6:	e08e      	b.n	80058e6 <_dtoa_r+0x9ae>
 80057c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057ce:	e756      	b.n	800567e <_dtoa_r+0x746>
 80057d0:	9b02      	ldr	r3, [sp, #8]
 80057d2:	1e5c      	subs	r4, r3, #1
 80057d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	bfb7      	itett	lt
 80057da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80057dc:	1b1c      	subge	r4, r3, r4
 80057de:	1ae2      	sublt	r2, r4, r3
 80057e0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80057e2:	bfbe      	ittt	lt
 80057e4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80057e6:	189b      	addlt	r3, r3, r2
 80057e8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80057ea:	9b02      	ldr	r3, [sp, #8]
 80057ec:	bfb8      	it	lt
 80057ee:	2400      	movlt	r4, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bfbb      	ittet	lt
 80057f4:	9b06      	ldrlt	r3, [sp, #24]
 80057f6:	9a02      	ldrlt	r2, [sp, #8]
 80057f8:	9f06      	ldrge	r7, [sp, #24]
 80057fa:	1a9f      	sublt	r7, r3, r2
 80057fc:	bfac      	ite	ge
 80057fe:	9b02      	ldrge	r3, [sp, #8]
 8005800:	2300      	movlt	r3, #0
 8005802:	e73e      	b.n	8005682 <_dtoa_r+0x74a>
 8005804:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005806:	9f06      	ldr	r7, [sp, #24]
 8005808:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800580a:	e745      	b.n	8005698 <_dtoa_r+0x760>
 800580c:	3fe00000 	.word	0x3fe00000
 8005810:	40240000 	.word	0x40240000
 8005814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005816:	e76a      	b.n	80056ee <_dtoa_r+0x7b6>
 8005818:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800581a:	2b01      	cmp	r3, #1
 800581c:	dc19      	bgt.n	8005852 <_dtoa_r+0x91a>
 800581e:	9b04      	ldr	r3, [sp, #16]
 8005820:	b9bb      	cbnz	r3, 8005852 <_dtoa_r+0x91a>
 8005822:	9b05      	ldr	r3, [sp, #20]
 8005824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005828:	b99b      	cbnz	r3, 8005852 <_dtoa_r+0x91a>
 800582a:	9b05      	ldr	r3, [sp, #20]
 800582c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005830:	0d1b      	lsrs	r3, r3, #20
 8005832:	051b      	lsls	r3, r3, #20
 8005834:	b183      	cbz	r3, 8005858 <_dtoa_r+0x920>
 8005836:	f04f 0801 	mov.w	r8, #1
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	3301      	adds	r3, #1
 800583e:	9306      	str	r3, [sp, #24]
 8005840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005842:	3301      	adds	r3, #1
 8005844:	9309      	str	r3, [sp, #36]	; 0x24
 8005846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f af6a 	bne.w	8005722 <_dtoa_r+0x7ea>
 800584e:	2001      	movs	r0, #1
 8005850:	e76f      	b.n	8005732 <_dtoa_r+0x7fa>
 8005852:	f04f 0800 	mov.w	r8, #0
 8005856:	e7f6      	b.n	8005846 <_dtoa_r+0x90e>
 8005858:	4698      	mov	r8, r3
 800585a:	e7f4      	b.n	8005846 <_dtoa_r+0x90e>
 800585c:	f43f af7d 	beq.w	800575a <_dtoa_r+0x822>
 8005860:	4618      	mov	r0, r3
 8005862:	301c      	adds	r0, #28
 8005864:	e772      	b.n	800574c <_dtoa_r+0x814>
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	dc36      	bgt.n	80058da <_dtoa_r+0x9a2>
 800586c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800586e:	2b02      	cmp	r3, #2
 8005870:	dd33      	ble.n	80058da <_dtoa_r+0x9a2>
 8005872:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005876:	f1bb 0f00 	cmp.w	fp, #0
 800587a:	d10d      	bne.n	8005898 <_dtoa_r+0x960>
 800587c:	4621      	mov	r1, r4
 800587e:	465b      	mov	r3, fp
 8005880:	2205      	movs	r2, #5
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f9d0 	bl	8005c28 <__multadd>
 8005888:	4601      	mov	r1, r0
 800588a:	4604      	mov	r4, r0
 800588c:	4650      	mov	r0, sl
 800588e:	f000 fbe3 	bl	8006058 <__mcmp>
 8005892:	2800      	cmp	r0, #0
 8005894:	f73f adb6 	bgt.w	8005404 <_dtoa_r+0x4cc>
 8005898:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800589a:	9f08      	ldr	r7, [sp, #32]
 800589c:	ea6f 0903 	mvn.w	r9, r3
 80058a0:	f04f 0800 	mov.w	r8, #0
 80058a4:	4621      	mov	r1, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 f99c 	bl	8005be4 <_Bfree>
 80058ac:	2e00      	cmp	r6, #0
 80058ae:	f43f aea4 	beq.w	80055fa <_dtoa_r+0x6c2>
 80058b2:	f1b8 0f00 	cmp.w	r8, #0
 80058b6:	d005      	beq.n	80058c4 <_dtoa_r+0x98c>
 80058b8:	45b0      	cmp	r8, r6
 80058ba:	d003      	beq.n	80058c4 <_dtoa_r+0x98c>
 80058bc:	4641      	mov	r1, r8
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f990 	bl	8005be4 <_Bfree>
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f98c 	bl	8005be4 <_Bfree>
 80058cc:	e695      	b.n	80055fa <_dtoa_r+0x6c2>
 80058ce:	2400      	movs	r4, #0
 80058d0:	4626      	mov	r6, r4
 80058d2:	e7e1      	b.n	8005898 <_dtoa_r+0x960>
 80058d4:	46c1      	mov	r9, r8
 80058d6:	4626      	mov	r6, r4
 80058d8:	e594      	b.n	8005404 <_dtoa_r+0x4cc>
 80058da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058dc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80fc 	beq.w	8005ade <_dtoa_r+0xba6>
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	dd05      	ble.n	80058f6 <_dtoa_r+0x9be>
 80058ea:	4631      	mov	r1, r6
 80058ec:	463a      	mov	r2, r7
 80058ee:	4628      	mov	r0, r5
 80058f0:	f000 fb46 	bl	8005f80 <__lshift>
 80058f4:	4606      	mov	r6, r0
 80058f6:	f1b8 0f00 	cmp.w	r8, #0
 80058fa:	d05c      	beq.n	80059b6 <_dtoa_r+0xa7e>
 80058fc:	4628      	mov	r0, r5
 80058fe:	6871      	ldr	r1, [r6, #4]
 8005900:	f000 f930 	bl	8005b64 <_Balloc>
 8005904:	4607      	mov	r7, r0
 8005906:	b928      	cbnz	r0, 8005914 <_dtoa_r+0x9dc>
 8005908:	4602      	mov	r2, r0
 800590a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800590e:	4b7e      	ldr	r3, [pc, #504]	; (8005b08 <_dtoa_r+0xbd0>)
 8005910:	f7ff bb26 	b.w	8004f60 <_dtoa_r+0x28>
 8005914:	6932      	ldr	r2, [r6, #16]
 8005916:	f106 010c 	add.w	r1, r6, #12
 800591a:	3202      	adds	r2, #2
 800591c:	0092      	lsls	r2, r2, #2
 800591e:	300c      	adds	r0, #12
 8005920:	f000 f912 	bl	8005b48 <memcpy>
 8005924:	2201      	movs	r2, #1
 8005926:	4639      	mov	r1, r7
 8005928:	4628      	mov	r0, r5
 800592a:	f000 fb29 	bl	8005f80 <__lshift>
 800592e:	46b0      	mov	r8, r6
 8005930:	4606      	mov	r6, r0
 8005932:	9b08      	ldr	r3, [sp, #32]
 8005934:	3301      	adds	r3, #1
 8005936:	9302      	str	r3, [sp, #8]
 8005938:	9b08      	ldr	r3, [sp, #32]
 800593a:	445b      	add	r3, fp
 800593c:	930a      	str	r3, [sp, #40]	; 0x28
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	9309      	str	r3, [sp, #36]	; 0x24
 8005946:	9b02      	ldr	r3, [sp, #8]
 8005948:	4621      	mov	r1, r4
 800594a:	4650      	mov	r0, sl
 800594c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005950:	f7ff fa64 	bl	8004e1c <quorem>
 8005954:	4603      	mov	r3, r0
 8005956:	4641      	mov	r1, r8
 8005958:	3330      	adds	r3, #48	; 0x30
 800595a:	9004      	str	r0, [sp, #16]
 800595c:	4650      	mov	r0, sl
 800595e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005960:	f000 fb7a 	bl	8006058 <__mcmp>
 8005964:	4632      	mov	r2, r6
 8005966:	9006      	str	r0, [sp, #24]
 8005968:	4621      	mov	r1, r4
 800596a:	4628      	mov	r0, r5
 800596c:	f000 fb90 	bl	8006090 <__mdiff>
 8005970:	68c2      	ldr	r2, [r0, #12]
 8005972:	4607      	mov	r7, r0
 8005974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005976:	bb02      	cbnz	r2, 80059ba <_dtoa_r+0xa82>
 8005978:	4601      	mov	r1, r0
 800597a:	4650      	mov	r0, sl
 800597c:	f000 fb6c 	bl	8006058 <__mcmp>
 8005980:	4602      	mov	r2, r0
 8005982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005984:	4639      	mov	r1, r7
 8005986:	4628      	mov	r0, r5
 8005988:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800598c:	f000 f92a 	bl	8005be4 <_Bfree>
 8005990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005994:	9f02      	ldr	r7, [sp, #8]
 8005996:	ea43 0102 	orr.w	r1, r3, r2
 800599a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599c:	430b      	orrs	r3, r1
 800599e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059a0:	d10d      	bne.n	80059be <_dtoa_r+0xa86>
 80059a2:	2b39      	cmp	r3, #57	; 0x39
 80059a4:	d027      	beq.n	80059f6 <_dtoa_r+0xabe>
 80059a6:	9a06      	ldr	r2, [sp, #24]
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	dd01      	ble.n	80059b0 <_dtoa_r+0xa78>
 80059ac:	9b04      	ldr	r3, [sp, #16]
 80059ae:	3331      	adds	r3, #49	; 0x31
 80059b0:	f88b 3000 	strb.w	r3, [fp]
 80059b4:	e776      	b.n	80058a4 <_dtoa_r+0x96c>
 80059b6:	4630      	mov	r0, r6
 80059b8:	e7b9      	b.n	800592e <_dtoa_r+0x9f6>
 80059ba:	2201      	movs	r2, #1
 80059bc:	e7e2      	b.n	8005984 <_dtoa_r+0xa4c>
 80059be:	9906      	ldr	r1, [sp, #24]
 80059c0:	2900      	cmp	r1, #0
 80059c2:	db04      	blt.n	80059ce <_dtoa_r+0xa96>
 80059c4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80059c6:	4301      	orrs	r1, r0
 80059c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ca:	4301      	orrs	r1, r0
 80059cc:	d120      	bne.n	8005a10 <_dtoa_r+0xad8>
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	ddee      	ble.n	80059b0 <_dtoa_r+0xa78>
 80059d2:	4651      	mov	r1, sl
 80059d4:	2201      	movs	r2, #1
 80059d6:	4628      	mov	r0, r5
 80059d8:	9302      	str	r3, [sp, #8]
 80059da:	f000 fad1 	bl	8005f80 <__lshift>
 80059de:	4621      	mov	r1, r4
 80059e0:	4682      	mov	sl, r0
 80059e2:	f000 fb39 	bl	8006058 <__mcmp>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	9b02      	ldr	r3, [sp, #8]
 80059ea:	dc02      	bgt.n	80059f2 <_dtoa_r+0xaba>
 80059ec:	d1e0      	bne.n	80059b0 <_dtoa_r+0xa78>
 80059ee:	07da      	lsls	r2, r3, #31
 80059f0:	d5de      	bpl.n	80059b0 <_dtoa_r+0xa78>
 80059f2:	2b39      	cmp	r3, #57	; 0x39
 80059f4:	d1da      	bne.n	80059ac <_dtoa_r+0xa74>
 80059f6:	2339      	movs	r3, #57	; 0x39
 80059f8:	f88b 3000 	strb.w	r3, [fp]
 80059fc:	463b      	mov	r3, r7
 80059fe:	461f      	mov	r7, r3
 8005a00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	2a39      	cmp	r2, #57	; 0x39
 8005a08:	d050      	beq.n	8005aac <_dtoa_r+0xb74>
 8005a0a:	3201      	adds	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e749      	b.n	80058a4 <_dtoa_r+0x96c>
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	dd03      	ble.n	8005a1c <_dtoa_r+0xae4>
 8005a14:	2b39      	cmp	r3, #57	; 0x39
 8005a16:	d0ee      	beq.n	80059f6 <_dtoa_r+0xabe>
 8005a18:	3301      	adds	r3, #1
 8005a1a:	e7c9      	b.n	80059b0 <_dtoa_r+0xa78>
 8005a1c:	9a02      	ldr	r2, [sp, #8]
 8005a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a24:	428a      	cmp	r2, r1
 8005a26:	d02a      	beq.n	8005a7e <_dtoa_r+0xb46>
 8005a28:	4651      	mov	r1, sl
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f8fa 	bl	8005c28 <__multadd>
 8005a34:	45b0      	cmp	r8, r6
 8005a36:	4682      	mov	sl, r0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	f04f 020a 	mov.w	r2, #10
 8005a40:	4641      	mov	r1, r8
 8005a42:	4628      	mov	r0, r5
 8005a44:	d107      	bne.n	8005a56 <_dtoa_r+0xb1e>
 8005a46:	f000 f8ef 	bl	8005c28 <__multadd>
 8005a4a:	4680      	mov	r8, r0
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	9b02      	ldr	r3, [sp, #8]
 8005a50:	3301      	adds	r3, #1
 8005a52:	9302      	str	r3, [sp, #8]
 8005a54:	e777      	b.n	8005946 <_dtoa_r+0xa0e>
 8005a56:	f000 f8e7 	bl	8005c28 <__multadd>
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	2300      	movs	r3, #0
 8005a60:	220a      	movs	r2, #10
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 f8e0 	bl	8005c28 <__multadd>
 8005a68:	4606      	mov	r6, r0
 8005a6a:	e7f0      	b.n	8005a4e <_dtoa_r+0xb16>
 8005a6c:	f1bb 0f00 	cmp.w	fp, #0
 8005a70:	bfcc      	ite	gt
 8005a72:	465f      	movgt	r7, fp
 8005a74:	2701      	movle	r7, #1
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	9a08      	ldr	r2, [sp, #32]
 8005a7c:	4417      	add	r7, r2
 8005a7e:	4651      	mov	r1, sl
 8005a80:	2201      	movs	r2, #1
 8005a82:	4628      	mov	r0, r5
 8005a84:	9302      	str	r3, [sp, #8]
 8005a86:	f000 fa7b 	bl	8005f80 <__lshift>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4682      	mov	sl, r0
 8005a8e:	f000 fae3 	bl	8006058 <__mcmp>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	dcb2      	bgt.n	80059fc <_dtoa_r+0xac4>
 8005a96:	d102      	bne.n	8005a9e <_dtoa_r+0xb66>
 8005a98:	9b02      	ldr	r3, [sp, #8]
 8005a9a:	07db      	lsls	r3, r3, #31
 8005a9c:	d4ae      	bmi.n	80059fc <_dtoa_r+0xac4>
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	461f      	mov	r7, r3
 8005aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aa6:	2a30      	cmp	r2, #48	; 0x30
 8005aa8:	d0fa      	beq.n	8005aa0 <_dtoa_r+0xb68>
 8005aaa:	e6fb      	b.n	80058a4 <_dtoa_r+0x96c>
 8005aac:	9a08      	ldr	r2, [sp, #32]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d1a5      	bne.n	80059fe <_dtoa_r+0xac6>
 8005ab2:	2331      	movs	r3, #49	; 0x31
 8005ab4:	f109 0901 	add.w	r9, r9, #1
 8005ab8:	7013      	strb	r3, [r2, #0]
 8005aba:	e6f3      	b.n	80058a4 <_dtoa_r+0x96c>
 8005abc:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <_dtoa_r+0xbd4>)
 8005abe:	f7ff baa7 	b.w	8005010 <_dtoa_r+0xd8>
 8005ac2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f47f aa80 	bne.w	8004fca <_dtoa_r+0x92>
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <_dtoa_r+0xbd8>)
 8005acc:	f7ff baa0 	b.w	8005010 <_dtoa_r+0xd8>
 8005ad0:	f1bb 0f00 	cmp.w	fp, #0
 8005ad4:	dc03      	bgt.n	8005ade <_dtoa_r+0xba6>
 8005ad6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	f73f aecc 	bgt.w	8005876 <_dtoa_r+0x93e>
 8005ade:	9f08      	ldr	r7, [sp, #32]
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4650      	mov	r0, sl
 8005ae4:	f7ff f99a 	bl	8004e1c <quorem>
 8005ae8:	9a08      	ldr	r2, [sp, #32]
 8005aea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005aee:	f807 3b01 	strb.w	r3, [r7], #1
 8005af2:	1aba      	subs	r2, r7, r2
 8005af4:	4593      	cmp	fp, r2
 8005af6:	ddb9      	ble.n	8005a6c <_dtoa_r+0xb34>
 8005af8:	4651      	mov	r1, sl
 8005afa:	2300      	movs	r3, #0
 8005afc:	220a      	movs	r2, #10
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 f892 	bl	8005c28 <__multadd>
 8005b04:	4682      	mov	sl, r0
 8005b06:	e7eb      	b.n	8005ae0 <_dtoa_r+0xba8>
 8005b08:	08007393 	.word	0x08007393
 8005b0c:	080072ec 	.word	0x080072ec
 8005b10:	08007310 	.word	0x08007310

08005b14 <_localeconv_r>:
 8005b14:	4800      	ldr	r0, [pc, #0]	; (8005b18 <_localeconv_r+0x4>)
 8005b16:	4770      	bx	lr
 8005b18:	20000164 	.word	0x20000164

08005b1c <malloc>:
 8005b1c:	4b02      	ldr	r3, [pc, #8]	; (8005b28 <malloc+0xc>)
 8005b1e:	4601      	mov	r1, r0
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	f000 bbfb 	b.w	800631c <_malloc_r>
 8005b26:	bf00      	nop
 8005b28:	20000010 	.word	0x20000010

08005b2c <memchr>:
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	b2c9      	uxtb	r1, r1
 8005b32:	4402      	add	r2, r0
 8005b34:	4293      	cmp	r3, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	d101      	bne.n	8005b3e <memchr+0x12>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e003      	b.n	8005b46 <memchr+0x1a>
 8005b3e:	7804      	ldrb	r4, [r0, #0]
 8005b40:	3301      	adds	r3, #1
 8005b42:	428c      	cmp	r4, r1
 8005b44:	d1f6      	bne.n	8005b34 <memchr+0x8>
 8005b46:	bd10      	pop	{r4, pc}

08005b48 <memcpy>:
 8005b48:	440a      	add	r2, r1
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b50:	d100      	bne.n	8005b54 <memcpy+0xc>
 8005b52:	4770      	bx	lr
 8005b54:	b510      	push	{r4, lr}
 8005b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b60:	d1f9      	bne.n	8005b56 <memcpy+0xe>
 8005b62:	bd10      	pop	{r4, pc}

08005b64 <_Balloc>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b68:	4604      	mov	r4, r0
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	b976      	cbnz	r6, 8005b8c <_Balloc+0x28>
 8005b6e:	2010      	movs	r0, #16
 8005b70:	f7ff ffd4 	bl	8005b1c <malloc>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6260      	str	r0, [r4, #36]	; 0x24
 8005b78:	b920      	cbnz	r0, 8005b84 <_Balloc+0x20>
 8005b7a:	2166      	movs	r1, #102	; 0x66
 8005b7c:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <_Balloc+0x78>)
 8005b7e:	4818      	ldr	r0, [pc, #96]	; (8005be0 <_Balloc+0x7c>)
 8005b80:	f000 fd92 	bl	80066a8 <__assert_func>
 8005b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b88:	6006      	str	r6, [r0, #0]
 8005b8a:	60c6      	str	r6, [r0, #12]
 8005b8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b8e:	68f3      	ldr	r3, [r6, #12]
 8005b90:	b183      	cbz	r3, 8005bb4 <_Balloc+0x50>
 8005b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b9a:	b9b8      	cbnz	r0, 8005bcc <_Balloc+0x68>
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	fa01 f605 	lsl.w	r6, r1, r5
 8005ba2:	1d72      	adds	r2, r6, #5
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	0092      	lsls	r2, r2, #2
 8005ba8:	f000 fb5e 	bl	8006268 <_calloc_r>
 8005bac:	b160      	cbz	r0, 8005bc8 <_Balloc+0x64>
 8005bae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bb2:	e00e      	b.n	8005bd2 <_Balloc+0x6e>
 8005bb4:	2221      	movs	r2, #33	; 0x21
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fb55 	bl	8006268 <_calloc_r>
 8005bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bc0:	60f0      	str	r0, [r6, #12]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e4      	bne.n	8005b92 <_Balloc+0x2e>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	6802      	ldr	r2, [r0, #0]
 8005bce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bd8:	e7f7      	b.n	8005bca <_Balloc+0x66>
 8005bda:	bf00      	nop
 8005bdc:	0800731d 	.word	0x0800731d
 8005be0:	080073a4 	.word	0x080073a4

08005be4 <_Bfree>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005be8:	4605      	mov	r5, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	b976      	cbnz	r6, 8005c0c <_Bfree+0x28>
 8005bee:	2010      	movs	r0, #16
 8005bf0:	f7ff ff94 	bl	8005b1c <malloc>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6268      	str	r0, [r5, #36]	; 0x24
 8005bf8:	b920      	cbnz	r0, 8005c04 <_Bfree+0x20>
 8005bfa:	218a      	movs	r1, #138	; 0x8a
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <_Bfree+0x3c>)
 8005bfe:	4809      	ldr	r0, [pc, #36]	; (8005c24 <_Bfree+0x40>)
 8005c00:	f000 fd52 	bl	80066a8 <__assert_func>
 8005c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c08:	6006      	str	r6, [r0, #0]
 8005c0a:	60c6      	str	r6, [r0, #12]
 8005c0c:	b13c      	cbz	r4, 8005c1e <_Bfree+0x3a>
 8005c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c10:	6862      	ldr	r2, [r4, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c18:	6021      	str	r1, [r4, #0]
 8005c1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	0800731d 	.word	0x0800731d
 8005c24:	080073a4 	.word	0x080073a4

08005c28 <__multadd>:
 8005c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	460c      	mov	r4, r1
 8005c30:	2300      	movs	r3, #0
 8005c32:	690e      	ldr	r6, [r1, #16]
 8005c34:	4607      	mov	r7, r0
 8005c36:	f101 0014 	add.w	r0, r1, #20
 8005c3a:	6805      	ldr	r5, [r0, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	b2a9      	uxth	r1, r5
 8005c40:	fb02 8101 	mla	r1, r2, r1, r8
 8005c44:	0c2d      	lsrs	r5, r5, #16
 8005c46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005c4a:	fb02 c505 	mla	r5, r2, r5, ip
 8005c4e:	b289      	uxth	r1, r1
 8005c50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005c54:	429e      	cmp	r6, r3
 8005c56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005c5a:	f840 1b04 	str.w	r1, [r0], #4
 8005c5e:	dcec      	bgt.n	8005c3a <__multadd+0x12>
 8005c60:	f1b8 0f00 	cmp.w	r8, #0
 8005c64:	d022      	beq.n	8005cac <__multadd+0x84>
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	42b3      	cmp	r3, r6
 8005c6a:	dc19      	bgt.n	8005ca0 <__multadd+0x78>
 8005c6c:	6861      	ldr	r1, [r4, #4]
 8005c6e:	4638      	mov	r0, r7
 8005c70:	3101      	adds	r1, #1
 8005c72:	f7ff ff77 	bl	8005b64 <_Balloc>
 8005c76:	4605      	mov	r5, r0
 8005c78:	b928      	cbnz	r0, 8005c86 <__multadd+0x5e>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	21b5      	movs	r1, #181	; 0xb5
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <__multadd+0x8c>)
 8005c80:	480d      	ldr	r0, [pc, #52]	; (8005cb8 <__multadd+0x90>)
 8005c82:	f000 fd11 	bl	80066a8 <__assert_func>
 8005c86:	6922      	ldr	r2, [r4, #16]
 8005c88:	f104 010c 	add.w	r1, r4, #12
 8005c8c:	3202      	adds	r2, #2
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	300c      	adds	r0, #12
 8005c92:	f7ff ff59 	bl	8005b48 <memcpy>
 8005c96:	4621      	mov	r1, r4
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff ffa3 	bl	8005be4 <_Bfree>
 8005c9e:	462c      	mov	r4, r5
 8005ca0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	f8c3 8014 	str.w	r8, [r3, #20]
 8005caa:	6126      	str	r6, [r4, #16]
 8005cac:	4620      	mov	r0, r4
 8005cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb2:	bf00      	nop
 8005cb4:	08007393 	.word	0x08007393
 8005cb8:	080073a4 	.word	0x080073a4

08005cbc <__hi0bits>:
 8005cbc:	0c02      	lsrs	r2, r0, #16
 8005cbe:	0412      	lsls	r2, r2, #16
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	b9ca      	cbnz	r2, 8005cf8 <__hi0bits+0x3c>
 8005cc4:	0403      	lsls	r3, r0, #16
 8005cc6:	2010      	movs	r0, #16
 8005cc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ccc:	bf04      	itt	eq
 8005cce:	021b      	lsleq	r3, r3, #8
 8005cd0:	3008      	addeq	r0, #8
 8005cd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005cd6:	bf04      	itt	eq
 8005cd8:	011b      	lsleq	r3, r3, #4
 8005cda:	3004      	addeq	r0, #4
 8005cdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ce0:	bf04      	itt	eq
 8005ce2:	009b      	lsleq	r3, r3, #2
 8005ce4:	3002      	addeq	r0, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	db05      	blt.n	8005cf6 <__hi0bits+0x3a>
 8005cea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005cee:	f100 0001 	add.w	r0, r0, #1
 8005cf2:	bf08      	it	eq
 8005cf4:	2020      	moveq	r0, #32
 8005cf6:	4770      	bx	lr
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e7e5      	b.n	8005cc8 <__hi0bits+0xc>

08005cfc <__lo0bits>:
 8005cfc:	6803      	ldr	r3, [r0, #0]
 8005cfe:	4602      	mov	r2, r0
 8005d00:	f013 0007 	ands.w	r0, r3, #7
 8005d04:	d00b      	beq.n	8005d1e <__lo0bits+0x22>
 8005d06:	07d9      	lsls	r1, r3, #31
 8005d08:	d422      	bmi.n	8005d50 <__lo0bits+0x54>
 8005d0a:	0798      	lsls	r0, r3, #30
 8005d0c:	bf49      	itett	mi
 8005d0e:	085b      	lsrmi	r3, r3, #1
 8005d10:	089b      	lsrpl	r3, r3, #2
 8005d12:	2001      	movmi	r0, #1
 8005d14:	6013      	strmi	r3, [r2, #0]
 8005d16:	bf5c      	itt	pl
 8005d18:	2002      	movpl	r0, #2
 8005d1a:	6013      	strpl	r3, [r2, #0]
 8005d1c:	4770      	bx	lr
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	b909      	cbnz	r1, 8005d26 <__lo0bits+0x2a>
 8005d22:	2010      	movs	r0, #16
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d2a:	bf04      	itt	eq
 8005d2c:	0a1b      	lsreq	r3, r3, #8
 8005d2e:	3008      	addeq	r0, #8
 8005d30:	0719      	lsls	r1, r3, #28
 8005d32:	bf04      	itt	eq
 8005d34:	091b      	lsreq	r3, r3, #4
 8005d36:	3004      	addeq	r0, #4
 8005d38:	0799      	lsls	r1, r3, #30
 8005d3a:	bf04      	itt	eq
 8005d3c:	089b      	lsreq	r3, r3, #2
 8005d3e:	3002      	addeq	r0, #2
 8005d40:	07d9      	lsls	r1, r3, #31
 8005d42:	d403      	bmi.n	8005d4c <__lo0bits+0x50>
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	f100 0001 	add.w	r0, r0, #1
 8005d4a:	d003      	beq.n	8005d54 <__lo0bits+0x58>
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4770      	bx	lr
 8005d50:	2000      	movs	r0, #0
 8005d52:	4770      	bx	lr
 8005d54:	2020      	movs	r0, #32
 8005d56:	4770      	bx	lr

08005d58 <__i2b>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	f7ff ff01 	bl	8005b64 <_Balloc>
 8005d62:	4602      	mov	r2, r0
 8005d64:	b928      	cbnz	r0, 8005d72 <__i2b+0x1a>
 8005d66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d6a:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <__i2b+0x24>)
 8005d6c:	4804      	ldr	r0, [pc, #16]	; (8005d80 <__i2b+0x28>)
 8005d6e:	f000 fc9b 	bl	80066a8 <__assert_func>
 8005d72:	2301      	movs	r3, #1
 8005d74:	6144      	str	r4, [r0, #20]
 8005d76:	6103      	str	r3, [r0, #16]
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08007393 	.word	0x08007393
 8005d80:	080073a4 	.word	0x080073a4

08005d84 <__multiply>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	4614      	mov	r4, r2
 8005d8a:	690a      	ldr	r2, [r1, #16]
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	460d      	mov	r5, r1
 8005d90:	429a      	cmp	r2, r3
 8005d92:	bfbe      	ittt	lt
 8005d94:	460b      	movlt	r3, r1
 8005d96:	4625      	movlt	r5, r4
 8005d98:	461c      	movlt	r4, r3
 8005d9a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005d9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005da2:	68ab      	ldr	r3, [r5, #8]
 8005da4:	6869      	ldr	r1, [r5, #4]
 8005da6:	eb0a 0709 	add.w	r7, sl, r9
 8005daa:	42bb      	cmp	r3, r7
 8005dac:	b085      	sub	sp, #20
 8005dae:	bfb8      	it	lt
 8005db0:	3101      	addlt	r1, #1
 8005db2:	f7ff fed7 	bl	8005b64 <_Balloc>
 8005db6:	b930      	cbnz	r0, 8005dc6 <__multiply+0x42>
 8005db8:	4602      	mov	r2, r0
 8005dba:	f240 115d 	movw	r1, #349	; 0x15d
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <__multiply+0x140>)
 8005dc0:	4841      	ldr	r0, [pc, #260]	; (8005ec8 <__multiply+0x144>)
 8005dc2:	f000 fc71 	bl	80066a8 <__assert_func>
 8005dc6:	f100 0614 	add.w	r6, r0, #20
 8005dca:	4633      	mov	r3, r6
 8005dcc:	2200      	movs	r2, #0
 8005dce:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005dd2:	4543      	cmp	r3, r8
 8005dd4:	d31e      	bcc.n	8005e14 <__multiply+0x90>
 8005dd6:	f105 0c14 	add.w	ip, r5, #20
 8005dda:	f104 0314 	add.w	r3, r4, #20
 8005dde:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005de2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005de6:	9202      	str	r2, [sp, #8]
 8005de8:	ebac 0205 	sub.w	r2, ip, r5
 8005dec:	3a15      	subs	r2, #21
 8005dee:	f022 0203 	bic.w	r2, r2, #3
 8005df2:	3204      	adds	r2, #4
 8005df4:	f105 0115 	add.w	r1, r5, #21
 8005df8:	458c      	cmp	ip, r1
 8005dfa:	bf38      	it	cc
 8005dfc:	2204      	movcc	r2, #4
 8005dfe:	9201      	str	r2, [sp, #4]
 8005e00:	9a02      	ldr	r2, [sp, #8]
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d808      	bhi.n	8005e1a <__multiply+0x96>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	dc55      	bgt.n	8005eb8 <__multiply+0x134>
 8005e0c:	6107      	str	r7, [r0, #16]
 8005e0e:	b005      	add	sp, #20
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	f843 2b04 	str.w	r2, [r3], #4
 8005e18:	e7db      	b.n	8005dd2 <__multiply+0x4e>
 8005e1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e1e:	f1ba 0f00 	cmp.w	sl, #0
 8005e22:	d020      	beq.n	8005e66 <__multiply+0xe2>
 8005e24:	46b1      	mov	r9, r6
 8005e26:	2200      	movs	r2, #0
 8005e28:	f105 0e14 	add.w	lr, r5, #20
 8005e2c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005e30:	f8d9 b000 	ldr.w	fp, [r9]
 8005e34:	b2a1      	uxth	r1, r4
 8005e36:	fa1f fb8b 	uxth.w	fp, fp
 8005e3a:	fb0a b101 	mla	r1, sl, r1, fp
 8005e3e:	4411      	add	r1, r2
 8005e40:	f8d9 2000 	ldr.w	r2, [r9]
 8005e44:	0c24      	lsrs	r4, r4, #16
 8005e46:	0c12      	lsrs	r2, r2, #16
 8005e48:	fb0a 2404 	mla	r4, sl, r4, r2
 8005e4c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005e50:	b289      	uxth	r1, r1
 8005e52:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e56:	45f4      	cmp	ip, lr
 8005e58:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005e5c:	f849 1b04 	str.w	r1, [r9], #4
 8005e60:	d8e4      	bhi.n	8005e2c <__multiply+0xa8>
 8005e62:	9901      	ldr	r1, [sp, #4]
 8005e64:	5072      	str	r2, [r6, r1]
 8005e66:	9a03      	ldr	r2, [sp, #12]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e6e:	f1b9 0f00 	cmp.w	r9, #0
 8005e72:	d01f      	beq.n	8005eb4 <__multiply+0x130>
 8005e74:	46b6      	mov	lr, r6
 8005e76:	f04f 0a00 	mov.w	sl, #0
 8005e7a:	6834      	ldr	r4, [r6, #0]
 8005e7c:	f105 0114 	add.w	r1, r5, #20
 8005e80:	880a      	ldrh	r2, [r1, #0]
 8005e82:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005e86:	b2a4      	uxth	r4, r4
 8005e88:	fb09 b202 	mla	r2, r9, r2, fp
 8005e8c:	4492      	add	sl, r2
 8005e8e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e92:	f84e 4b04 	str.w	r4, [lr], #4
 8005e96:	f851 4b04 	ldr.w	r4, [r1], #4
 8005e9a:	f8be 2000 	ldrh.w	r2, [lr]
 8005e9e:	0c24      	lsrs	r4, r4, #16
 8005ea0:	fb09 2404 	mla	r4, r9, r4, r2
 8005ea4:	458c      	cmp	ip, r1
 8005ea6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005eaa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005eae:	d8e7      	bhi.n	8005e80 <__multiply+0xfc>
 8005eb0:	9a01      	ldr	r2, [sp, #4]
 8005eb2:	50b4      	str	r4, [r6, r2]
 8005eb4:	3604      	adds	r6, #4
 8005eb6:	e7a3      	b.n	8005e00 <__multiply+0x7c>
 8005eb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1a5      	bne.n	8005e0c <__multiply+0x88>
 8005ec0:	3f01      	subs	r7, #1
 8005ec2:	e7a1      	b.n	8005e08 <__multiply+0x84>
 8005ec4:	08007393 	.word	0x08007393
 8005ec8:	080073a4 	.word	0x080073a4

08005ecc <__pow5mult>:
 8005ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	f012 0203 	ands.w	r2, r2, #3
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	460f      	mov	r7, r1
 8005eda:	d007      	beq.n	8005eec <__pow5mult+0x20>
 8005edc:	4c25      	ldr	r4, [pc, #148]	; (8005f74 <__pow5mult+0xa8>)
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ee6:	f7ff fe9f 	bl	8005c28 <__multadd>
 8005eea:	4607      	mov	r7, r0
 8005eec:	10ad      	asrs	r5, r5, #2
 8005eee:	d03d      	beq.n	8005f6c <__pow5mult+0xa0>
 8005ef0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ef2:	b97c      	cbnz	r4, 8005f14 <__pow5mult+0x48>
 8005ef4:	2010      	movs	r0, #16
 8005ef6:	f7ff fe11 	bl	8005b1c <malloc>
 8005efa:	4602      	mov	r2, r0
 8005efc:	6270      	str	r0, [r6, #36]	; 0x24
 8005efe:	b928      	cbnz	r0, 8005f0c <__pow5mult+0x40>
 8005f00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f04:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <__pow5mult+0xac>)
 8005f06:	481d      	ldr	r0, [pc, #116]	; (8005f7c <__pow5mult+0xb0>)
 8005f08:	f000 fbce 	bl	80066a8 <__assert_func>
 8005f0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f10:	6004      	str	r4, [r0, #0]
 8005f12:	60c4      	str	r4, [r0, #12]
 8005f14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f1c:	b94c      	cbnz	r4, 8005f32 <__pow5mult+0x66>
 8005f1e:	f240 2171 	movw	r1, #625	; 0x271
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff ff18 	bl	8005d58 <__i2b>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f30:	6003      	str	r3, [r0, #0]
 8005f32:	f04f 0900 	mov.w	r9, #0
 8005f36:	07eb      	lsls	r3, r5, #31
 8005f38:	d50a      	bpl.n	8005f50 <__pow5mult+0x84>
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f7ff ff20 	bl	8005d84 <__multiply>
 8005f44:	4680      	mov	r8, r0
 8005f46:	4639      	mov	r1, r7
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff fe4b 	bl	8005be4 <_Bfree>
 8005f4e:	4647      	mov	r7, r8
 8005f50:	106d      	asrs	r5, r5, #1
 8005f52:	d00b      	beq.n	8005f6c <__pow5mult+0xa0>
 8005f54:	6820      	ldr	r0, [r4, #0]
 8005f56:	b938      	cbnz	r0, 8005f68 <__pow5mult+0x9c>
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f7ff ff11 	bl	8005d84 <__multiply>
 8005f62:	6020      	str	r0, [r4, #0]
 8005f64:	f8c0 9000 	str.w	r9, [r0]
 8005f68:	4604      	mov	r4, r0
 8005f6a:	e7e4      	b.n	8005f36 <__pow5mult+0x6a>
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f72:	bf00      	nop
 8005f74:	080074f8 	.word	0x080074f8
 8005f78:	0800731d 	.word	0x0800731d
 8005f7c:	080073a4 	.word	0x080073a4

08005f80 <__lshift>:
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	460c      	mov	r4, r1
 8005f86:	4607      	mov	r7, r0
 8005f88:	4691      	mov	r9, r2
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	6849      	ldr	r1, [r1, #4]
 8005f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f98:	f108 0601 	add.w	r6, r8, #1
 8005f9c:	42b3      	cmp	r3, r6
 8005f9e:	db0b      	blt.n	8005fb8 <__lshift+0x38>
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7ff fddf 	bl	8005b64 <_Balloc>
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	b948      	cbnz	r0, 8005fbe <__lshift+0x3e>
 8005faa:	4602      	mov	r2, r0
 8005fac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <__lshift+0xd0>)
 8005fb2:	4828      	ldr	r0, [pc, #160]	; (8006054 <__lshift+0xd4>)
 8005fb4:	f000 fb78 	bl	80066a8 <__assert_func>
 8005fb8:	3101      	adds	r1, #1
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	e7ee      	b.n	8005f9c <__lshift+0x1c>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f100 0114 	add.w	r1, r0, #20
 8005fc4:	f100 0210 	add.w	r2, r0, #16
 8005fc8:	4618      	mov	r0, r3
 8005fca:	4553      	cmp	r3, sl
 8005fcc:	db33      	blt.n	8006036 <__lshift+0xb6>
 8005fce:	6920      	ldr	r0, [r4, #16]
 8005fd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fd4:	f104 0314 	add.w	r3, r4, #20
 8005fd8:	f019 091f 	ands.w	r9, r9, #31
 8005fdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005fe4:	d02b      	beq.n	800603e <__lshift+0xbe>
 8005fe6:	468a      	mov	sl, r1
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f1c9 0e20 	rsb	lr, r9, #32
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	fa00 f009 	lsl.w	r0, r0, r9
 8005ff4:	4302      	orrs	r2, r0
 8005ff6:	f84a 2b04 	str.w	r2, [sl], #4
 8005ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ffe:	459c      	cmp	ip, r3
 8006000:	fa22 f20e 	lsr.w	r2, r2, lr
 8006004:	d8f3      	bhi.n	8005fee <__lshift+0x6e>
 8006006:	ebac 0304 	sub.w	r3, ip, r4
 800600a:	3b15      	subs	r3, #21
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	3304      	adds	r3, #4
 8006012:	f104 0015 	add.w	r0, r4, #21
 8006016:	4584      	cmp	ip, r0
 8006018:	bf38      	it	cc
 800601a:	2304      	movcc	r3, #4
 800601c:	50ca      	str	r2, [r1, r3]
 800601e:	b10a      	cbz	r2, 8006024 <__lshift+0xa4>
 8006020:	f108 0602 	add.w	r6, r8, #2
 8006024:	3e01      	subs	r6, #1
 8006026:	4638      	mov	r0, r7
 8006028:	4621      	mov	r1, r4
 800602a:	612e      	str	r6, [r5, #16]
 800602c:	f7ff fdda 	bl	8005be4 <_Bfree>
 8006030:	4628      	mov	r0, r5
 8006032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006036:	f842 0f04 	str.w	r0, [r2, #4]!
 800603a:	3301      	adds	r3, #1
 800603c:	e7c5      	b.n	8005fca <__lshift+0x4a>
 800603e:	3904      	subs	r1, #4
 8006040:	f853 2b04 	ldr.w	r2, [r3], #4
 8006044:	459c      	cmp	ip, r3
 8006046:	f841 2f04 	str.w	r2, [r1, #4]!
 800604a:	d8f9      	bhi.n	8006040 <__lshift+0xc0>
 800604c:	e7ea      	b.n	8006024 <__lshift+0xa4>
 800604e:	bf00      	nop
 8006050:	08007393 	.word	0x08007393
 8006054:	080073a4 	.word	0x080073a4

08006058 <__mcmp>:
 8006058:	4603      	mov	r3, r0
 800605a:	690a      	ldr	r2, [r1, #16]
 800605c:	6900      	ldr	r0, [r0, #16]
 800605e:	b530      	push	{r4, r5, lr}
 8006060:	1a80      	subs	r0, r0, r2
 8006062:	d10d      	bne.n	8006080 <__mcmp+0x28>
 8006064:	3314      	adds	r3, #20
 8006066:	3114      	adds	r1, #20
 8006068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800606c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006078:	4295      	cmp	r5, r2
 800607a:	d002      	beq.n	8006082 <__mcmp+0x2a>
 800607c:	d304      	bcc.n	8006088 <__mcmp+0x30>
 800607e:	2001      	movs	r0, #1
 8006080:	bd30      	pop	{r4, r5, pc}
 8006082:	42a3      	cmp	r3, r4
 8006084:	d3f4      	bcc.n	8006070 <__mcmp+0x18>
 8006086:	e7fb      	b.n	8006080 <__mcmp+0x28>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800608c:	e7f8      	b.n	8006080 <__mcmp+0x28>
	...

08006090 <__mdiff>:
 8006090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	460c      	mov	r4, r1
 8006096:	4606      	mov	r6, r0
 8006098:	4611      	mov	r1, r2
 800609a:	4620      	mov	r0, r4
 800609c:	4692      	mov	sl, r2
 800609e:	f7ff ffdb 	bl	8006058 <__mcmp>
 80060a2:	1e05      	subs	r5, r0, #0
 80060a4:	d111      	bne.n	80060ca <__mdiff+0x3a>
 80060a6:	4629      	mov	r1, r5
 80060a8:	4630      	mov	r0, r6
 80060aa:	f7ff fd5b 	bl	8005b64 <_Balloc>
 80060ae:	4602      	mov	r2, r0
 80060b0:	b928      	cbnz	r0, 80060be <__mdiff+0x2e>
 80060b2:	f240 2132 	movw	r1, #562	; 0x232
 80060b6:	4b3c      	ldr	r3, [pc, #240]	; (80061a8 <__mdiff+0x118>)
 80060b8:	483c      	ldr	r0, [pc, #240]	; (80061ac <__mdiff+0x11c>)
 80060ba:	f000 faf5 	bl	80066a8 <__assert_func>
 80060be:	2301      	movs	r3, #1
 80060c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060c4:	4610      	mov	r0, r2
 80060c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	bfa4      	itt	ge
 80060cc:	4653      	movge	r3, sl
 80060ce:	46a2      	movge	sl, r4
 80060d0:	4630      	mov	r0, r6
 80060d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80060d6:	bfa6      	itte	ge
 80060d8:	461c      	movge	r4, r3
 80060da:	2500      	movge	r5, #0
 80060dc:	2501      	movlt	r5, #1
 80060de:	f7ff fd41 	bl	8005b64 <_Balloc>
 80060e2:	4602      	mov	r2, r0
 80060e4:	b918      	cbnz	r0, 80060ee <__mdiff+0x5e>
 80060e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060ea:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <__mdiff+0x118>)
 80060ec:	e7e4      	b.n	80060b8 <__mdiff+0x28>
 80060ee:	f100 0814 	add.w	r8, r0, #20
 80060f2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80060f6:	60c5      	str	r5, [r0, #12]
 80060f8:	f04f 0c00 	mov.w	ip, #0
 80060fc:	f10a 0514 	add.w	r5, sl, #20
 8006100:	f10a 0010 	add.w	r0, sl, #16
 8006104:	46c2      	mov	sl, r8
 8006106:	6926      	ldr	r6, [r4, #16]
 8006108:	f104 0914 	add.w	r9, r4, #20
 800610c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006110:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006114:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006118:	f859 3b04 	ldr.w	r3, [r9], #4
 800611c:	fa1f f18b 	uxth.w	r1, fp
 8006120:	4461      	add	r1, ip
 8006122:	fa1f fc83 	uxth.w	ip, r3
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	eba1 010c 	sub.w	r1, r1, ip
 800612c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006130:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006134:	b289      	uxth	r1, r1
 8006136:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800613a:	454e      	cmp	r6, r9
 800613c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006140:	f84a 3b04 	str.w	r3, [sl], #4
 8006144:	d8e6      	bhi.n	8006114 <__mdiff+0x84>
 8006146:	1b33      	subs	r3, r6, r4
 8006148:	3b15      	subs	r3, #21
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	3415      	adds	r4, #21
 8006150:	3304      	adds	r3, #4
 8006152:	42a6      	cmp	r6, r4
 8006154:	bf38      	it	cc
 8006156:	2304      	movcc	r3, #4
 8006158:	441d      	add	r5, r3
 800615a:	4443      	add	r3, r8
 800615c:	461e      	mov	r6, r3
 800615e:	462c      	mov	r4, r5
 8006160:	4574      	cmp	r4, lr
 8006162:	d30e      	bcc.n	8006182 <__mdiff+0xf2>
 8006164:	f10e 0103 	add.w	r1, lr, #3
 8006168:	1b49      	subs	r1, r1, r5
 800616a:	f021 0103 	bic.w	r1, r1, #3
 800616e:	3d03      	subs	r5, #3
 8006170:	45ae      	cmp	lr, r5
 8006172:	bf38      	it	cc
 8006174:	2100      	movcc	r1, #0
 8006176:	4419      	add	r1, r3
 8006178:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800617c:	b18b      	cbz	r3, 80061a2 <__mdiff+0x112>
 800617e:	6117      	str	r7, [r2, #16]
 8006180:	e7a0      	b.n	80060c4 <__mdiff+0x34>
 8006182:	f854 8b04 	ldr.w	r8, [r4], #4
 8006186:	fa1f f188 	uxth.w	r1, r8
 800618a:	4461      	add	r1, ip
 800618c:	1408      	asrs	r0, r1, #16
 800618e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006192:	b289      	uxth	r1, r1
 8006194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800619c:	f846 1b04 	str.w	r1, [r6], #4
 80061a0:	e7de      	b.n	8006160 <__mdiff+0xd0>
 80061a2:	3f01      	subs	r7, #1
 80061a4:	e7e8      	b.n	8006178 <__mdiff+0xe8>
 80061a6:	bf00      	nop
 80061a8:	08007393 	.word	0x08007393
 80061ac:	080073a4 	.word	0x080073a4

080061b0 <__d2b>:
 80061b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80061b4:	2101      	movs	r1, #1
 80061b6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80061ba:	4690      	mov	r8, r2
 80061bc:	461d      	mov	r5, r3
 80061be:	f7ff fcd1 	bl	8005b64 <_Balloc>
 80061c2:	4604      	mov	r4, r0
 80061c4:	b930      	cbnz	r0, 80061d4 <__d2b+0x24>
 80061c6:	4602      	mov	r2, r0
 80061c8:	f240 310a 	movw	r1, #778	; 0x30a
 80061cc:	4b24      	ldr	r3, [pc, #144]	; (8006260 <__d2b+0xb0>)
 80061ce:	4825      	ldr	r0, [pc, #148]	; (8006264 <__d2b+0xb4>)
 80061d0:	f000 fa6a 	bl	80066a8 <__assert_func>
 80061d4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80061d8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80061dc:	bb2d      	cbnz	r5, 800622a <__d2b+0x7a>
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	f1b8 0300 	subs.w	r3, r8, #0
 80061e4:	d026      	beq.n	8006234 <__d2b+0x84>
 80061e6:	4668      	mov	r0, sp
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	f7ff fd87 	bl	8005cfc <__lo0bits>
 80061ee:	9900      	ldr	r1, [sp, #0]
 80061f0:	b1f0      	cbz	r0, 8006230 <__d2b+0x80>
 80061f2:	9a01      	ldr	r2, [sp, #4]
 80061f4:	f1c0 0320 	rsb	r3, r0, #32
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	430b      	orrs	r3, r1
 80061fe:	40c2      	lsrs	r2, r0
 8006200:	6163      	str	r3, [r4, #20]
 8006202:	9201      	str	r2, [sp, #4]
 8006204:	9b01      	ldr	r3, [sp, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2102      	movne	r1, #2
 800620c:	2101      	moveq	r1, #1
 800620e:	61a3      	str	r3, [r4, #24]
 8006210:	6121      	str	r1, [r4, #16]
 8006212:	b1c5      	cbz	r5, 8006246 <__d2b+0x96>
 8006214:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006218:	4405      	add	r5, r0
 800621a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800621e:	603d      	str	r5, [r7, #0]
 8006220:	6030      	str	r0, [r6, #0]
 8006222:	4620      	mov	r0, r4
 8006224:	b002      	add	sp, #8
 8006226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800622e:	e7d6      	b.n	80061de <__d2b+0x2e>
 8006230:	6161      	str	r1, [r4, #20]
 8006232:	e7e7      	b.n	8006204 <__d2b+0x54>
 8006234:	a801      	add	r0, sp, #4
 8006236:	f7ff fd61 	bl	8005cfc <__lo0bits>
 800623a:	2101      	movs	r1, #1
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	6121      	str	r1, [r4, #16]
 8006240:	6163      	str	r3, [r4, #20]
 8006242:	3020      	adds	r0, #32
 8006244:	e7e5      	b.n	8006212 <__d2b+0x62>
 8006246:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800624a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800624e:	6038      	str	r0, [r7, #0]
 8006250:	6918      	ldr	r0, [r3, #16]
 8006252:	f7ff fd33 	bl	8005cbc <__hi0bits>
 8006256:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800625a:	6031      	str	r1, [r6, #0]
 800625c:	e7e1      	b.n	8006222 <__d2b+0x72>
 800625e:	bf00      	nop
 8006260:	08007393 	.word	0x08007393
 8006264:	080073a4 	.word	0x080073a4

08006268 <_calloc_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	fb02 f501 	mul.w	r5, r2, r1
 800626e:	4629      	mov	r1, r5
 8006270:	f000 f854 	bl	800631c <_malloc_r>
 8006274:	4604      	mov	r4, r0
 8006276:	b118      	cbz	r0, 8006280 <_calloc_r+0x18>
 8006278:	462a      	mov	r2, r5
 800627a:	2100      	movs	r1, #0
 800627c:	f7fe f92c 	bl	80044d8 <memset>
 8006280:	4620      	mov	r0, r4
 8006282:	bd38      	pop	{r3, r4, r5, pc}

08006284 <_free_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4605      	mov	r5, r0
 8006288:	2900      	cmp	r1, #0
 800628a:	d043      	beq.n	8006314 <_free_r+0x90>
 800628c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006290:	1f0c      	subs	r4, r1, #4
 8006292:	2b00      	cmp	r3, #0
 8006294:	bfb8      	it	lt
 8006296:	18e4      	addlt	r4, r4, r3
 8006298:	f000 fa62 	bl	8006760 <__malloc_lock>
 800629c:	4a1e      	ldr	r2, [pc, #120]	; (8006318 <_free_r+0x94>)
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	4610      	mov	r0, r2
 80062a2:	b933      	cbnz	r3, 80062b2 <_free_r+0x2e>
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	6014      	str	r4, [r2, #0]
 80062a8:	4628      	mov	r0, r5
 80062aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ae:	f000 ba5d 	b.w	800676c <__malloc_unlock>
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	d90a      	bls.n	80062cc <_free_r+0x48>
 80062b6:	6821      	ldr	r1, [r4, #0]
 80062b8:	1862      	adds	r2, r4, r1
 80062ba:	4293      	cmp	r3, r2
 80062bc:	bf01      	itttt	eq
 80062be:	681a      	ldreq	r2, [r3, #0]
 80062c0:	685b      	ldreq	r3, [r3, #4]
 80062c2:	1852      	addeq	r2, r2, r1
 80062c4:	6022      	streq	r2, [r4, #0]
 80062c6:	6063      	str	r3, [r4, #4]
 80062c8:	6004      	str	r4, [r0, #0]
 80062ca:	e7ed      	b.n	80062a8 <_free_r+0x24>
 80062cc:	461a      	mov	r2, r3
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	b10b      	cbz	r3, 80062d6 <_free_r+0x52>
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	d9fa      	bls.n	80062cc <_free_r+0x48>
 80062d6:	6811      	ldr	r1, [r2, #0]
 80062d8:	1850      	adds	r0, r2, r1
 80062da:	42a0      	cmp	r0, r4
 80062dc:	d10b      	bne.n	80062f6 <_free_r+0x72>
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	4401      	add	r1, r0
 80062e2:	1850      	adds	r0, r2, r1
 80062e4:	4283      	cmp	r3, r0
 80062e6:	6011      	str	r1, [r2, #0]
 80062e8:	d1de      	bne.n	80062a8 <_free_r+0x24>
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4401      	add	r1, r0
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	6053      	str	r3, [r2, #4]
 80062f4:	e7d8      	b.n	80062a8 <_free_r+0x24>
 80062f6:	d902      	bls.n	80062fe <_free_r+0x7a>
 80062f8:	230c      	movs	r3, #12
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	e7d4      	b.n	80062a8 <_free_r+0x24>
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	1821      	adds	r1, r4, r0
 8006302:	428b      	cmp	r3, r1
 8006304:	bf01      	itttt	eq
 8006306:	6819      	ldreq	r1, [r3, #0]
 8006308:	685b      	ldreq	r3, [r3, #4]
 800630a:	1809      	addeq	r1, r1, r0
 800630c:	6021      	streq	r1, [r4, #0]
 800630e:	6063      	str	r3, [r4, #4]
 8006310:	6054      	str	r4, [r2, #4]
 8006312:	e7c9      	b.n	80062a8 <_free_r+0x24>
 8006314:	bd38      	pop	{r3, r4, r5, pc}
 8006316:	bf00      	nop
 8006318:	20000204 	.word	0x20000204

0800631c <_malloc_r>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	1ccd      	adds	r5, r1, #3
 8006320:	f025 0503 	bic.w	r5, r5, #3
 8006324:	3508      	adds	r5, #8
 8006326:	2d0c      	cmp	r5, #12
 8006328:	bf38      	it	cc
 800632a:	250c      	movcc	r5, #12
 800632c:	2d00      	cmp	r5, #0
 800632e:	4606      	mov	r6, r0
 8006330:	db01      	blt.n	8006336 <_malloc_r+0x1a>
 8006332:	42a9      	cmp	r1, r5
 8006334:	d903      	bls.n	800633e <_malloc_r+0x22>
 8006336:	230c      	movs	r3, #12
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	2000      	movs	r0, #0
 800633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633e:	f000 fa0f 	bl	8006760 <__malloc_lock>
 8006342:	4921      	ldr	r1, [pc, #132]	; (80063c8 <_malloc_r+0xac>)
 8006344:	680a      	ldr	r2, [r1, #0]
 8006346:	4614      	mov	r4, r2
 8006348:	b99c      	cbnz	r4, 8006372 <_malloc_r+0x56>
 800634a:	4f20      	ldr	r7, [pc, #128]	; (80063cc <_malloc_r+0xb0>)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	b923      	cbnz	r3, 800635a <_malloc_r+0x3e>
 8006350:	4621      	mov	r1, r4
 8006352:	4630      	mov	r0, r6
 8006354:	f000 f998 	bl	8006688 <_sbrk_r>
 8006358:	6038      	str	r0, [r7, #0]
 800635a:	4629      	mov	r1, r5
 800635c:	4630      	mov	r0, r6
 800635e:	f000 f993 	bl	8006688 <_sbrk_r>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	d123      	bne.n	80063ae <_malloc_r+0x92>
 8006366:	230c      	movs	r3, #12
 8006368:	4630      	mov	r0, r6
 800636a:	6033      	str	r3, [r6, #0]
 800636c:	f000 f9fe 	bl	800676c <__malloc_unlock>
 8006370:	e7e3      	b.n	800633a <_malloc_r+0x1e>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	1b5b      	subs	r3, r3, r5
 8006376:	d417      	bmi.n	80063a8 <_malloc_r+0x8c>
 8006378:	2b0b      	cmp	r3, #11
 800637a:	d903      	bls.n	8006384 <_malloc_r+0x68>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	441c      	add	r4, r3
 8006380:	6025      	str	r5, [r4, #0]
 8006382:	e004      	b.n	800638e <_malloc_r+0x72>
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	42a2      	cmp	r2, r4
 8006388:	bf0c      	ite	eq
 800638a:	600b      	streq	r3, [r1, #0]
 800638c:	6053      	strne	r3, [r2, #4]
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f9ec 	bl	800676c <__malloc_unlock>
 8006394:	f104 000b 	add.w	r0, r4, #11
 8006398:	1d23      	adds	r3, r4, #4
 800639a:	f020 0007 	bic.w	r0, r0, #7
 800639e:	1ac2      	subs	r2, r0, r3
 80063a0:	d0cc      	beq.n	800633c <_malloc_r+0x20>
 80063a2:	1a1b      	subs	r3, r3, r0
 80063a4:	50a3      	str	r3, [r4, r2]
 80063a6:	e7c9      	b.n	800633c <_malloc_r+0x20>
 80063a8:	4622      	mov	r2, r4
 80063aa:	6864      	ldr	r4, [r4, #4]
 80063ac:	e7cc      	b.n	8006348 <_malloc_r+0x2c>
 80063ae:	1cc4      	adds	r4, r0, #3
 80063b0:	f024 0403 	bic.w	r4, r4, #3
 80063b4:	42a0      	cmp	r0, r4
 80063b6:	d0e3      	beq.n	8006380 <_malloc_r+0x64>
 80063b8:	1a21      	subs	r1, r4, r0
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 f964 	bl	8006688 <_sbrk_r>
 80063c0:	3001      	adds	r0, #1
 80063c2:	d1dd      	bne.n	8006380 <_malloc_r+0x64>
 80063c4:	e7cf      	b.n	8006366 <_malloc_r+0x4a>
 80063c6:	bf00      	nop
 80063c8:	20000204 	.word	0x20000204
 80063cc:	20000208 	.word	0x20000208

080063d0 <__ssputs_r>:
 80063d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	688e      	ldr	r6, [r1, #8]
 80063d6:	4682      	mov	sl, r0
 80063d8:	429e      	cmp	r6, r3
 80063da:	460c      	mov	r4, r1
 80063dc:	4690      	mov	r8, r2
 80063de:	461f      	mov	r7, r3
 80063e0:	d838      	bhi.n	8006454 <__ssputs_r+0x84>
 80063e2:	898a      	ldrh	r2, [r1, #12]
 80063e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063e8:	d032      	beq.n	8006450 <__ssputs_r+0x80>
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	6909      	ldr	r1, [r1, #16]
 80063ee:	3301      	adds	r3, #1
 80063f0:	eba5 0901 	sub.w	r9, r5, r1
 80063f4:	6965      	ldr	r5, [r4, #20]
 80063f6:	444b      	add	r3, r9
 80063f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006400:	106d      	asrs	r5, r5, #1
 8006402:	429d      	cmp	r5, r3
 8006404:	bf38      	it	cc
 8006406:	461d      	movcc	r5, r3
 8006408:	0553      	lsls	r3, r2, #21
 800640a:	d531      	bpl.n	8006470 <__ssputs_r+0xa0>
 800640c:	4629      	mov	r1, r5
 800640e:	f7ff ff85 	bl	800631c <_malloc_r>
 8006412:	4606      	mov	r6, r0
 8006414:	b950      	cbnz	r0, 800642c <__ssputs_r+0x5c>
 8006416:	230c      	movs	r3, #12
 8006418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800641c:	f8ca 3000 	str.w	r3, [sl]
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	464a      	mov	r2, r9
 800642e:	6921      	ldr	r1, [r4, #16]
 8006430:	f7ff fb8a 	bl	8005b48 <memcpy>
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800643a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	6126      	str	r6, [r4, #16]
 8006442:	444e      	add	r6, r9
 8006444:	6026      	str	r6, [r4, #0]
 8006446:	463e      	mov	r6, r7
 8006448:	6165      	str	r5, [r4, #20]
 800644a:	eba5 0509 	sub.w	r5, r5, r9
 800644e:	60a5      	str	r5, [r4, #8]
 8006450:	42be      	cmp	r6, r7
 8006452:	d900      	bls.n	8006456 <__ssputs_r+0x86>
 8006454:	463e      	mov	r6, r7
 8006456:	4632      	mov	r2, r6
 8006458:	4641      	mov	r1, r8
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	f000 f966 	bl	800672c <memmove>
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	1b9b      	subs	r3, r3, r6
 8006466:	4432      	add	r2, r6
 8006468:	2000      	movs	r0, #0
 800646a:	60a3      	str	r3, [r4, #8]
 800646c:	6022      	str	r2, [r4, #0]
 800646e:	e7db      	b.n	8006428 <__ssputs_r+0x58>
 8006470:	462a      	mov	r2, r5
 8006472:	f000 f981 	bl	8006778 <_realloc_r>
 8006476:	4606      	mov	r6, r0
 8006478:	2800      	cmp	r0, #0
 800647a:	d1e1      	bne.n	8006440 <__ssputs_r+0x70>
 800647c:	4650      	mov	r0, sl
 800647e:	6921      	ldr	r1, [r4, #16]
 8006480:	f7ff ff00 	bl	8006284 <_free_r>
 8006484:	e7c7      	b.n	8006416 <__ssputs_r+0x46>
	...

08006488 <_svfiprintf_r>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	4698      	mov	r8, r3
 800648e:	898b      	ldrh	r3, [r1, #12]
 8006490:	4607      	mov	r7, r0
 8006492:	061b      	lsls	r3, r3, #24
 8006494:	460d      	mov	r5, r1
 8006496:	4614      	mov	r4, r2
 8006498:	b09d      	sub	sp, #116	; 0x74
 800649a:	d50e      	bpl.n	80064ba <_svfiprintf_r+0x32>
 800649c:	690b      	ldr	r3, [r1, #16]
 800649e:	b963      	cbnz	r3, 80064ba <_svfiprintf_r+0x32>
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	f7ff ff3b 	bl	800631c <_malloc_r>
 80064a6:	6028      	str	r0, [r5, #0]
 80064a8:	6128      	str	r0, [r5, #16]
 80064aa:	b920      	cbnz	r0, 80064b6 <_svfiprintf_r+0x2e>
 80064ac:	230c      	movs	r3, #12
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b4:	e0d1      	b.n	800665a <_svfiprintf_r+0x1d2>
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	616b      	str	r3, [r5, #20]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	2320      	movs	r3, #32
 80064c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c4:	2330      	movs	r3, #48	; 0x30
 80064c6:	f04f 0901 	mov.w	r9, #1
 80064ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006674 <_svfiprintf_r+0x1ec>
 80064d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d6:	4623      	mov	r3, r4
 80064d8:	469a      	mov	sl, r3
 80064da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064de:	b10a      	cbz	r2, 80064e4 <_svfiprintf_r+0x5c>
 80064e0:	2a25      	cmp	r2, #37	; 0x25
 80064e2:	d1f9      	bne.n	80064d8 <_svfiprintf_r+0x50>
 80064e4:	ebba 0b04 	subs.w	fp, sl, r4
 80064e8:	d00b      	beq.n	8006502 <_svfiprintf_r+0x7a>
 80064ea:	465b      	mov	r3, fp
 80064ec:	4622      	mov	r2, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff ff6d 	bl	80063d0 <__ssputs_r>
 80064f6:	3001      	adds	r0, #1
 80064f8:	f000 80aa 	beq.w	8006650 <_svfiprintf_r+0x1c8>
 80064fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064fe:	445a      	add	r2, fp
 8006500:	9209      	str	r2, [sp, #36]	; 0x24
 8006502:	f89a 3000 	ldrb.w	r3, [sl]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80a2 	beq.w	8006650 <_svfiprintf_r+0x1c8>
 800650c:	2300      	movs	r3, #0
 800650e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006516:	f10a 0a01 	add.w	sl, sl, #1
 800651a:	9304      	str	r3, [sp, #16]
 800651c:	9307      	str	r3, [sp, #28]
 800651e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006522:	931a      	str	r3, [sp, #104]	; 0x68
 8006524:	4654      	mov	r4, sl
 8006526:	2205      	movs	r2, #5
 8006528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652c:	4851      	ldr	r0, [pc, #324]	; (8006674 <_svfiprintf_r+0x1ec>)
 800652e:	f7ff fafd 	bl	8005b2c <memchr>
 8006532:	9a04      	ldr	r2, [sp, #16]
 8006534:	b9d8      	cbnz	r0, 800656e <_svfiprintf_r+0xe6>
 8006536:	06d0      	lsls	r0, r2, #27
 8006538:	bf44      	itt	mi
 800653a:	2320      	movmi	r3, #32
 800653c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006540:	0711      	lsls	r1, r2, #28
 8006542:	bf44      	itt	mi
 8006544:	232b      	movmi	r3, #43	; 0x2b
 8006546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654a:	f89a 3000 	ldrb.w	r3, [sl]
 800654e:	2b2a      	cmp	r3, #42	; 0x2a
 8006550:	d015      	beq.n	800657e <_svfiprintf_r+0xf6>
 8006552:	4654      	mov	r4, sl
 8006554:	2000      	movs	r0, #0
 8006556:	f04f 0c0a 	mov.w	ip, #10
 800655a:	9a07      	ldr	r2, [sp, #28]
 800655c:	4621      	mov	r1, r4
 800655e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006562:	3b30      	subs	r3, #48	; 0x30
 8006564:	2b09      	cmp	r3, #9
 8006566:	d94e      	bls.n	8006606 <_svfiprintf_r+0x17e>
 8006568:	b1b0      	cbz	r0, 8006598 <_svfiprintf_r+0x110>
 800656a:	9207      	str	r2, [sp, #28]
 800656c:	e014      	b.n	8006598 <_svfiprintf_r+0x110>
 800656e:	eba0 0308 	sub.w	r3, r0, r8
 8006572:	fa09 f303 	lsl.w	r3, r9, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	46a2      	mov	sl, r4
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	e7d2      	b.n	8006524 <_svfiprintf_r+0x9c>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	1d19      	adds	r1, r3, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	9103      	str	r1, [sp, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfbb      	ittet	lt
 800658a:	425b      	neglt	r3, r3
 800658c:	f042 0202 	orrlt.w	r2, r2, #2
 8006590:	9307      	strge	r3, [sp, #28]
 8006592:	9307      	strlt	r3, [sp, #28]
 8006594:	bfb8      	it	lt
 8006596:	9204      	strlt	r2, [sp, #16]
 8006598:	7823      	ldrb	r3, [r4, #0]
 800659a:	2b2e      	cmp	r3, #46	; 0x2e
 800659c:	d10c      	bne.n	80065b8 <_svfiprintf_r+0x130>
 800659e:	7863      	ldrb	r3, [r4, #1]
 80065a0:	2b2a      	cmp	r3, #42	; 0x2a
 80065a2:	d135      	bne.n	8006610 <_svfiprintf_r+0x188>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	3402      	adds	r4, #2
 80065a8:	1d1a      	adds	r2, r3, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	9203      	str	r2, [sp, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfb8      	it	lt
 80065b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006684 <_svfiprintf_r+0x1fc>
 80065bc:	2203      	movs	r2, #3
 80065be:	4650      	mov	r0, sl
 80065c0:	7821      	ldrb	r1, [r4, #0]
 80065c2:	f7ff fab3 	bl	8005b2c <memchr>
 80065c6:	b140      	cbz	r0, 80065da <_svfiprintf_r+0x152>
 80065c8:	2340      	movs	r3, #64	; 0x40
 80065ca:	eba0 000a 	sub.w	r0, r0, sl
 80065ce:	fa03 f000 	lsl.w	r0, r3, r0
 80065d2:	9b04      	ldr	r3, [sp, #16]
 80065d4:	3401      	adds	r4, #1
 80065d6:	4303      	orrs	r3, r0
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065de:	2206      	movs	r2, #6
 80065e0:	4825      	ldr	r0, [pc, #148]	; (8006678 <_svfiprintf_r+0x1f0>)
 80065e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e6:	f7ff faa1 	bl	8005b2c <memchr>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d038      	beq.n	8006660 <_svfiprintf_r+0x1d8>
 80065ee:	4b23      	ldr	r3, [pc, #140]	; (800667c <_svfiprintf_r+0x1f4>)
 80065f0:	bb1b      	cbnz	r3, 800663a <_svfiprintf_r+0x1b2>
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	3307      	adds	r3, #7
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	3308      	adds	r3, #8
 80065fc:	9303      	str	r3, [sp, #12]
 80065fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006600:	4433      	add	r3, r6
 8006602:	9309      	str	r3, [sp, #36]	; 0x24
 8006604:	e767      	b.n	80064d6 <_svfiprintf_r+0x4e>
 8006606:	460c      	mov	r4, r1
 8006608:	2001      	movs	r0, #1
 800660a:	fb0c 3202 	mla	r2, ip, r2, r3
 800660e:	e7a5      	b.n	800655c <_svfiprintf_r+0xd4>
 8006610:	2300      	movs	r3, #0
 8006612:	f04f 0c0a 	mov.w	ip, #10
 8006616:	4619      	mov	r1, r3
 8006618:	3401      	adds	r4, #1
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	4620      	mov	r0, r4
 800661e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006622:	3a30      	subs	r2, #48	; 0x30
 8006624:	2a09      	cmp	r2, #9
 8006626:	d903      	bls.n	8006630 <_svfiprintf_r+0x1a8>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0c5      	beq.n	80065b8 <_svfiprintf_r+0x130>
 800662c:	9105      	str	r1, [sp, #20]
 800662e:	e7c3      	b.n	80065b8 <_svfiprintf_r+0x130>
 8006630:	4604      	mov	r4, r0
 8006632:	2301      	movs	r3, #1
 8006634:	fb0c 2101 	mla	r1, ip, r1, r2
 8006638:	e7f0      	b.n	800661c <_svfiprintf_r+0x194>
 800663a:	ab03      	add	r3, sp, #12
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	462a      	mov	r2, r5
 8006640:	4638      	mov	r0, r7
 8006642:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <_svfiprintf_r+0x1f8>)
 8006644:	a904      	add	r1, sp, #16
 8006646:	f7fd ffed 	bl	8004624 <_printf_float>
 800664a:	1c42      	adds	r2, r0, #1
 800664c:	4606      	mov	r6, r0
 800664e:	d1d6      	bne.n	80065fe <_svfiprintf_r+0x176>
 8006650:	89ab      	ldrh	r3, [r5, #12]
 8006652:	065b      	lsls	r3, r3, #25
 8006654:	f53f af2c 	bmi.w	80064b0 <_svfiprintf_r+0x28>
 8006658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800665a:	b01d      	add	sp, #116	; 0x74
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	ab03      	add	r3, sp, #12
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	462a      	mov	r2, r5
 8006666:	4638      	mov	r0, r7
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <_svfiprintf_r+0x1f8>)
 800666a:	a904      	add	r1, sp, #16
 800666c:	f7fe fa76 	bl	8004b5c <_printf_i>
 8006670:	e7eb      	b.n	800664a <_svfiprintf_r+0x1c2>
 8006672:	bf00      	nop
 8006674:	08007504 	.word	0x08007504
 8006678:	0800750e 	.word	0x0800750e
 800667c:	08004625 	.word	0x08004625
 8006680:	080063d1 	.word	0x080063d1
 8006684:	0800750a 	.word	0x0800750a

08006688 <_sbrk_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	2300      	movs	r3, #0
 800668c:	4d05      	ldr	r5, [pc, #20]	; (80066a4 <_sbrk_r+0x1c>)
 800668e:	4604      	mov	r4, r0
 8006690:	4608      	mov	r0, r1
 8006692:	602b      	str	r3, [r5, #0]
 8006694:	f7fa fc8c 	bl	8000fb0 <_sbrk>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_sbrk_r+0x1a>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_sbrk_r+0x1a>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	200002fc 	.word	0x200002fc

080066a8 <__assert_func>:
 80066a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066aa:	4614      	mov	r4, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <__assert_func+0x2c>)
 80066b0:	4605      	mov	r5, r0
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68d8      	ldr	r0, [r3, #12]
 80066b6:	b14c      	cbz	r4, 80066cc <__assert_func+0x24>
 80066b8:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <__assert_func+0x30>)
 80066ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066be:	9100      	str	r1, [sp, #0]
 80066c0:	462b      	mov	r3, r5
 80066c2:	4906      	ldr	r1, [pc, #24]	; (80066dc <__assert_func+0x34>)
 80066c4:	f000 f80e 	bl	80066e4 <fiprintf>
 80066c8:	f000 faa2 	bl	8006c10 <abort>
 80066cc:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <__assert_func+0x38>)
 80066ce:	461c      	mov	r4, r3
 80066d0:	e7f3      	b.n	80066ba <__assert_func+0x12>
 80066d2:	bf00      	nop
 80066d4:	20000010 	.word	0x20000010
 80066d8:	08007515 	.word	0x08007515
 80066dc:	08007522 	.word	0x08007522
 80066e0:	08007550 	.word	0x08007550

080066e4 <fiprintf>:
 80066e4:	b40e      	push	{r1, r2, r3}
 80066e6:	b503      	push	{r0, r1, lr}
 80066e8:	4601      	mov	r1, r0
 80066ea:	ab03      	add	r3, sp, #12
 80066ec:	4805      	ldr	r0, [pc, #20]	; (8006704 <fiprintf+0x20>)
 80066ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f2:	6800      	ldr	r0, [r0, #0]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	f000 f88d 	bl	8006814 <_vfiprintf_r>
 80066fa:	b002      	add	sp, #8
 80066fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006700:	b003      	add	sp, #12
 8006702:	4770      	bx	lr
 8006704:	20000010 	.word	0x20000010

08006708 <__ascii_mbtowc>:
 8006708:	b082      	sub	sp, #8
 800670a:	b901      	cbnz	r1, 800670e <__ascii_mbtowc+0x6>
 800670c:	a901      	add	r1, sp, #4
 800670e:	b142      	cbz	r2, 8006722 <__ascii_mbtowc+0x1a>
 8006710:	b14b      	cbz	r3, 8006726 <__ascii_mbtowc+0x1e>
 8006712:	7813      	ldrb	r3, [r2, #0]
 8006714:	600b      	str	r3, [r1, #0]
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	1e10      	subs	r0, r2, #0
 800671a:	bf18      	it	ne
 800671c:	2001      	movne	r0, #1
 800671e:	b002      	add	sp, #8
 8006720:	4770      	bx	lr
 8006722:	4610      	mov	r0, r2
 8006724:	e7fb      	b.n	800671e <__ascii_mbtowc+0x16>
 8006726:	f06f 0001 	mvn.w	r0, #1
 800672a:	e7f8      	b.n	800671e <__ascii_mbtowc+0x16>

0800672c <memmove>:
 800672c:	4288      	cmp	r0, r1
 800672e:	b510      	push	{r4, lr}
 8006730:	eb01 0402 	add.w	r4, r1, r2
 8006734:	d902      	bls.n	800673c <memmove+0x10>
 8006736:	4284      	cmp	r4, r0
 8006738:	4623      	mov	r3, r4
 800673a:	d807      	bhi.n	800674c <memmove+0x20>
 800673c:	1e43      	subs	r3, r0, #1
 800673e:	42a1      	cmp	r1, r4
 8006740:	d008      	beq.n	8006754 <memmove+0x28>
 8006742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800674a:	e7f8      	b.n	800673e <memmove+0x12>
 800674c:	4601      	mov	r1, r0
 800674e:	4402      	add	r2, r0
 8006750:	428a      	cmp	r2, r1
 8006752:	d100      	bne.n	8006756 <memmove+0x2a>
 8006754:	bd10      	pop	{r4, pc}
 8006756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800675a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800675e:	e7f7      	b.n	8006750 <memmove+0x24>

08006760 <__malloc_lock>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__malloc_lock+0x8>)
 8006762:	f000 bc15 	b.w	8006f90 <__retarget_lock_acquire_recursive>
 8006766:	bf00      	nop
 8006768:	20000304 	.word	0x20000304

0800676c <__malloc_unlock>:
 800676c:	4801      	ldr	r0, [pc, #4]	; (8006774 <__malloc_unlock+0x8>)
 800676e:	f000 bc10 	b.w	8006f92 <__retarget_lock_release_recursive>
 8006772:	bf00      	nop
 8006774:	20000304 	.word	0x20000304

08006778 <_realloc_r>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	4607      	mov	r7, r0
 800677c:	4614      	mov	r4, r2
 800677e:	460e      	mov	r6, r1
 8006780:	b921      	cbnz	r1, 800678c <_realloc_r+0x14>
 8006782:	4611      	mov	r1, r2
 8006784:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006788:	f7ff bdc8 	b.w	800631c <_malloc_r>
 800678c:	b922      	cbnz	r2, 8006798 <_realloc_r+0x20>
 800678e:	f7ff fd79 	bl	8006284 <_free_r>
 8006792:	4625      	mov	r5, r4
 8006794:	4628      	mov	r0, r5
 8006796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006798:	f000 fc60 	bl	800705c <_malloc_usable_size_r>
 800679c:	42a0      	cmp	r0, r4
 800679e:	d20f      	bcs.n	80067c0 <_realloc_r+0x48>
 80067a0:	4621      	mov	r1, r4
 80067a2:	4638      	mov	r0, r7
 80067a4:	f7ff fdba 	bl	800631c <_malloc_r>
 80067a8:	4605      	mov	r5, r0
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d0f2      	beq.n	8006794 <_realloc_r+0x1c>
 80067ae:	4631      	mov	r1, r6
 80067b0:	4622      	mov	r2, r4
 80067b2:	f7ff f9c9 	bl	8005b48 <memcpy>
 80067b6:	4631      	mov	r1, r6
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff fd63 	bl	8006284 <_free_r>
 80067be:	e7e9      	b.n	8006794 <_realloc_r+0x1c>
 80067c0:	4635      	mov	r5, r6
 80067c2:	e7e7      	b.n	8006794 <_realloc_r+0x1c>

080067c4 <__sfputc_r>:
 80067c4:	6893      	ldr	r3, [r2, #8]
 80067c6:	b410      	push	{r4}
 80067c8:	3b01      	subs	r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	6093      	str	r3, [r2, #8]
 80067ce:	da07      	bge.n	80067e0 <__sfputc_r+0x1c>
 80067d0:	6994      	ldr	r4, [r2, #24]
 80067d2:	42a3      	cmp	r3, r4
 80067d4:	db01      	blt.n	80067da <__sfputc_r+0x16>
 80067d6:	290a      	cmp	r1, #10
 80067d8:	d102      	bne.n	80067e0 <__sfputc_r+0x1c>
 80067da:	bc10      	pop	{r4}
 80067dc:	f000 b94a 	b.w	8006a74 <__swbuf_r>
 80067e0:	6813      	ldr	r3, [r2, #0]
 80067e2:	1c58      	adds	r0, r3, #1
 80067e4:	6010      	str	r0, [r2, #0]
 80067e6:	7019      	strb	r1, [r3, #0]
 80067e8:	4608      	mov	r0, r1
 80067ea:	bc10      	pop	{r4}
 80067ec:	4770      	bx	lr

080067ee <__sfputs_r>:
 80067ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f0:	4606      	mov	r6, r0
 80067f2:	460f      	mov	r7, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	18d5      	adds	r5, r2, r3
 80067f8:	42ac      	cmp	r4, r5
 80067fa:	d101      	bne.n	8006800 <__sfputs_r+0x12>
 80067fc:	2000      	movs	r0, #0
 80067fe:	e007      	b.n	8006810 <__sfputs_r+0x22>
 8006800:	463a      	mov	r2, r7
 8006802:	4630      	mov	r0, r6
 8006804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006808:	f7ff ffdc 	bl	80067c4 <__sfputc_r>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d1f3      	bne.n	80067f8 <__sfputs_r+0xa>
 8006810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006814 <_vfiprintf_r>:
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	460d      	mov	r5, r1
 800681a:	4614      	mov	r4, r2
 800681c:	4698      	mov	r8, r3
 800681e:	4606      	mov	r6, r0
 8006820:	b09d      	sub	sp, #116	; 0x74
 8006822:	b118      	cbz	r0, 800682c <_vfiprintf_r+0x18>
 8006824:	6983      	ldr	r3, [r0, #24]
 8006826:	b90b      	cbnz	r3, 800682c <_vfiprintf_r+0x18>
 8006828:	f000 fb14 	bl	8006e54 <__sinit>
 800682c:	4b89      	ldr	r3, [pc, #548]	; (8006a54 <_vfiprintf_r+0x240>)
 800682e:	429d      	cmp	r5, r3
 8006830:	d11b      	bne.n	800686a <_vfiprintf_r+0x56>
 8006832:	6875      	ldr	r5, [r6, #4]
 8006834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006836:	07d9      	lsls	r1, r3, #31
 8006838:	d405      	bmi.n	8006846 <_vfiprintf_r+0x32>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	059a      	lsls	r2, r3, #22
 800683e:	d402      	bmi.n	8006846 <_vfiprintf_r+0x32>
 8006840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006842:	f000 fba5 	bl	8006f90 <__retarget_lock_acquire_recursive>
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	071b      	lsls	r3, r3, #28
 800684a:	d501      	bpl.n	8006850 <_vfiprintf_r+0x3c>
 800684c:	692b      	ldr	r3, [r5, #16]
 800684e:	b9eb      	cbnz	r3, 800688c <_vfiprintf_r+0x78>
 8006850:	4629      	mov	r1, r5
 8006852:	4630      	mov	r0, r6
 8006854:	f000 f96e 	bl	8006b34 <__swsetup_r>
 8006858:	b1c0      	cbz	r0, 800688c <_vfiprintf_r+0x78>
 800685a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800685c:	07dc      	lsls	r4, r3, #31
 800685e:	d50e      	bpl.n	800687e <_vfiprintf_r+0x6a>
 8006860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006864:	b01d      	add	sp, #116	; 0x74
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686a:	4b7b      	ldr	r3, [pc, #492]	; (8006a58 <_vfiprintf_r+0x244>)
 800686c:	429d      	cmp	r5, r3
 800686e:	d101      	bne.n	8006874 <_vfiprintf_r+0x60>
 8006870:	68b5      	ldr	r5, [r6, #8]
 8006872:	e7df      	b.n	8006834 <_vfiprintf_r+0x20>
 8006874:	4b79      	ldr	r3, [pc, #484]	; (8006a5c <_vfiprintf_r+0x248>)
 8006876:	429d      	cmp	r5, r3
 8006878:	bf08      	it	eq
 800687a:	68f5      	ldreq	r5, [r6, #12]
 800687c:	e7da      	b.n	8006834 <_vfiprintf_r+0x20>
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	0598      	lsls	r0, r3, #22
 8006882:	d4ed      	bmi.n	8006860 <_vfiprintf_r+0x4c>
 8006884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006886:	f000 fb84 	bl	8006f92 <__retarget_lock_release_recursive>
 800688a:	e7e9      	b.n	8006860 <_vfiprintf_r+0x4c>
 800688c:	2300      	movs	r3, #0
 800688e:	9309      	str	r3, [sp, #36]	; 0x24
 8006890:	2320      	movs	r3, #32
 8006892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006896:	2330      	movs	r3, #48	; 0x30
 8006898:	f04f 0901 	mov.w	r9, #1
 800689c:	f8cd 800c 	str.w	r8, [sp, #12]
 80068a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006a60 <_vfiprintf_r+0x24c>
 80068a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068a8:	4623      	mov	r3, r4
 80068aa:	469a      	mov	sl, r3
 80068ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068b0:	b10a      	cbz	r2, 80068b6 <_vfiprintf_r+0xa2>
 80068b2:	2a25      	cmp	r2, #37	; 0x25
 80068b4:	d1f9      	bne.n	80068aa <_vfiprintf_r+0x96>
 80068b6:	ebba 0b04 	subs.w	fp, sl, r4
 80068ba:	d00b      	beq.n	80068d4 <_vfiprintf_r+0xc0>
 80068bc:	465b      	mov	r3, fp
 80068be:	4622      	mov	r2, r4
 80068c0:	4629      	mov	r1, r5
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7ff ff93 	bl	80067ee <__sfputs_r>
 80068c8:	3001      	adds	r0, #1
 80068ca:	f000 80aa 	beq.w	8006a22 <_vfiprintf_r+0x20e>
 80068ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068d0:	445a      	add	r2, fp
 80068d2:	9209      	str	r2, [sp, #36]	; 0x24
 80068d4:	f89a 3000 	ldrb.w	r3, [sl]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80a2 	beq.w	8006a22 <_vfiprintf_r+0x20e>
 80068de:	2300      	movs	r3, #0
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e8:	f10a 0a01 	add.w	sl, sl, #1
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068f4:	931a      	str	r3, [sp, #104]	; 0x68
 80068f6:	4654      	mov	r4, sl
 80068f8:	2205      	movs	r2, #5
 80068fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fe:	4858      	ldr	r0, [pc, #352]	; (8006a60 <_vfiprintf_r+0x24c>)
 8006900:	f7ff f914 	bl	8005b2c <memchr>
 8006904:	9a04      	ldr	r2, [sp, #16]
 8006906:	b9d8      	cbnz	r0, 8006940 <_vfiprintf_r+0x12c>
 8006908:	06d1      	lsls	r1, r2, #27
 800690a:	bf44      	itt	mi
 800690c:	2320      	movmi	r3, #32
 800690e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006912:	0713      	lsls	r3, r2, #28
 8006914:	bf44      	itt	mi
 8006916:	232b      	movmi	r3, #43	; 0x2b
 8006918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800691c:	f89a 3000 	ldrb.w	r3, [sl]
 8006920:	2b2a      	cmp	r3, #42	; 0x2a
 8006922:	d015      	beq.n	8006950 <_vfiprintf_r+0x13c>
 8006924:	4654      	mov	r4, sl
 8006926:	2000      	movs	r0, #0
 8006928:	f04f 0c0a 	mov.w	ip, #10
 800692c:	9a07      	ldr	r2, [sp, #28]
 800692e:	4621      	mov	r1, r4
 8006930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006934:	3b30      	subs	r3, #48	; 0x30
 8006936:	2b09      	cmp	r3, #9
 8006938:	d94e      	bls.n	80069d8 <_vfiprintf_r+0x1c4>
 800693a:	b1b0      	cbz	r0, 800696a <_vfiprintf_r+0x156>
 800693c:	9207      	str	r2, [sp, #28]
 800693e:	e014      	b.n	800696a <_vfiprintf_r+0x156>
 8006940:	eba0 0308 	sub.w	r3, r0, r8
 8006944:	fa09 f303 	lsl.w	r3, r9, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	46a2      	mov	sl, r4
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	e7d2      	b.n	80068f6 <_vfiprintf_r+0xe2>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	1d19      	adds	r1, r3, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	9103      	str	r1, [sp, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	bfbb      	ittet	lt
 800695c:	425b      	neglt	r3, r3
 800695e:	f042 0202 	orrlt.w	r2, r2, #2
 8006962:	9307      	strge	r3, [sp, #28]
 8006964:	9307      	strlt	r3, [sp, #28]
 8006966:	bfb8      	it	lt
 8006968:	9204      	strlt	r2, [sp, #16]
 800696a:	7823      	ldrb	r3, [r4, #0]
 800696c:	2b2e      	cmp	r3, #46	; 0x2e
 800696e:	d10c      	bne.n	800698a <_vfiprintf_r+0x176>
 8006970:	7863      	ldrb	r3, [r4, #1]
 8006972:	2b2a      	cmp	r3, #42	; 0x2a
 8006974:	d135      	bne.n	80069e2 <_vfiprintf_r+0x1ce>
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	3402      	adds	r4, #2
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	9203      	str	r2, [sp, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	bfb8      	it	lt
 8006984:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006988:	9305      	str	r3, [sp, #20]
 800698a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a70 <_vfiprintf_r+0x25c>
 800698e:	2203      	movs	r2, #3
 8006990:	4650      	mov	r0, sl
 8006992:	7821      	ldrb	r1, [r4, #0]
 8006994:	f7ff f8ca 	bl	8005b2c <memchr>
 8006998:	b140      	cbz	r0, 80069ac <_vfiprintf_r+0x198>
 800699a:	2340      	movs	r3, #64	; 0x40
 800699c:	eba0 000a 	sub.w	r0, r0, sl
 80069a0:	fa03 f000 	lsl.w	r0, r3, r0
 80069a4:	9b04      	ldr	r3, [sp, #16]
 80069a6:	3401      	adds	r4, #1
 80069a8:	4303      	orrs	r3, r0
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b0:	2206      	movs	r2, #6
 80069b2:	482c      	ldr	r0, [pc, #176]	; (8006a64 <_vfiprintf_r+0x250>)
 80069b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b8:	f7ff f8b8 	bl	8005b2c <memchr>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d03f      	beq.n	8006a40 <_vfiprintf_r+0x22c>
 80069c0:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <_vfiprintf_r+0x254>)
 80069c2:	bb1b      	cbnz	r3, 8006a0c <_vfiprintf_r+0x1f8>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	3307      	adds	r3, #7
 80069c8:	f023 0307 	bic.w	r3, r3, #7
 80069cc:	3308      	adds	r3, #8
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	443b      	add	r3, r7
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	e767      	b.n	80068a8 <_vfiprintf_r+0x94>
 80069d8:	460c      	mov	r4, r1
 80069da:	2001      	movs	r0, #1
 80069dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80069e0:	e7a5      	b.n	800692e <_vfiprintf_r+0x11a>
 80069e2:	2300      	movs	r3, #0
 80069e4:	f04f 0c0a 	mov.w	ip, #10
 80069e8:	4619      	mov	r1, r3
 80069ea:	3401      	adds	r4, #1
 80069ec:	9305      	str	r3, [sp, #20]
 80069ee:	4620      	mov	r0, r4
 80069f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f4:	3a30      	subs	r2, #48	; 0x30
 80069f6:	2a09      	cmp	r2, #9
 80069f8:	d903      	bls.n	8006a02 <_vfiprintf_r+0x1ee>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0c5      	beq.n	800698a <_vfiprintf_r+0x176>
 80069fe:	9105      	str	r1, [sp, #20]
 8006a00:	e7c3      	b.n	800698a <_vfiprintf_r+0x176>
 8006a02:	4604      	mov	r4, r0
 8006a04:	2301      	movs	r3, #1
 8006a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a0a:	e7f0      	b.n	80069ee <_vfiprintf_r+0x1da>
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4630      	mov	r0, r6
 8006a14:	4b15      	ldr	r3, [pc, #84]	; (8006a6c <_vfiprintf_r+0x258>)
 8006a16:	a904      	add	r1, sp, #16
 8006a18:	f7fd fe04 	bl	8004624 <_printf_float>
 8006a1c:	4607      	mov	r7, r0
 8006a1e:	1c78      	adds	r0, r7, #1
 8006a20:	d1d6      	bne.n	80069d0 <_vfiprintf_r+0x1bc>
 8006a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	d405      	bmi.n	8006a34 <_vfiprintf_r+0x220>
 8006a28:	89ab      	ldrh	r3, [r5, #12]
 8006a2a:	059a      	lsls	r2, r3, #22
 8006a2c:	d402      	bmi.n	8006a34 <_vfiprintf_r+0x220>
 8006a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a30:	f000 faaf 	bl	8006f92 <__retarget_lock_release_recursive>
 8006a34:	89ab      	ldrh	r3, [r5, #12]
 8006a36:	065b      	lsls	r3, r3, #25
 8006a38:	f53f af12 	bmi.w	8006860 <_vfiprintf_r+0x4c>
 8006a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a3e:	e711      	b.n	8006864 <_vfiprintf_r+0x50>
 8006a40:	ab03      	add	r3, sp, #12
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	462a      	mov	r2, r5
 8006a46:	4630      	mov	r0, r6
 8006a48:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <_vfiprintf_r+0x258>)
 8006a4a:	a904      	add	r1, sp, #16
 8006a4c:	f7fe f886 	bl	8004b5c <_printf_i>
 8006a50:	e7e4      	b.n	8006a1c <_vfiprintf_r+0x208>
 8006a52:	bf00      	nop
 8006a54:	0800767c 	.word	0x0800767c
 8006a58:	0800769c 	.word	0x0800769c
 8006a5c:	0800765c 	.word	0x0800765c
 8006a60:	08007504 	.word	0x08007504
 8006a64:	0800750e 	.word	0x0800750e
 8006a68:	08004625 	.word	0x08004625
 8006a6c:	080067ef 	.word	0x080067ef
 8006a70:	0800750a 	.word	0x0800750a

08006a74 <__swbuf_r>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	460e      	mov	r6, r1
 8006a78:	4614      	mov	r4, r2
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	b118      	cbz	r0, 8006a86 <__swbuf_r+0x12>
 8006a7e:	6983      	ldr	r3, [r0, #24]
 8006a80:	b90b      	cbnz	r3, 8006a86 <__swbuf_r+0x12>
 8006a82:	f000 f9e7 	bl	8006e54 <__sinit>
 8006a86:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <__swbuf_r+0x98>)
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	d12b      	bne.n	8006ae4 <__swbuf_r+0x70>
 8006a8c:	686c      	ldr	r4, [r5, #4]
 8006a8e:	69a3      	ldr	r3, [r4, #24]
 8006a90:	60a3      	str	r3, [r4, #8]
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	071a      	lsls	r2, r3, #28
 8006a96:	d52f      	bpl.n	8006af8 <__swbuf_r+0x84>
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	b36b      	cbz	r3, 8006af8 <__swbuf_r+0x84>
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	b2f6      	uxtb	r6, r6
 8006aa2:	1ac0      	subs	r0, r0, r3
 8006aa4:	6963      	ldr	r3, [r4, #20]
 8006aa6:	4637      	mov	r7, r6
 8006aa8:	4283      	cmp	r3, r0
 8006aaa:	dc04      	bgt.n	8006ab6 <__swbuf_r+0x42>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f93c 	bl	8006d2c <_fflush_r>
 8006ab4:	bb30      	cbnz	r0, 8006b04 <__swbuf_r+0x90>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	3001      	adds	r0, #1
 8006aba:	3b01      	subs	r3, #1
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	701e      	strb	r6, [r3, #0]
 8006ac6:	6963      	ldr	r3, [r4, #20]
 8006ac8:	4283      	cmp	r3, r0
 8006aca:	d004      	beq.n	8006ad6 <__swbuf_r+0x62>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	07db      	lsls	r3, r3, #31
 8006ad0:	d506      	bpl.n	8006ae0 <__swbuf_r+0x6c>
 8006ad2:	2e0a      	cmp	r6, #10
 8006ad4:	d104      	bne.n	8006ae0 <__swbuf_r+0x6c>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f927 	bl	8006d2c <_fflush_r>
 8006ade:	b988      	cbnz	r0, 8006b04 <__swbuf_r+0x90>
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <__swbuf_r+0x9c>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <__swbuf_r+0x7a>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7cf      	b.n	8006a8e <__swbuf_r+0x1a>
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <__swbuf_r+0xa0>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7ca      	b.n	8006a8e <__swbuf_r+0x1a>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f81a 	bl	8006b34 <__swsetup_r>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0cb      	beq.n	8006a9c <__swbuf_r+0x28>
 8006b04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006b08:	e7ea      	b.n	8006ae0 <__swbuf_r+0x6c>
 8006b0a:	bf00      	nop
 8006b0c:	0800767c 	.word	0x0800767c
 8006b10:	0800769c 	.word	0x0800769c
 8006b14:	0800765c 	.word	0x0800765c

08006b18 <__ascii_wctomb>:
 8006b18:	4603      	mov	r3, r0
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	b141      	cbz	r1, 8006b30 <__ascii_wctomb+0x18>
 8006b1e:	2aff      	cmp	r2, #255	; 0xff
 8006b20:	d904      	bls.n	8006b2c <__ascii_wctomb+0x14>
 8006b22:	228a      	movs	r2, #138	; 0x8a
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	4770      	bx	lr
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	700a      	strb	r2, [r1, #0]
 8006b30:	4770      	bx	lr
	...

08006b34 <__swsetup_r>:
 8006b34:	4b32      	ldr	r3, [pc, #200]	; (8006c00 <__swsetup_r+0xcc>)
 8006b36:	b570      	push	{r4, r5, r6, lr}
 8006b38:	681d      	ldr	r5, [r3, #0]
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	b125      	cbz	r5, 8006b4a <__swsetup_r+0x16>
 8006b40:	69ab      	ldr	r3, [r5, #24]
 8006b42:	b913      	cbnz	r3, 8006b4a <__swsetup_r+0x16>
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 f985 	bl	8006e54 <__sinit>
 8006b4a:	4b2e      	ldr	r3, [pc, #184]	; (8006c04 <__swsetup_r+0xd0>)
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	d10f      	bne.n	8006b70 <__swsetup_r+0x3c>
 8006b50:	686c      	ldr	r4, [r5, #4]
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b58:	0719      	lsls	r1, r3, #28
 8006b5a:	d42c      	bmi.n	8006bb6 <__swsetup_r+0x82>
 8006b5c:	06dd      	lsls	r5, r3, #27
 8006b5e:	d411      	bmi.n	8006b84 <__swsetup_r+0x50>
 8006b60:	2309      	movs	r3, #9
 8006b62:	6033      	str	r3, [r6, #0]
 8006b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	e03e      	b.n	8006bee <__swsetup_r+0xba>
 8006b70:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <__swsetup_r+0xd4>)
 8006b72:	429c      	cmp	r4, r3
 8006b74:	d101      	bne.n	8006b7a <__swsetup_r+0x46>
 8006b76:	68ac      	ldr	r4, [r5, #8]
 8006b78:	e7eb      	b.n	8006b52 <__swsetup_r+0x1e>
 8006b7a:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <__swsetup_r+0xd8>)
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	bf08      	it	eq
 8006b80:	68ec      	ldreq	r4, [r5, #12]
 8006b82:	e7e6      	b.n	8006b52 <__swsetup_r+0x1e>
 8006b84:	0758      	lsls	r0, r3, #29
 8006b86:	d512      	bpl.n	8006bae <__swsetup_r+0x7a>
 8006b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b8a:	b141      	cbz	r1, 8006b9e <__swsetup_r+0x6a>
 8006b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d002      	beq.n	8006b9a <__swsetup_r+0x66>
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff fb75 	bl	8006284 <_free_r>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6063      	str	r3, [r4, #4]
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	f043 0308 	orr.w	r3, r3, #8
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	b94b      	cbnz	r3, 8006bce <__swsetup_r+0x9a>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc4:	d003      	beq.n	8006bce <__swsetup_r+0x9a>
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 fa07 	bl	8006fdc <__smakebuf_r>
 8006bce:	89a0      	ldrh	r0, [r4, #12]
 8006bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bd4:	f010 0301 	ands.w	r3, r0, #1
 8006bd8:	d00a      	beq.n	8006bf0 <__swsetup_r+0xbc>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60a3      	str	r3, [r4, #8]
 8006bde:	6963      	ldr	r3, [r4, #20]
 8006be0:	425b      	negs	r3, r3
 8006be2:	61a3      	str	r3, [r4, #24]
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	b943      	cbnz	r3, 8006bfa <__swsetup_r+0xc6>
 8006be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bec:	d1ba      	bne.n	8006b64 <__swsetup_r+0x30>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	0781      	lsls	r1, r0, #30
 8006bf2:	bf58      	it	pl
 8006bf4:	6963      	ldrpl	r3, [r4, #20]
 8006bf6:	60a3      	str	r3, [r4, #8]
 8006bf8:	e7f4      	b.n	8006be4 <__swsetup_r+0xb0>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e7f7      	b.n	8006bee <__swsetup_r+0xba>
 8006bfe:	bf00      	nop
 8006c00:	20000010 	.word	0x20000010
 8006c04:	0800767c 	.word	0x0800767c
 8006c08:	0800769c 	.word	0x0800769c
 8006c0c:	0800765c 	.word	0x0800765c

08006c10 <abort>:
 8006c10:	2006      	movs	r0, #6
 8006c12:	b508      	push	{r3, lr}
 8006c14:	f000 fa52 	bl	80070bc <raise>
 8006c18:	2001      	movs	r0, #1
 8006c1a:	f7fa f956 	bl	8000eca <_exit>
	...

08006c20 <__sflush_r>:
 8006c20:	898a      	ldrh	r2, [r1, #12]
 8006c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c26:	4605      	mov	r5, r0
 8006c28:	0710      	lsls	r0, r2, #28
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	d458      	bmi.n	8006ce0 <__sflush_r+0xc0>
 8006c2e:	684b      	ldr	r3, [r1, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	dc05      	bgt.n	8006c40 <__sflush_r+0x20>
 8006c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dc02      	bgt.n	8006c40 <__sflush_r+0x20>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d0f9      	beq.n	8006c3a <__sflush_r+0x1a>
 8006c46:	2300      	movs	r3, #0
 8006c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c4c:	682f      	ldr	r7, [r5, #0]
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	d032      	beq.n	8006cb8 <__sflush_r+0x98>
 8006c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	075a      	lsls	r2, r3, #29
 8006c58:	d505      	bpl.n	8006c66 <__sflush_r+0x46>
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	1ac0      	subs	r0, r0, r3
 8006c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c60:	b10b      	cbz	r3, 8006c66 <__sflush_r+0x46>
 8006c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c64:	1ac0      	subs	r0, r0, r3
 8006c66:	2300      	movs	r3, #0
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	6a21      	ldr	r1, [r4, #32]
 8006c70:	47b0      	blx	r6
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	d106      	bne.n	8006c86 <__sflush_r+0x66>
 8006c78:	6829      	ldr	r1, [r5, #0]
 8006c7a:	291d      	cmp	r1, #29
 8006c7c:	d82c      	bhi.n	8006cd8 <__sflush_r+0xb8>
 8006c7e:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <__sflush_r+0x108>)
 8006c80:	40ca      	lsrs	r2, r1
 8006c82:	07d6      	lsls	r6, r2, #31
 8006c84:	d528      	bpl.n	8006cd8 <__sflush_r+0xb8>
 8006c86:	2200      	movs	r2, #0
 8006c88:	6062      	str	r2, [r4, #4]
 8006c8a:	6922      	ldr	r2, [r4, #16]
 8006c8c:	04d9      	lsls	r1, r3, #19
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	d504      	bpl.n	8006c9c <__sflush_r+0x7c>
 8006c92:	1c42      	adds	r2, r0, #1
 8006c94:	d101      	bne.n	8006c9a <__sflush_r+0x7a>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	b903      	cbnz	r3, 8006c9c <__sflush_r+0x7c>
 8006c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c9e:	602f      	str	r7, [r5, #0]
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	d0ca      	beq.n	8006c3a <__sflush_r+0x1a>
 8006ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d002      	beq.n	8006cb2 <__sflush_r+0x92>
 8006cac:	4628      	mov	r0, r5
 8006cae:	f7ff fae9 	bl	8006284 <_free_r>
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	6360      	str	r0, [r4, #52]	; 0x34
 8006cb6:	e7c1      	b.n	8006c3c <__sflush_r+0x1c>
 8006cb8:	6a21      	ldr	r1, [r4, #32]
 8006cba:	2301      	movs	r3, #1
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b0      	blx	r6
 8006cc0:	1c41      	adds	r1, r0, #1
 8006cc2:	d1c7      	bne.n	8006c54 <__sflush_r+0x34>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0c4      	beq.n	8006c54 <__sflush_r+0x34>
 8006cca:	2b1d      	cmp	r3, #29
 8006ccc:	d001      	beq.n	8006cd2 <__sflush_r+0xb2>
 8006cce:	2b16      	cmp	r3, #22
 8006cd0:	d101      	bne.n	8006cd6 <__sflush_r+0xb6>
 8006cd2:	602f      	str	r7, [r5, #0]
 8006cd4:	e7b1      	b.n	8006c3a <__sflush_r+0x1a>
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	e7ad      	b.n	8006c3c <__sflush_r+0x1c>
 8006ce0:	690f      	ldr	r7, [r1, #16]
 8006ce2:	2f00      	cmp	r7, #0
 8006ce4:	d0a9      	beq.n	8006c3a <__sflush_r+0x1a>
 8006ce6:	0793      	lsls	r3, r2, #30
 8006ce8:	bf18      	it	ne
 8006cea:	2300      	movne	r3, #0
 8006cec:	680e      	ldr	r6, [r1, #0]
 8006cee:	bf08      	it	eq
 8006cf0:	694b      	ldreq	r3, [r1, #20]
 8006cf2:	eba6 0807 	sub.w	r8, r6, r7
 8006cf6:	600f      	str	r7, [r1, #0]
 8006cf8:	608b      	str	r3, [r1, #8]
 8006cfa:	f1b8 0f00 	cmp.w	r8, #0
 8006cfe:	dd9c      	ble.n	8006c3a <__sflush_r+0x1a>
 8006d00:	4643      	mov	r3, r8
 8006d02:	463a      	mov	r2, r7
 8006d04:	4628      	mov	r0, r5
 8006d06:	6a21      	ldr	r1, [r4, #32]
 8006d08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d0a:	47b0      	blx	r6
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	dc06      	bgt.n	8006d1e <__sflush_r+0xfe>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	e78e      	b.n	8006c3c <__sflush_r+0x1c>
 8006d1e:	4407      	add	r7, r0
 8006d20:	eba8 0800 	sub.w	r8, r8, r0
 8006d24:	e7e9      	b.n	8006cfa <__sflush_r+0xda>
 8006d26:	bf00      	nop
 8006d28:	20400001 	.word	0x20400001

08006d2c <_fflush_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	690b      	ldr	r3, [r1, #16]
 8006d30:	4605      	mov	r5, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	b913      	cbnz	r3, 8006d3c <_fflush_r+0x10>
 8006d36:	2500      	movs	r5, #0
 8006d38:	4628      	mov	r0, r5
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	b118      	cbz	r0, 8006d46 <_fflush_r+0x1a>
 8006d3e:	6983      	ldr	r3, [r0, #24]
 8006d40:	b90b      	cbnz	r3, 8006d46 <_fflush_r+0x1a>
 8006d42:	f000 f887 	bl	8006e54 <__sinit>
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <_fflush_r+0x6c>)
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	d11b      	bne.n	8006d84 <_fflush_r+0x58>
 8006d4c:	686c      	ldr	r4, [r5, #4]
 8006d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0ef      	beq.n	8006d36 <_fflush_r+0xa>
 8006d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d58:	07d0      	lsls	r0, r2, #31
 8006d5a:	d404      	bmi.n	8006d66 <_fflush_r+0x3a>
 8006d5c:	0599      	lsls	r1, r3, #22
 8006d5e:	d402      	bmi.n	8006d66 <_fflush_r+0x3a>
 8006d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d62:	f000 f915 	bl	8006f90 <__retarget_lock_acquire_recursive>
 8006d66:	4628      	mov	r0, r5
 8006d68:	4621      	mov	r1, r4
 8006d6a:	f7ff ff59 	bl	8006c20 <__sflush_r>
 8006d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d70:	4605      	mov	r5, r0
 8006d72:	07da      	lsls	r2, r3, #31
 8006d74:	d4e0      	bmi.n	8006d38 <_fflush_r+0xc>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	059b      	lsls	r3, r3, #22
 8006d7a:	d4dd      	bmi.n	8006d38 <_fflush_r+0xc>
 8006d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d7e:	f000 f908 	bl	8006f92 <__retarget_lock_release_recursive>
 8006d82:	e7d9      	b.n	8006d38 <_fflush_r+0xc>
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <_fflush_r+0x70>)
 8006d86:	429c      	cmp	r4, r3
 8006d88:	d101      	bne.n	8006d8e <_fflush_r+0x62>
 8006d8a:	68ac      	ldr	r4, [r5, #8]
 8006d8c:	e7df      	b.n	8006d4e <_fflush_r+0x22>
 8006d8e:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <_fflush_r+0x74>)
 8006d90:	429c      	cmp	r4, r3
 8006d92:	bf08      	it	eq
 8006d94:	68ec      	ldreq	r4, [r5, #12]
 8006d96:	e7da      	b.n	8006d4e <_fflush_r+0x22>
 8006d98:	0800767c 	.word	0x0800767c
 8006d9c:	0800769c 	.word	0x0800769c
 8006da0:	0800765c 	.word	0x0800765c

08006da4 <std>:
 8006da4:	2300      	movs	r3, #0
 8006da6:	b510      	push	{r4, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	e9c0 3300 	strd	r3, r3, [r0]
 8006dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006db2:	6083      	str	r3, [r0, #8]
 8006db4:	8181      	strh	r1, [r0, #12]
 8006db6:	6643      	str	r3, [r0, #100]	; 0x64
 8006db8:	81c2      	strh	r2, [r0, #14]
 8006dba:	6183      	str	r3, [r0, #24]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	305c      	adds	r0, #92	; 0x5c
 8006dc2:	f7fd fb89 	bl	80044d8 <memset>
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <std+0x38>)
 8006dc8:	6224      	str	r4, [r4, #32]
 8006dca:	6263      	str	r3, [r4, #36]	; 0x24
 8006dcc:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <std+0x3c>)
 8006dce:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dd0:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <std+0x40>)
 8006dd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dd4:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <std+0x44>)
 8006dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	bf00      	nop
 8006ddc:	080070f5 	.word	0x080070f5
 8006de0:	08007117 	.word	0x08007117
 8006de4:	0800714f 	.word	0x0800714f
 8006de8:	08007173 	.word	0x08007173

08006dec <_cleanup_r>:
 8006dec:	4901      	ldr	r1, [pc, #4]	; (8006df4 <_cleanup_r+0x8>)
 8006dee:	f000 b8af 	b.w	8006f50 <_fwalk_reent>
 8006df2:	bf00      	nop
 8006df4:	08006d2d 	.word	0x08006d2d

08006df8 <__sfmoreglue>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	2568      	movs	r5, #104	; 0x68
 8006dfc:	1e4a      	subs	r2, r1, #1
 8006dfe:	4355      	muls	r5, r2
 8006e00:	460e      	mov	r6, r1
 8006e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e06:	f7ff fa89 	bl	800631c <_malloc_r>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	b140      	cbz	r0, 8006e20 <__sfmoreglue+0x28>
 8006e0e:	2100      	movs	r1, #0
 8006e10:	e9c0 1600 	strd	r1, r6, [r0]
 8006e14:	300c      	adds	r0, #12
 8006e16:	60a0      	str	r0, [r4, #8]
 8006e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e1c:	f7fd fb5c 	bl	80044d8 <memset>
 8006e20:	4620      	mov	r0, r4
 8006e22:	bd70      	pop	{r4, r5, r6, pc}

08006e24 <__sfp_lock_acquire>:
 8006e24:	4801      	ldr	r0, [pc, #4]	; (8006e2c <__sfp_lock_acquire+0x8>)
 8006e26:	f000 b8b3 	b.w	8006f90 <__retarget_lock_acquire_recursive>
 8006e2a:	bf00      	nop
 8006e2c:	20000308 	.word	0x20000308

08006e30 <__sfp_lock_release>:
 8006e30:	4801      	ldr	r0, [pc, #4]	; (8006e38 <__sfp_lock_release+0x8>)
 8006e32:	f000 b8ae 	b.w	8006f92 <__retarget_lock_release_recursive>
 8006e36:	bf00      	nop
 8006e38:	20000308 	.word	0x20000308

08006e3c <__sinit_lock_acquire>:
 8006e3c:	4801      	ldr	r0, [pc, #4]	; (8006e44 <__sinit_lock_acquire+0x8>)
 8006e3e:	f000 b8a7 	b.w	8006f90 <__retarget_lock_acquire_recursive>
 8006e42:	bf00      	nop
 8006e44:	20000303 	.word	0x20000303

08006e48 <__sinit_lock_release>:
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <__sinit_lock_release+0x8>)
 8006e4a:	f000 b8a2 	b.w	8006f92 <__retarget_lock_release_recursive>
 8006e4e:	bf00      	nop
 8006e50:	20000303 	.word	0x20000303

08006e54 <__sinit>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	4604      	mov	r4, r0
 8006e58:	f7ff fff0 	bl	8006e3c <__sinit_lock_acquire>
 8006e5c:	69a3      	ldr	r3, [r4, #24]
 8006e5e:	b11b      	cbz	r3, 8006e68 <__sinit+0x14>
 8006e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e64:	f7ff bff0 	b.w	8006e48 <__sinit_lock_release>
 8006e68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e6e:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <__sinit+0x68>)
 8006e70:	4a13      	ldr	r2, [pc, #76]	; (8006ec0 <__sinit+0x6c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e76:	42a3      	cmp	r3, r4
 8006e78:	bf08      	it	eq
 8006e7a:	2301      	moveq	r3, #1
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	bf08      	it	eq
 8006e80:	61a3      	streq	r3, [r4, #24]
 8006e82:	f000 f81f 	bl	8006ec4 <__sfp>
 8006e86:	6060      	str	r0, [r4, #4]
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 f81b 	bl	8006ec4 <__sfp>
 8006e8e:	60a0      	str	r0, [r4, #8]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 f817 	bl	8006ec4 <__sfp>
 8006e96:	2200      	movs	r2, #0
 8006e98:	2104      	movs	r1, #4
 8006e9a:	60e0      	str	r0, [r4, #12]
 8006e9c:	6860      	ldr	r0, [r4, #4]
 8006e9e:	f7ff ff81 	bl	8006da4 <std>
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	2109      	movs	r1, #9
 8006ea6:	68a0      	ldr	r0, [r4, #8]
 8006ea8:	f7ff ff7c 	bl	8006da4 <std>
 8006eac:	2202      	movs	r2, #2
 8006eae:	2112      	movs	r1, #18
 8006eb0:	68e0      	ldr	r0, [r4, #12]
 8006eb2:	f7ff ff77 	bl	8006da4 <std>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	61a3      	str	r3, [r4, #24]
 8006eba:	e7d1      	b.n	8006e60 <__sinit+0xc>
 8006ebc:	080072d8 	.word	0x080072d8
 8006ec0:	08006ded 	.word	0x08006ded

08006ec4 <__sfp>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	f7ff ffac 	bl	8006e24 <__sfp_lock_acquire>
 8006ecc:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <__sfp+0x84>)
 8006ece:	681e      	ldr	r6, [r3, #0]
 8006ed0:	69b3      	ldr	r3, [r6, #24]
 8006ed2:	b913      	cbnz	r3, 8006eda <__sfp+0x16>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f7ff ffbd 	bl	8006e54 <__sinit>
 8006eda:	3648      	adds	r6, #72	; 0x48
 8006edc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	d503      	bpl.n	8006eec <__sfp+0x28>
 8006ee4:	6833      	ldr	r3, [r6, #0]
 8006ee6:	b30b      	cbz	r3, 8006f2c <__sfp+0x68>
 8006ee8:	6836      	ldr	r6, [r6, #0]
 8006eea:	e7f7      	b.n	8006edc <__sfp+0x18>
 8006eec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ef0:	b9d5      	cbnz	r5, 8006f28 <__sfp+0x64>
 8006ef2:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <__sfp+0x88>)
 8006ef4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ef8:	60e3      	str	r3, [r4, #12]
 8006efa:	6665      	str	r5, [r4, #100]	; 0x64
 8006efc:	f000 f847 	bl	8006f8e <__retarget_lock_init_recursive>
 8006f00:	f7ff ff96 	bl	8006e30 <__sfp_lock_release>
 8006f04:	2208      	movs	r2, #8
 8006f06:	4629      	mov	r1, r5
 8006f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f10:	6025      	str	r5, [r4, #0]
 8006f12:	61a5      	str	r5, [r4, #24]
 8006f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f18:	f7fd fade 	bl	80044d8 <memset>
 8006f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f24:	4620      	mov	r0, r4
 8006f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f28:	3468      	adds	r4, #104	; 0x68
 8006f2a:	e7d9      	b.n	8006ee0 <__sfp+0x1c>
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f7ff ff62 	bl	8006df8 <__sfmoreglue>
 8006f34:	4604      	mov	r4, r0
 8006f36:	6030      	str	r0, [r6, #0]
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d1d5      	bne.n	8006ee8 <__sfp+0x24>
 8006f3c:	f7ff ff78 	bl	8006e30 <__sfp_lock_release>
 8006f40:	230c      	movs	r3, #12
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	e7ee      	b.n	8006f24 <__sfp+0x60>
 8006f46:	bf00      	nop
 8006f48:	080072d8 	.word	0x080072d8
 8006f4c:	ffff0001 	.word	0xffff0001

08006f50 <_fwalk_reent>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	4606      	mov	r6, r0
 8006f56:	4688      	mov	r8, r1
 8006f58:	2700      	movs	r7, #0
 8006f5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f62:	f1b9 0901 	subs.w	r9, r9, #1
 8006f66:	d505      	bpl.n	8006f74 <_fwalk_reent+0x24>
 8006f68:	6824      	ldr	r4, [r4, #0]
 8006f6a:	2c00      	cmp	r4, #0
 8006f6c:	d1f7      	bne.n	8006f5e <_fwalk_reent+0xe>
 8006f6e:	4638      	mov	r0, r7
 8006f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f74:	89ab      	ldrh	r3, [r5, #12]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d907      	bls.n	8006f8a <_fwalk_reent+0x3a>
 8006f7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	d003      	beq.n	8006f8a <_fwalk_reent+0x3a>
 8006f82:	4629      	mov	r1, r5
 8006f84:	4630      	mov	r0, r6
 8006f86:	47c0      	blx	r8
 8006f88:	4307      	orrs	r7, r0
 8006f8a:	3568      	adds	r5, #104	; 0x68
 8006f8c:	e7e9      	b.n	8006f62 <_fwalk_reent+0x12>

08006f8e <__retarget_lock_init_recursive>:
 8006f8e:	4770      	bx	lr

08006f90 <__retarget_lock_acquire_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <__retarget_lock_release_recursive>:
 8006f92:	4770      	bx	lr

08006f94 <__swhatbuf_r>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	460e      	mov	r6, r1
 8006f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	461d      	mov	r5, r3
 8006fa2:	b096      	sub	sp, #88	; 0x58
 8006fa4:	da07      	bge.n	8006fb6 <__swhatbuf_r+0x22>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	89b3      	ldrh	r3, [r6, #12]
 8006fac:	061a      	lsls	r2, r3, #24
 8006fae:	d410      	bmi.n	8006fd2 <__swhatbuf_r+0x3e>
 8006fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb4:	e00e      	b.n	8006fd4 <__swhatbuf_r+0x40>
 8006fb6:	466a      	mov	r2, sp
 8006fb8:	f000 f902 	bl	80071c0 <_fstat_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	dbf2      	blt.n	8006fa6 <__swhatbuf_r+0x12>
 8006fc0:	9a01      	ldr	r2, [sp, #4]
 8006fc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fca:	425a      	negs	r2, r3
 8006fcc:	415a      	adcs	r2, r3
 8006fce:	602a      	str	r2, [r5, #0]
 8006fd0:	e7ee      	b.n	8006fb0 <__swhatbuf_r+0x1c>
 8006fd2:	2340      	movs	r3, #64	; 0x40
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	b016      	add	sp, #88	; 0x58
 8006fda:	bd70      	pop	{r4, r5, r6, pc}

08006fdc <__smakebuf_r>:
 8006fdc:	898b      	ldrh	r3, [r1, #12]
 8006fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fe0:	079d      	lsls	r5, r3, #30
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	d507      	bpl.n	8006ff8 <__smakebuf_r+0x1c>
 8006fe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	6163      	str	r3, [r4, #20]
 8006ff4:	b002      	add	sp, #8
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	466a      	mov	r2, sp
 8006ffa:	ab01      	add	r3, sp, #4
 8006ffc:	f7ff ffca 	bl	8006f94 <__swhatbuf_r>
 8007000:	9900      	ldr	r1, [sp, #0]
 8007002:	4605      	mov	r5, r0
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff f989 	bl	800631c <_malloc_r>
 800700a:	b948      	cbnz	r0, 8007020 <__smakebuf_r+0x44>
 800700c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007010:	059a      	lsls	r2, r3, #22
 8007012:	d4ef      	bmi.n	8006ff4 <__smakebuf_r+0x18>
 8007014:	f023 0303 	bic.w	r3, r3, #3
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	e7e3      	b.n	8006fe8 <__smakebuf_r+0xc>
 8007020:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <__smakebuf_r+0x7c>)
 8007022:	62b3      	str	r3, [r6, #40]	; 0x28
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	6020      	str	r0, [r4, #0]
 8007028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	9b00      	ldr	r3, [sp, #0]
 8007030:	6120      	str	r0, [r4, #16]
 8007032:	6163      	str	r3, [r4, #20]
 8007034:	9b01      	ldr	r3, [sp, #4]
 8007036:	b15b      	cbz	r3, 8007050 <__smakebuf_r+0x74>
 8007038:	4630      	mov	r0, r6
 800703a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800703e:	f000 f8d1 	bl	80071e4 <_isatty_r>
 8007042:	b128      	cbz	r0, 8007050 <__smakebuf_r+0x74>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	89a0      	ldrh	r0, [r4, #12]
 8007052:	4305      	orrs	r5, r0
 8007054:	81a5      	strh	r5, [r4, #12]
 8007056:	e7cd      	b.n	8006ff4 <__smakebuf_r+0x18>
 8007058:	08006ded 	.word	0x08006ded

0800705c <_malloc_usable_size_r>:
 800705c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007060:	1f18      	subs	r0, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfbc      	itt	lt
 8007066:	580b      	ldrlt	r3, [r1, r0]
 8007068:	18c0      	addlt	r0, r0, r3
 800706a:	4770      	bx	lr

0800706c <_raise_r>:
 800706c:	291f      	cmp	r1, #31
 800706e:	b538      	push	{r3, r4, r5, lr}
 8007070:	4604      	mov	r4, r0
 8007072:	460d      	mov	r5, r1
 8007074:	d904      	bls.n	8007080 <_raise_r+0x14>
 8007076:	2316      	movs	r3, #22
 8007078:	6003      	str	r3, [r0, #0]
 800707a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007082:	b112      	cbz	r2, 800708a <_raise_r+0x1e>
 8007084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007088:	b94b      	cbnz	r3, 800709e <_raise_r+0x32>
 800708a:	4620      	mov	r0, r4
 800708c:	f000 f830 	bl	80070f0 <_getpid_r>
 8007090:	462a      	mov	r2, r5
 8007092:	4601      	mov	r1, r0
 8007094:	4620      	mov	r0, r4
 8007096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800709a:	f000 b817 	b.w	80070cc <_kill_r>
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d00a      	beq.n	80070b8 <_raise_r+0x4c>
 80070a2:	1c59      	adds	r1, r3, #1
 80070a4:	d103      	bne.n	80070ae <_raise_r+0x42>
 80070a6:	2316      	movs	r3, #22
 80070a8:	6003      	str	r3, [r0, #0]
 80070aa:	2001      	movs	r0, #1
 80070ac:	e7e7      	b.n	800707e <_raise_r+0x12>
 80070ae:	2400      	movs	r4, #0
 80070b0:	4628      	mov	r0, r5
 80070b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070b6:	4798      	blx	r3
 80070b8:	2000      	movs	r0, #0
 80070ba:	e7e0      	b.n	800707e <_raise_r+0x12>

080070bc <raise>:
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <raise+0xc>)
 80070be:	4601      	mov	r1, r0
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	f7ff bfd3 	b.w	800706c <_raise_r>
 80070c6:	bf00      	nop
 80070c8:	20000010 	.word	0x20000010

080070cc <_kill_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	2300      	movs	r3, #0
 80070d0:	4d06      	ldr	r5, [pc, #24]	; (80070ec <_kill_r+0x20>)
 80070d2:	4604      	mov	r4, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	4611      	mov	r1, r2
 80070d8:	602b      	str	r3, [r5, #0]
 80070da:	f7f9 fee6 	bl	8000eaa <_kill>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	d102      	bne.n	80070e8 <_kill_r+0x1c>
 80070e2:	682b      	ldr	r3, [r5, #0]
 80070e4:	b103      	cbz	r3, 80070e8 <_kill_r+0x1c>
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
 80070ea:	bf00      	nop
 80070ec:	200002fc 	.word	0x200002fc

080070f0 <_getpid_r>:
 80070f0:	f7f9 bed4 	b.w	8000e9c <_getpid>

080070f4 <__sread>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	460c      	mov	r4, r1
 80070f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fc:	f000 f894 	bl	8007228 <_read_r>
 8007100:	2800      	cmp	r0, #0
 8007102:	bfab      	itete	ge
 8007104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007106:	89a3      	ldrhlt	r3, [r4, #12]
 8007108:	181b      	addge	r3, r3, r0
 800710a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800710e:	bfac      	ite	ge
 8007110:	6563      	strge	r3, [r4, #84]	; 0x54
 8007112:	81a3      	strhlt	r3, [r4, #12]
 8007114:	bd10      	pop	{r4, pc}

08007116 <__swrite>:
 8007116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711a:	461f      	mov	r7, r3
 800711c:	898b      	ldrh	r3, [r1, #12]
 800711e:	4605      	mov	r5, r0
 8007120:	05db      	lsls	r3, r3, #23
 8007122:	460c      	mov	r4, r1
 8007124:	4616      	mov	r6, r2
 8007126:	d505      	bpl.n	8007134 <__swrite+0x1e>
 8007128:	2302      	movs	r3, #2
 800712a:	2200      	movs	r2, #0
 800712c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007130:	f000 f868 	bl	8007204 <_lseek_r>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	4632      	mov	r2, r6
 8007138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	4628      	mov	r0, r5
 8007140:	463b      	mov	r3, r7
 8007142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800714a:	f000 b817 	b.w	800717c <_write_r>

0800714e <__sseek>:
 800714e:	b510      	push	{r4, lr}
 8007150:	460c      	mov	r4, r1
 8007152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007156:	f000 f855 	bl	8007204 <_lseek_r>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	bf15      	itete	ne
 8007160:	6560      	strne	r0, [r4, #84]	; 0x54
 8007162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800716a:	81a3      	strheq	r3, [r4, #12]
 800716c:	bf18      	it	ne
 800716e:	81a3      	strhne	r3, [r4, #12]
 8007170:	bd10      	pop	{r4, pc}

08007172 <__sclose>:
 8007172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007176:	f000 b813 	b.w	80071a0 <_close_r>
	...

0800717c <_write_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	4608      	mov	r0, r1
 8007182:	4611      	mov	r1, r2
 8007184:	2200      	movs	r2, #0
 8007186:	4d05      	ldr	r5, [pc, #20]	; (800719c <_write_r+0x20>)
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7f9 fec4 	bl	8000f18 <_write>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_write_r+0x1e>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_write_r+0x1e>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	200002fc 	.word	0x200002fc

080071a0 <_close_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	2300      	movs	r3, #0
 80071a4:	4d05      	ldr	r5, [pc, #20]	; (80071bc <_close_r+0x1c>)
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7f9 fed0 	bl	8000f50 <_close>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_close_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_close_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	200002fc 	.word	0x200002fc

080071c0 <_fstat_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	2300      	movs	r3, #0
 80071c4:	4d06      	ldr	r5, [pc, #24]	; (80071e0 <_fstat_r+0x20>)
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	f7f9 feca 	bl	8000f66 <_fstat>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d102      	bne.n	80071dc <_fstat_r+0x1c>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	b103      	cbz	r3, 80071dc <_fstat_r+0x1c>
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	bf00      	nop
 80071e0:	200002fc 	.word	0x200002fc

080071e4 <_isatty_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	2300      	movs	r3, #0
 80071e8:	4d05      	ldr	r5, [pc, #20]	; (8007200 <_isatty_r+0x1c>)
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f7f9 fec8 	bl	8000f84 <_isatty>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_isatty_r+0x1a>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_isatty_r+0x1a>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	200002fc 	.word	0x200002fc

08007204 <_lseek_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	4611      	mov	r1, r2
 800720c:	2200      	movs	r2, #0
 800720e:	4d05      	ldr	r5, [pc, #20]	; (8007224 <_lseek_r+0x20>)
 8007210:	602a      	str	r2, [r5, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f7f9 fec0 	bl	8000f98 <_lseek>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_lseek_r+0x1e>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_lseek_r+0x1e>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	200002fc 	.word	0x200002fc

08007228 <_read_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	2200      	movs	r2, #0
 8007232:	4d05      	ldr	r5, [pc, #20]	; (8007248 <_read_r+0x20>)
 8007234:	602a      	str	r2, [r5, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	f7f9 fe51 	bl	8000ede <_read>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d102      	bne.n	8007246 <_read_r+0x1e>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	b103      	cbz	r3, 8007246 <_read_r+0x1e>
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	200002fc 	.word	0x200002fc

0800724c <_init>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr

08007258 <_fini>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr
